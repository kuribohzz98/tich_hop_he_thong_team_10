// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package demo.dropbox_slack_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: dropbox_slack Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.2.1.20190620_1446
 * @status
 */
public class dropbox_slack implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "dropbox_slack";
	private final String projectName = "DEMO";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					dropbox_slack.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(dropbox_slack.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTClient_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tGoogleDriveList_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tGoogleDriveList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tGoogleDriveList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tGoogleDriveList_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_DEMO_dropbox_slack = new byte[0];
		static byte[] commonByteArray_DEMO_dropbox_slack = new byte[0];

		public String access_token;

		public String getAccess_token() {
			return this.access_token;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_dropbox_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_dropbox_slack.length == 0) {
						commonByteArray_DEMO_dropbox_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_dropbox_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_dropbox_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_dropbox_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_dropbox_slack) {

				try {

					int length = 0;

					this.access_token = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.access_token, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("access_token=" + access_token);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DEMO_dropbox_slack = new byte[0];
		static byte[] commonByteArray_DEMO_dropbox_slack = new byte[0];

		public Integer statusCode;

		public Integer getStatusCode() {
			return this.statusCode;
		}

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_dropbox_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_dropbox_slack.length == 0) {
						commonByteArray_DEMO_dropbox_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_dropbox_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_dropbox_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_dropbox_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_dropbox_slack) {

				try {

					int length = 0;

					this.statusCode = readInteger(dis);

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.statusCode, dos);

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("statusCode=" + String.valueOf(statusCode));
			sb.append(",body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DEMO_dropbox_slack = new byte[0];
		static byte[] commonByteArray_DEMO_dropbox_slack = new byte[0];

		public Integer statusCode;

		public Integer getStatusCode() {
			return this.statusCode;
		}

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_dropbox_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_dropbox_slack.length == 0) {
						commonByteArray_DEMO_dropbox_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_dropbox_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_dropbox_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_dropbox_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_dropbox_slack) {

				try {

					int length = 0;

					this.statusCode = readInteger(dis);

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.statusCode, dos);

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("statusCode=" + String.valueOf(statusCode));
			sb.append(",body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DEMO_dropbox_slack = new byte[0];
		static byte[] commonByteArray_DEMO_dropbox_slack = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String drive_client_id;

		public String getDrive_client_id() {
			return this.drive_client_id;
		}

		public String drive_client_secret;

		public String getDrive_client_secret() {
			return this.drive_client_secret;
		}

		public String drive_refresh_token;

		public String getDrive_refresh_token() {
			return this.drive_refresh_token;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.id = this.id;
			other.drive_client_id = this.drive_client_id;
			other.drive_client_secret = this.drive_client_secret;
			other.drive_refresh_token = this.drive_refresh_token;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_dropbox_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_dropbox_slack.length == 0) {
						commonByteArray_DEMO_dropbox_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_dropbox_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_dropbox_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_dropbox_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_dropbox_slack) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.drive_client_id = readString(dis);

					this.drive_client_secret = readString(dis);

					this.drive_refresh_token = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.drive_client_id, dos);

				// String

				writeString(this.drive_client_secret, dos);

				// String

				writeString(this.drive_refresh_token, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",drive_client_id=" + drive_client_id);
			sb.append(",drive_client_secret=" + drive_client_secret);
			sb.append(",drive_refresh_token=" + drive_refresh_token);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				row2Struct row3 = row2;
				row4Struct row4 = new row4Struct();

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tExtractJSONFields_1 begin ] start
				 */

				ok_Hash.put("tExtractJSONFields_1", false);
				start_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());

				currentComponent = "tExtractJSONFields_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tExtractJSONFields_1 = 0;

				int nb_line_tExtractJSONFields_1 = 0;
				String jsonStr_tExtractJSONFields_1 = "";

				class JsonPathCache_tExtractJSONFields_1 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				JsonPathCache_tExtractJSONFields_1 jsonPathCache_tExtractJSONFields_1 = new JsonPathCache_tExtractJSONFields_1();

				/**
				 * [tExtractJSONFields_1 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[3];

					public void addRow(String[] row) {

						for (int i = 0; i < 3; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 2 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 2 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[2] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] { "statusCode", "body", "string", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tRESTClient_1 begin ] start
				 */

				ok_Hash.put("tRESTClient_1", false);
				start_Hash.put("tRESTClient_1", System.currentTimeMillis());

				currentComponent = "tRESTClient_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tRESTClient_1 = 0;

				/**
				 * [tRESTClient_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
				calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "root";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[J8YPu2j6Wxzw8oyGBc1O6w==]");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "talend" + "?"
						+ "noDatetimeStringSync=true&useSSL=false";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  `slack_google_drive`.`id`, \n  `slack_google_drive`.`drive_client_id`, \n  `slack_google_drive`.`drive_client_s"
						+ "ecret`, \n  `slack_google_drive`.`drive_refresh_token`\nFROM `slack_google_drive`";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.id = 0;
						} else {

							row1.id = rs_tDBInput_1.getInt(1);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.drive_client_id = null;
						} else {

							row1.drive_client_id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.drive_client_secret = null;
						} else {

							row1.drive_client_secret = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.drive_refresh_token = null;
						} else {

							row1.drive_refresh_token = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tRESTClient_1 main ] start
						 */

						currentComponent = "tRESTClient_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId, 1, 1);
						}

						row2 = null;

// expected response body
						javax.ws.rs.core.Response responseDoc_tRESTClient_1 = null;

						try {
							// request body
							org.dom4j.Document requestDoc_tRESTClient_1 = null;
							String requestString_tRESTClient_1 = null;

							Object requestBody_tRESTClient_1 = requestDoc_tRESTClient_1 != null
									? requestDoc_tRESTClient_1
									: requestString_tRESTClient_1;

							// resposne class name
							Class<?> responseClass_tRESTClient_1 = String.class;

							// create web client instance
							org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_1 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

							boolean inOSGi = routines.system.BundleUtils.inOSGi();

							final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_1 = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

							String url = "https://www.googleapis.com/oauth2/v4/token?client_secret="
									+ row1.drive_client_secret + "&grant_type=refresh_token&refresh_token="
									+ row1.drive_refresh_token + "&client_id=" + row1.drive_client_id;
							// {baseUri}tRESTClient
							factoryBean_tRESTClient_1.setServiceName(new javax.xml.namespace.QName(url, "tRESTClient"));
							factoryBean_tRESTClient_1.setAddress(url);

							factoryBean_tRESTClient_1.setFeatures(features_tRESTClient_1);

							java.util.List<Object> providers_tRESTClient_1 = new java.util.ArrayList<Object>();
							providers_tRESTClient_1.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
								// workaround for https://jira.talendforge.org/browse/TESB-7276
								public org.dom4j.Document readFrom(Class<org.dom4j.Document> cls,
										java.lang.reflect.Type type, java.lang.annotation.Annotation[] anns,
										javax.ws.rs.core.MediaType mt,
										javax.ws.rs.core.MultivaluedMap<String, String> headers, java.io.InputStream is)
										throws IOException, javax.ws.rs.WebApplicationException {
									String contentLength = headers.getFirst("Content-Length");
									if (!org.apache.cxf.common.util.StringUtils.isEmpty(contentLength)
											&& Integer.valueOf(contentLength) <= 0) {
										try {
											return org.dom4j.DocumentHelper.parseText("<root/>");
										} catch (org.dom4j.DocumentException e_tRESTClient_1) {
											e_tRESTClient_1.printStackTrace();
										}
										return null;
									}
									return super.readFrom(cls, type, anns, mt, headers, is);
								}
							});
							org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_1 = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
							jsonProvider_tRESTClient_1.setIgnoreNamespaces(true);
							jsonProvider_tRESTClient_1.setAttributesToElements(true);

							jsonProvider_tRESTClient_1.setSupportUnwrapped(true);
							jsonProvider_tRESTClient_1.setWrapperName("root");

							jsonProvider_tRESTClient_1.setDropRootElement(false);
							jsonProvider_tRESTClient_1.setConvertTypesToStrings(false);
							providers_tRESTClient_1.add(jsonProvider_tRESTClient_1);
							factoryBean_tRESTClient_1.setProviders(providers_tRESTClient_1);
							factoryBean_tRESTClient_1.setTransportId("http://cxf.apache.org/transports/http");

							boolean use_auth_tRESTClient_1 = false;
							if (use_auth_tRESTClient_1 && "SAML".equals("BASIC")) {
								if (!inOSGi) {
									throw new IllegalArgumentException(
											"SAML based security scenarios are not supported in Studio (standalone)");
								}
								// set SAML Token authentication

								final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil
										.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

								org.apache.cxf.ws.security.trust.STSClient stsClient = org.talend.esb.security.saml.STSClientUtils
										.createSTSClient(factoryBean_tRESTClient_1.getBus(), "username",
												decryptedPassword_tRESTClient_1);

								org.talend.esb.security.saml.SAMLRESTUtils.configureClient(factoryBean_tRESTClient_1,
										stsClient);
							}

							org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_1 = factoryBean_tRESTClient_1
									.createWebClient();

							// set request path
							webClient_tRESTClient_1.path("");

							// set connection properties
							org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_1 = org.apache.cxf.jaxrs.client.WebClient
									.getConfig(webClient_tRESTClient_1);
							org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_1 = clientConfig_tRESTClient_1
									.getHttpConduit();

							if (clientConfig_tRESTClient_1.getEndpoint() != null
									&& clientConfig_tRESTClient_1.getEndpoint().getEndpointInfo() != null) {
								clientConfig_tRESTClient_1.getEndpoint().getEndpointInfo()
										.setProperty("enable.webclient.operation.reporting", true);
							}

							if (use_auth_tRESTClient_1 && "BASIC".equals("BASIC")) {
								// set BASIC auth

								final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil
										.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

								org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_1 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
								authPolicy_tRESTClient_1.setAuthorizationType("Basic");
								authPolicy_tRESTClient_1.setUserName("username");
								authPolicy_tRESTClient_1.setPassword(decryptedPassword_tRESTClient_1);
								conduit_tRESTClient_1.setAuthorization(authPolicy_tRESTClient_1);
							} else if (use_auth_tRESTClient_1 && "HTTP Digest".equals("BASIC")) {
								// set Digest auth

								final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil
										.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

								org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_1 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
								authPolicy_tRESTClient_1.setAuthorizationType("Digest");
								authPolicy_tRESTClient_1.setUserName("username");
								authPolicy_tRESTClient_1.setPassword(decryptedPassword_tRESTClient_1);
								conduit_tRESTClient_1.setAuthorization(authPolicy_tRESTClient_1);
							}

							if (!inOSGi) {
								conduit_tRESTClient_1.getClient().setReceiveTimeout((long) (60 * 1000L));
								conduit_tRESTClient_1.getClient().setConnectionTimeout((long) (30 * 1000L));
								boolean use_proxy_tRESTClient_1 = false;
								if (use_proxy_tRESTClient_1) {

									final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil
											.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");

									conduit_tRESTClient_1.getClient().setProxyServer("61.163.92.4");
									conduit_tRESTClient_1.getClient().setProxyServerPort(Integer.valueOf(8080));
									conduit_tRESTClient_1.getProxyAuthorization().setUserName("");
									conduit_tRESTClient_1.getProxyAuthorization()
											.setPassword(decryptedPassword_tRESTClient_1);
								}
							}

							// set Content-Type
							webClient_tRESTClient_1.type("application/json");

							// set Accept-Type
							webClient_tRESTClient_1.accept("*/*");

							// set optional query and header properties if any

							if (use_auth_tRESTClient_1 && "OAUTH2_BEARER".equals("BASIC")) {
								// set oAuth2 bearer token
								webClient_tRESTClient_1.header("Authorization", "Bearer " + "");
							}

							if (use_auth_tRESTClient_1 && "OIDC_PASSWORD_GRANT".equals("BASIC")) {

								final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil
										.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

								String username_tRESTClient_1 = "username";
								String password_tRESTClient_1 = decryptedPassword_tRESTClient_1;

								String bearerHeader_tRESTClient_1 = null;

								try {
									if (!inOSGi) {
										org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_1 = new org.springframework.context.support.ClassPathXmlApplicationContext(
												"META-INF/tesb/oidc-context.xml");
										org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_1 = context_tRESTClient_1
												.getBean(org.talend.esb.security.oidc.OidcConfiguration.class);
										bearerHeader_tRESTClient_1 = org.talend.esb.security.oidc.OidcClientUtils
												.oidcClientBearer(username_tRESTClient_1, password_tRESTClient_1,
														oidcConfiguration_tRESTClient_1);
									} else {
										bearerHeader_tRESTClient_1 = org.talend.esb.security.oidc.OidcClientUtils
												.oidcClientBearer(username_tRESTClient_1, password_tRESTClient_1);
									}
								} catch (Exception ex) {
									throw new javax.ws.rs.WebApplicationException("Failed to get OIDC access token: ",
											ex);
								}

								webClient_tRESTClient_1.header("Authorization", bearerHeader_tRESTClient_1);
							}

							// if FORM request then capture query parameters into Form, otherwise set them
							// as queries

							try {
								// start send request

								responseDoc_tRESTClient_1 = webClient_tRESTClient_1.post(requestBody_tRESTClient_1);

								int webClientResponseStatus_tRESTClient_1 = webClient_tRESTClient_1.getResponse()
										.getStatus();
								if (webClientResponseStatus_tRESTClient_1 >= 300) {
									throw new javax.ws.rs.WebApplicationException(
											webClient_tRESTClient_1.getResponse());
								}

								if (row2 == null) {
									row2 = new row2Struct();
								}

								row2.statusCode = webClientResponseStatus_tRESTClient_1;

								Object responseObj_tRESTClient_1 = null;
								if (responseDoc_tRESTClient_1 != null && responseDoc_tRESTClient_1.hasEntity()) {
									responseObj_tRESTClient_1 = responseDoc_tRESTClient_1
											.readEntity(responseClass_tRESTClient_1);

									if (responseObj_tRESTClient_1 != null) {
										if (responseClass_tRESTClient_1 == String.class) {
											row2.string = (String) responseObj_tRESTClient_1;
										} else {
											routines.system.Document responseTalendDoc_tRESTClient_1 = null;
											if (null != responseObj_tRESTClient_1) {
												responseTalendDoc_tRESTClient_1 = new routines.system.Document();
												responseTalendDoc_tRESTClient_1
														.setDocument((org.dom4j.Document) responseObj_tRESTClient_1);
											}
											row2.body = responseTalendDoc_tRESTClient_1;
										}
									}
								}

								globalMap.put("tRESTClient_1_HEADERS",
										webClient_tRESTClient_1.getResponse().getHeaders());

								// handle "oneway" for PUT, POST and PATCH with empty response payload
								if (webClientResponseStatus_tRESTClient_1 == 202 && responseObj_tRESTClient_1 == null) {
									row2.string = "";
									return;
								}

							} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_1) {

								throw ex_tRESTClient_1;

							}

						} catch (Exception e_tRESTClient_1) {

							throw new TalendException(e_tRESTClient_1, currentComponent, globalMap);

						}

						tos_count_tRESTClient_1++;

						/**
						 * [tRESTClient_1 main ] stop
						 */

						/**
						 * [tRESTClient_1 process_data_begin ] start
						 */

						currentComponent = "tRESTClient_1";

						/**
						 * [tRESTClient_1 process_data_begin ] stop
						 */
// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tLogRow_1 main ] start
							 */

							currentComponent = "tLogRow_1";

							// row2
							// row2

							if (execStat) {
								runStat.updateStatOnConnection("row2" + iterateId, 1, 1);
							}

///////////////////////		

							String[] row_tLogRow_1 = new String[3];

							if (row2.statusCode != null) { //
								row_tLogRow_1[0] = String.valueOf(row2.statusCode);

							} //

							if (row2.body != null) { //
								row_tLogRow_1[1] = String.valueOf(row2.body);

							} //

							if (row2.string != null) { //
								row_tLogRow_1[2] = String.valueOf(row2.string);

							} //

							util_tLogRow_1.addRow(row_tLogRow_1);
							nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

							row3 = row2;

							tos_count_tLogRow_1++;

							/**
							 * [tLogRow_1 main ] stop
							 */

							/**
							 * [tLogRow_1 process_data_begin ] start
							 */

							currentComponent = "tLogRow_1";

							/**
							 * [tLogRow_1 process_data_begin ] stop
							 */

							/**
							 * [tExtractJSONFields_1 main ] start
							 */

							currentComponent = "tExtractJSONFields_1";

							// row3
							// row3

							if (execStat) {
								runStat.updateStatOnConnection("row3" + iterateId, 1, 1);
							}

							if (row3.string != null) {// C_01
								jsonStr_tExtractJSONFields_1 = row3.string.toString();

								row4 = null;

								String loopPath_tExtractJSONFields_1 = "$";
								java.util.List<Object> resultset_tExtractJSONFields_1 = new java.util.ArrayList<Object>();

								boolean isStructError_tExtractJSONFields_1 = true;
								com.jayway.jsonpath.ReadContext document_tExtractJSONFields_1 = null;
								try {
									document_tExtractJSONFields_1 = com.jayway.jsonpath.JsonPath
											.parse(jsonStr_tExtractJSONFields_1);
									com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(loopPath_tExtractJSONFields_1);
									Object result_tExtractJSONFields_1 = document_tExtractJSONFields_1.read(
											compiledLoopPath_tExtractJSONFields_1, net.minidev.json.JSONObject.class);
									if (result_tExtractJSONFields_1 instanceof net.minidev.json.JSONArray) {
										resultset_tExtractJSONFields_1 = (net.minidev.json.JSONArray) result_tExtractJSONFields_1;
									} else {
										resultset_tExtractJSONFields_1.add(result_tExtractJSONFields_1);
									}

									isStructError_tExtractJSONFields_1 = false;
								} catch (java.lang.Exception ex_tExtractJSONFields_1) {
									System.err.println(ex_tExtractJSONFields_1.getMessage());
								}

								String jsonPath_tExtractJSONFields_1 = null;
								com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_1 = null;

								Object value_tExtractJSONFields_1 = null;

								Object root_tExtractJSONFields_1 = null;
								for (int i_tExtractJSONFields_1 = 0; isStructError_tExtractJSONFields_1
										|| (i_tExtractJSONFields_1 < resultset_tExtractJSONFields_1
												.size()); i_tExtractJSONFields_1++) {
									if (!isStructError_tExtractJSONFields_1) {
										Object row_tExtractJSONFields_1 = resultset_tExtractJSONFields_1
												.get(i_tExtractJSONFields_1);
										row4 = null;
										row4 = new row4Struct();
										nb_line_tExtractJSONFields_1++;
										try {
											jsonPath_tExtractJSONFields_1 = "@.access_token";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
														.read(row_tExtractJSONFields_1);

												row4.access_token = value_tExtractJSONFields_1 == null ?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row4.access_token =

														null

												;
											}
										} catch (java.lang.Exception ex_tExtractJSONFields_1) {
											System.err.println(ex_tExtractJSONFields_1.getMessage());
											row4 = null;
										}

									}

									isStructError_tExtractJSONFields_1 = false;

//}

									tos_count_tExtractJSONFields_1++;

									/**
									 * [tExtractJSONFields_1 main ] stop
									 */

									/**
									 * [tExtractJSONFields_1 process_data_begin ] start
									 */

									currentComponent = "tExtractJSONFields_1";

									/**
									 * [tExtractJSONFields_1 process_data_begin ] stop
									 */
// Start of branch "row4"
									if (row4 != null) {

										/**
										 * [tJavaRow_1 main ] start
										 */

										currentComponent = "tJavaRow_1";

										// row4
										// row4

										if (execStat) {
											runStat.updateStatOnConnection("row4" + iterateId, 1, 1);
										}

										// code sample:
//
// multiply by 2 the row identifier
// output_row.id = row4.id * 2;
//
// lowercase the name
// output_row.name = row4.name.toLowerCase();

										this.globalMap.put("drive_access_token", row4.access_token);
										nb_line_tJavaRow_1++;

										tos_count_tJavaRow_1++;

										/**
										 * [tJavaRow_1 main ] stop
										 */

										/**
										 * [tJavaRow_1 process_data_begin ] start
										 */

										currentComponent = "tJavaRow_1";

										/**
										 * [tJavaRow_1 process_data_begin ] stop
										 */

										/**
										 * [tJavaRow_1 process_data_end ] start
										 */

										currentComponent = "tJavaRow_1";

										/**
										 * [tJavaRow_1 process_data_end ] stop
										 */

									} // End of branch "row4"

									// end for
								}

							} // C_01

							/**
							 * [tExtractJSONFields_1 process_data_end ] start
							 */

							currentComponent = "tExtractJSONFields_1";

							/**
							 * [tExtractJSONFields_1 process_data_end ] stop
							 */

							/**
							 * [tLogRow_1 process_data_end ] start
							 */

							currentComponent = "tLogRow_1";

							/**
							 * [tLogRow_1 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tRESTClient_1 process_data_end ] start
						 */

						currentComponent = "tRESTClient_1";

						/**
						 * [tRESTClient_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

					}

				}

				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tRESTClient_1 end ] start
				 */

				currentComponent = "tRESTClient_1";

				if (globalMap.get("tRESTClient_1_NB_LINE") == null) {
					globalMap.put("tRESTClient_1_NB_LINE", 1);
				}

// [tRESTCliend_end]

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tRESTClient_1", true);
				end_Hash.put("tRESTClient_1", System.currentTimeMillis());

				/**
				 * [tRESTClient_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tExtractJSONFields_1 end ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tExtractJSONFields_1", true);
				end_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());

				/**
				 * [tExtractJSONFields_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tGoogleDriveList_1Process(globalMap);

				/**
				 * [tJavaRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tRESTClient_1 finally ] start
				 */

				currentComponent = "tRESTClient_1";

				/**
				 * [tRESTClient_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_1 finally ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				/**
				 * [tExtractJSONFields_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_DEMO_dropbox_slack = new byte[0];
		static byte[] commonByteArray_DEMO_dropbox_slack = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String mimeType;

		public String getMimeType() {
			return this.mimeType;
		}

		public java.util.Date modifiedTime;

		public java.util.Date getModifiedTime() {
			return this.modifiedTime;
		}

		public Long size;

		public Long getSize() {
			return this.size;
		}

		public String kind;

		public String getKind() {
			return this.kind;
		}

		public Boolean trashed;

		public Boolean getTrashed() {
			return this.trashed;
		}

		public String parents;

		public String getParents() {
			return this.parents;
		}

		public String webViewLink;

		public String getWebViewLink() {
			return this.webViewLink;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_dropbox_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_dropbox_slack.length == 0) {
						commonByteArray_DEMO_dropbox_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_dropbox_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_dropbox_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_dropbox_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_dropbox_slack) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.name = readString(dis);

					this.mimeType = readString(dis);

					this.modifiedTime = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.size = null;
					} else {
						this.size = dis.readLong();
					}

					this.kind = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.trashed = null;
					} else {
						this.trashed = dis.readBoolean();
					}

					this.parents = readString(dis);

					this.webViewLink = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.mimeType, dos);

				// java.util.Date

				writeDate(this.modifiedTime, dos);

				// Long

				if (this.size == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.size);
				}

				// String

				writeString(this.kind, dos);

				// Boolean

				if (this.trashed == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.trashed);
				}

				// String

				writeString(this.parents, dos);

				// String

				writeString(this.webViewLink, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",name=" + name);
			sb.append(",mimeType=" + mimeType);
			sb.append(",modifiedTime=" + String.valueOf(modifiedTime));
			sb.append(",size=" + String.valueOf(size));
			sb.append(",kind=" + kind);
			sb.append(",trashed=" + String.valueOf(trashed));
			sb.append(",parents=" + parents);
			sb.append(",webViewLink=" + webViewLink);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tGoogleDriveList_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tGoogleDriveList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tLogRow_2 = 0;

				///////////////////////

				class Util_tLogRow_2 {

					String[] des_top = { ".", "-" };

					String[] des_data = { "-", "+" };

					String[] des_frame = { "|" };

					public void printLine(StringBuilder sb, int titleWidth, int dataWidth) {

						sb.append("+");
						for (int i = 0; i < titleWidth + 2; i++)
							sb.append("-");
						sb.append("+");
						for (int i = 0; i < dataWidth + 2; i++)
							sb.append("-");
						sb.append("+" + "\n");
					}

					public String print(String[] row, int nbLine) {

						StringBuilder sb = new StringBuilder();

						String title = "#" + nbLine + ". " + "tLogRow_2";

						// step 1: get the max length of all the row[] member;
						int dataWidth = 5; // the length of the string "value"
						for (int i = 0; i < row.length; i++) {
							if (row[i] == null && 4 > dataWidth) {
								dataWidth = 4;
							} else if (row[i] != null && row[i].length() > dataWidth)
								dataWidth = row[i].length();
						}

						int titleWidth = 12;

						int totalWidth = dataWidth + titleWidth + 5;

						// step 2: print the header with line number
						sb.append(".");
						for (int i = 0; i < totalWidth; i++)
							sb.append("-");
						sb.append("." + "\n" + "|");

						int emptyCenterWidth = (totalWidth - title.length()) / 2;
						for (int i = 0; i < emptyCenterWidth; i++)
							sb.append(" ");
						sb.append(title);
						for (int i = 0; i < totalWidth - emptyCenterWidth - title.length(); i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// step 3: print "key" and "value"
						printLine(sb, titleWidth, dataWidth);

						sb.append("|" + " key");
						for (int i = 0; i < titleWidth - 2; i++)
							sb.append(" ");
						sb.append("|" + " value");
						for (int i = 0; i < dataWidth - 4; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						printLine(sb, titleWidth, dataWidth);

						// step 4: print dataset

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "id");
						for (int i = 0; i < titleWidth - "id".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[0]);
						for (int i = 0; row[0] == null && i < dataWidth - 3
								|| row[0] != null && i < dataWidth - row[0].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "name");
						for (int i = 0; i < titleWidth - "name".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[1]);
						for (int i = 0; row[1] == null && i < dataWidth - 3
								|| row[1] != null && i < dataWidth - row[1].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "mimeType");
						for (int i = 0; i < titleWidth - "mimeType".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[2]);
						for (int i = 0; row[2] == null && i < dataWidth - 3
								|| row[2] != null && i < dataWidth - row[2].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "modifiedTime");
						for (int i = 0; i < titleWidth - "modifiedTime".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[3]);
						for (int i = 0; row[3] == null && i < dataWidth - 3
								|| row[3] != null && i < dataWidth - row[3].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "size");
						for (int i = 0; i < titleWidth - "size".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[4]);
						for (int i = 0; row[4] == null && i < dataWidth - 3
								|| row[4] != null && i < dataWidth - row[4].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "kind");
						for (int i = 0; i < titleWidth - "kind".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[5]);
						for (int i = 0; row[5] == null && i < dataWidth - 3
								|| row[5] != null && i < dataWidth - row[5].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "trashed");
						for (int i = 0; i < titleWidth - "trashed".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[6]);
						for (int i = 0; row[6] == null && i < dataWidth - 3
								|| row[6] != null && i < dataWidth - row[6].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "parents");
						for (int i = 0; i < titleWidth - "parents".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[7]);
						for (int i = 0; row[7] == null && i < dataWidth - 3
								|| row[7] != null && i < dataWidth - row[7].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "webViewLink");
						for (int i = 0; i < titleWidth - "webViewLink".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[8]);
						for (int i = 0; row[8] == null && i < dataWidth - 3
								|| row[8] != null && i < dataWidth - row[8].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// step 5: print a line gap
						printLine(sb, titleWidth, dataWidth);
						return sb.toString();

					}

				}

				Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();

				java.io.PrintStream consoleOut_tLogRow_2 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
				}

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
///////////////////////    			

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tGoogleDriveList_1 begin ] start
				 */

				ok_Hash.put("tGoogleDriveList_1", false);
				start_Hash.put("tGoogleDriveList_1", System.currentTimeMillis());

				currentComponent = "tGoogleDriveList_1";

				int tos_count_tGoogleDriveList_1 = 0;

				org.talend.components.api.component.ComponentDefinition def_tGoogleDriveList_1 = new org.talend.components.google.drive.list.GoogleDriveListDefinition();

				org.talend.components.google.drive.list.GoogleDriveListProperties props_tGoogleDriveList_1 = (org.talend.components.google.drive.list.GoogleDriveListProperties) def_tGoogleDriveList_1
						.createRuntimeProperties();
				props_tGoogleDriveList_1.setValue("folderAccessMethod",
						org.talend.components.google.drive.GoogleDriveComponentProperties.AccessMethod.Name);

				props_tGoogleDriveList_1.setValue("folder", "root");

				props_tGoogleDriveList_1.setValue("includeSubDirectories", false);

				props_tGoogleDriveList_1.setValue("listMode",
						org.talend.components.google.drive.list.GoogleDriveListProperties.ListMode.Files);

				props_tGoogleDriveList_1.setValue("includeTrashedFiles", false);

				class SchemaSettingTool_tGoogleDriveList_1_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"tGoogleDriveList\",\"fields\":[{", s);

						a("\"name\":\"id\",\"type\":[\"string\",\"null\"],\"talend.isLocked\":\"true\"},{", s);

						a("\"name\":\"name\",\"type\":[\"string\",\"null\"],\"talend.isLocked\":\"true\"},{", s);

						a("\"name\":\"mimeType\",\"type\":[\"string\",\"null\"],\"talend.isLocked\":\"true\"},{", s);

						a("\"name\":\"modifiedTime\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"talend.isLocked\":\"true\",\"java-class\":\"java.util.Date\",\"talend.field.pattern\":\"yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"size\",\"type\":[\"long\",\"null\"],\"talend.isLocked\":\"true\"},{", s);

						a("\"name\":\"kind\",\"type\":[\"string\",\"null\"],\"talend.isLocked\":\"true\"},{", s);

						a("\"name\":\"trashed\",\"type\":[\"boolean\",\"null\"],\"talend.isLocked\":\"true\"},{", s);

						a("\"name\":\"parents\",\"type\":[\"string\",\"null\"],\"talend.isLocked\":\"true\"},{", s);

						a("\"name\":\"webViewLink\",\"type\":[\"string\",\"null\"],\"talend.isLocked\":\"true\"}],\"talend.isLocked\":\"true\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tGoogleDriveList_1_1_fisrt sst_tGoogleDriveList_1_1_fisrt = new SchemaSettingTool_tGoogleDriveList_1_1_fisrt();

				props_tGoogleDriveList_1.schemaMain.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tGoogleDriveList_1_1_fisrt.getSchemaValue()));

				props_tGoogleDriveList_1.connection.setValue("applicationName", "Talend");

				props_tGoogleDriveList_1.connection.setValue("oAuthMethod",
						org.talend.components.google.drive.connection.GoogleDriveConnectionProperties.OAuthMethod.AccessToken);

				props_tGoogleDriveList_1.connection.setValue("accessToken", this.globalMap.get("drive_access_token"));

				props_tGoogleDriveList_1.connection.setValue("useProxy", false);

				props_tGoogleDriveList_1.connection.setValue("useSSL", false);

				props_tGoogleDriveList_1.connection.referencedComponent.setValue("referenceDefinitionName",
						"tGoogleDriveConnection");

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tGoogleDriveList_1.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tGoogleDriveList_1 = props_tGoogleDriveList_1.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tGoogleDriveList_1 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tGoogleDriveList_1 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tGoogleDriveList_1
										+ "_COMPONENT_RUNTIME_PROPERTIES");
						props_tGoogleDriveList_1.connection.referencedComponent
								.setReference(referencedComponentProperties_tGoogleDriveList_1);
					}
				}
				globalMap.put("tGoogleDriveList_1_COMPONENT_RUNTIME_PROPERTIES", props_tGoogleDriveList_1);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.2");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.27.3");
				java.net.URL mappings_url_tGoogleDriveList_1 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tGoogleDriveList_1_MAPPINGS_URL", mappings_url_tGoogleDriveList_1);

				org.talend.components.api.container.RuntimeContainer container_tGoogleDriveList_1 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tGoogleDriveList_1";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tGoogleDriveList_1 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tGoogleDriveList_1 = null;
				topology_tGoogleDriveList_1 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tGoogleDriveList_1 = def_tGoogleDriveList_1
						.getRuntimeInfo(org.talend.components.api.component.runtime.ExecutionEngine.DI,
								props_tGoogleDriveList_1, topology_tGoogleDriveList_1);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tGoogleDriveList_1 = def_tGoogleDriveList_1
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tGoogleDriveList_1 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tGoogleDriveList_1.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tGoogleDriveList_1 = componentRuntime_tGoogleDriveList_1
						.initialize(container_tGoogleDriveList_1, props_tGoogleDriveList_1);

				if (initVr_tGoogleDriveList_1
						.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tGoogleDriveList_1.getMessage());
				}

				if (componentRuntime_tGoogleDriveList_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tGoogleDriveList_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tGoogleDriveList_1;
					compDriverInitialization_tGoogleDriveList_1.runAtDriver(container_tGoogleDriveList_1);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tGoogleDriveList_1 = null;
				if (componentRuntime_tGoogleDriveList_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tGoogleDriveList_1 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tGoogleDriveList_1;
					org.talend.daikon.properties.ValidationResult vr_tGoogleDriveList_1 = sourceOrSink_tGoogleDriveList_1
							.validate(container_tGoogleDriveList_1);
					if (vr_tGoogleDriveList_1
							.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
						throw new RuntimeException(vr_tGoogleDriveList_1.getMessage());
					}
				}

				org.talend.components.api.component.runtime.Source source_tGoogleDriveList_1 = (org.talend.components.api.component.runtime.Source) sourceOrSink_tGoogleDriveList_1;
				org.talend.components.api.component.runtime.Reader reader_tGoogleDriveList_1 = source_tGoogleDriveList_1
						.createReader(container_tGoogleDriveList_1);
				reader_tGoogleDriveList_1 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(
						reader_tGoogleDriveList_1, container_tGoogleDriveList_1);

				boolean multi_output_is_allowed_tGoogleDriveList_1 = false;
				org.talend.components.api.component.Connector c_tGoogleDriveList_1 = null;
				for (org.talend.components.api.component.Connector currentConnector : props_tGoogleDriveList_1
						.getAvailableConnectors(null, true)) {
					if (currentConnector.getName().equals("MAIN")) {
						c_tGoogleDriveList_1 = currentConnector;
					}

					if (currentConnector.getName().equals("REJECT")) {// it's better to move the code to javajet
						multi_output_is_allowed_tGoogleDriveList_1 = true;
					}
				}
				org.apache.avro.Schema schema_tGoogleDriveList_1 = props_tGoogleDriveList_1
						.getSchema(c_tGoogleDriveList_1, true);

				org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tGoogleDriveList_1 = org.talend.codegen.enforcer.EnforcerCreator
						.createOutgoingEnforcer(schema_tGoogleDriveList_1, false);

				// Create a reusable factory that converts the output of the reader to an
				// IndexedRecord.
				org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tGoogleDriveList_1 = null;

				// Iterate through the incoming data.
				boolean available_tGoogleDriveList_1 = reader_tGoogleDriveList_1.start();

				resourceMap.put("reader_tGoogleDriveList_1", reader_tGoogleDriveList_1);

				for (; available_tGoogleDriveList_1; available_tGoogleDriveList_1 = reader_tGoogleDriveList_1
						.advance()) {
					nb_line_tGoogleDriveList_1++;

					if (multi_output_is_allowed_tGoogleDriveList_1) {
						row5 = null;

					}

					try {
						Object data_tGoogleDriveList_1 = reader_tGoogleDriveList_1.getCurrent();

						if (multi_output_is_allowed_tGoogleDriveList_1) {
							row5 = new row5Struct();
						}

						// Construct the factory once when the first data arrives.
						if (factory_tGoogleDriveList_1 == null) {
							factory_tGoogleDriveList_1 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>) new org.talend.daikon.avro.AvroRegistry()
									.createIndexedRecordConverter(data_tGoogleDriveList_1.getClass());
						}

						// Enforce the outgoing schema on the input.
						outgoingEnforcer_tGoogleDriveList_1
								.setWrapped(factory_tGoogleDriveList_1.convertToAvro(data_tGoogleDriveList_1));
						Object columnValue_0_tGoogleDriveList_1 = outgoingEnforcer_tGoogleDriveList_1.get(0);
						row5.id = (String) (columnValue_0_tGoogleDriveList_1);
						Object columnValue_1_tGoogleDriveList_1 = outgoingEnforcer_tGoogleDriveList_1.get(1);
						row5.name = (String) (columnValue_1_tGoogleDriveList_1);
						Object columnValue_2_tGoogleDriveList_1 = outgoingEnforcer_tGoogleDriveList_1.get(2);
						row5.mimeType = (String) (columnValue_2_tGoogleDriveList_1);
						Object columnValue_3_tGoogleDriveList_1 = outgoingEnforcer_tGoogleDriveList_1.get(3);
						row5.modifiedTime = (java.util.Date) (columnValue_3_tGoogleDriveList_1);
						Object columnValue_4_tGoogleDriveList_1 = outgoingEnforcer_tGoogleDriveList_1.get(4);
						row5.size = (Long) (columnValue_4_tGoogleDriveList_1);
						Object columnValue_5_tGoogleDriveList_1 = outgoingEnforcer_tGoogleDriveList_1.get(5);
						row5.kind = (String) (columnValue_5_tGoogleDriveList_1);
						Object columnValue_6_tGoogleDriveList_1 = outgoingEnforcer_tGoogleDriveList_1.get(6);
						row5.trashed = (Boolean) (columnValue_6_tGoogleDriveList_1);
						Object columnValue_7_tGoogleDriveList_1 = outgoingEnforcer_tGoogleDriveList_1.get(7);
						row5.parents = (String) (columnValue_7_tGoogleDriveList_1);
						Object columnValue_8_tGoogleDriveList_1 = outgoingEnforcer_tGoogleDriveList_1.get(8);
						row5.webViewLink = (String) (columnValue_8_tGoogleDriveList_1);
					} catch (org.talend.components.api.exception.DataRejectException e_tGoogleDriveList_1) {
						java.util.Map<String, Object> info_tGoogleDriveList_1 = e_tGoogleDriveList_1.getRejectInfo();
						// TODO use a method instead of getting method by the special key
						// "error/errorMessage"
						Object errorMessage_tGoogleDriveList_1 = null;
						if (info_tGoogleDriveList_1.containsKey("error")) {
							errorMessage_tGoogleDriveList_1 = info_tGoogleDriveList_1.get("error");
						} else if (info_tGoogleDriveList_1.containsKey("errorMessage")) {
							errorMessage_tGoogleDriveList_1 = info_tGoogleDriveList_1.get("errorMessage");
						} else {
							errorMessage_tGoogleDriveList_1 = "Rejected but error message missing";
						}
						errorMessage_tGoogleDriveList_1 = "Row " + nb_line_tGoogleDriveList_1 + ": "
								+ errorMessage_tGoogleDriveList_1;
						System.err.println(errorMessage_tGoogleDriveList_1);
						// If the record is reject, the main line record should put NULL
						row5 = null;
					}
					java.lang.Iterable<?> outgoingMainRecordsList_tGoogleDriveList_1 = new java.util.ArrayList<Object>();
					java.util.Iterator outgoingMainRecordsIt_tGoogleDriveList_1 = null;

					/**
					 * [tGoogleDriveList_1 begin ] stop
					 */

					/**
					 * [tGoogleDriveList_1 main ] start
					 */

					currentComponent = "tGoogleDriveList_1";

					tos_count_tGoogleDriveList_1++;

					/**
					 * [tGoogleDriveList_1 main ] stop
					 */

					/**
					 * [tGoogleDriveList_1 process_data_begin ] start
					 */

					currentComponent = "tGoogleDriveList_1";

					/**
					 * [tGoogleDriveList_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_2 main ] start
					 */

					currentComponent = "tLogRow_2";

					// row5
					// row5

					if (execStat) {
						runStat.updateStatOnConnection("row5" + iterateId, 1, 1);
					}

///////////////////////		

					strBuffer_tLogRow_2 = new StringBuilder();

					if (row5.id != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row5.id));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row5.name != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row5.name));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row5.mimeType != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row5.mimeType));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row5.modifiedTime != null) { //

						strBuffer_tLogRow_2.append(
								FormatterUtils.format_Date(row5.modifiedTime, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'"));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row5.size != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row5.size));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row5.kind != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row5.kind));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row5.trashed != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row5.trashed));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row5.parents != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row5.parents));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row5.webViewLink != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row5.webViewLink));

					} //

					String[] row_tLogRow_2 = new String[9];

					if (row5.id != null) { //
						row_tLogRow_2[0] = String.valueOf(row5.id);

					} //

					if (row5.name != null) { //
						row_tLogRow_2[1] = String.valueOf(row5.name);

					} //

					if (row5.mimeType != null) { //
						row_tLogRow_2[2] = String.valueOf(row5.mimeType);

					} //

					if (row5.modifiedTime != null) { //
						row_tLogRow_2[3] = FormatterUtils.format_Date(row5.modifiedTime,
								"yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'");

					} //

					if (row5.size != null) { //
						row_tLogRow_2[4] = String.valueOf(row5.size);

					} //

					if (row5.kind != null) { //
						row_tLogRow_2[5] = String.valueOf(row5.kind);

					} //

					if (row5.trashed != null) { //
						row_tLogRow_2[6] = String.valueOf(row5.trashed);

					} //

					if (row5.parents != null) { //
						row_tLogRow_2[7] = String.valueOf(row5.parents);

					} //

					if (row5.webViewLink != null) { //
						row_tLogRow_2[8] = String.valueOf(row5.webViewLink);

					} //

					nb_line_tLogRow_2++;
					consoleOut_tLogRow_2.println(util_tLogRow_2.print(row_tLogRow_2, nb_line_tLogRow_2));
					consoleOut_tLogRow_2.flush();
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_2++;

					/**
					 * [tLogRow_2 main ] stop
					 */

					/**
					 * [tLogRow_2 process_data_begin ] start
					 */

					currentComponent = "tLogRow_2";

					/**
					 * [tLogRow_2 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_2 process_data_end ] start
					 */

					currentComponent = "tLogRow_2";

					/**
					 * [tLogRow_2 process_data_end ] stop
					 */

					/**
					 * [tGoogleDriveList_1 process_data_end ] start
					 */

					currentComponent = "tGoogleDriveList_1";

					/**
					 * [tGoogleDriveList_1 process_data_end ] stop
					 */

					/**
					 * [tGoogleDriveList_1 end ] start
					 */

					currentComponent = "tGoogleDriveList_1";

// end of generic

					resourceMap.put("finish_tGoogleDriveList_1", Boolean.TRUE);

				} // while
				reader_tGoogleDriveList_1.close();
				final java.util.Map<String, Object> resultMap_tGoogleDriveList_1 = reader_tGoogleDriveList_1
						.getReturnValues();
				if (resultMap_tGoogleDriveList_1 != null) {
					for (java.util.Map.Entry<String, Object> entry_tGoogleDriveList_1 : resultMap_tGoogleDriveList_1
							.entrySet()) {
						switch (entry_tGoogleDriveList_1.getKey()) {
						case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE:
							container_tGoogleDriveList_1.setComponentData("tGoogleDriveList_1", "ERROR_MESSAGE",
									entry_tGoogleDriveList_1.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT:
							container_tGoogleDriveList_1.setComponentData("tGoogleDriveList_1", "NB_LINE",
									entry_tGoogleDriveList_1.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT:
							container_tGoogleDriveList_1.setComponentData("tGoogleDriveList_1", "NB_SUCCESS",
									entry_tGoogleDriveList_1.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT:
							container_tGoogleDriveList_1.setComponentData("tGoogleDriveList_1", "NB_REJECT",
									entry_tGoogleDriveList_1.getValue());
							break;
						default:
							StringBuilder studio_key_tGoogleDriveList_1 = new StringBuilder();
							for (int i_tGoogleDriveList_1 = 0; i_tGoogleDriveList_1 < entry_tGoogleDriveList_1.getKey()
									.length(); i_tGoogleDriveList_1++) {
								char ch_tGoogleDriveList_1 = entry_tGoogleDriveList_1.getKey()
										.charAt(i_tGoogleDriveList_1);
								if (Character.isUpperCase(ch_tGoogleDriveList_1) && i_tGoogleDriveList_1 > 0) {
									studio_key_tGoogleDriveList_1.append('_');
								}
								studio_key_tGoogleDriveList_1.append(ch_tGoogleDriveList_1);
							}
							container_tGoogleDriveList_1.setComponentData("tGoogleDriveList_1",
									studio_key_tGoogleDriveList_1.toString().toUpperCase(java.util.Locale.ENGLISH),
									entry_tGoogleDriveList_1.getValue());
							break;
						}
					}
				}

				ok_Hash.put("tGoogleDriveList_1", true);
				end_Hash.put("tGoogleDriveList_1", System.currentTimeMillis());

				/**
				 * [tGoogleDriveList_1 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

//////
//////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

///////////////////////    			

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tGoogleDriveList_1 finally ] start
				 */

				currentComponent = "tGoogleDriveList_1";

// finally of generic

				if (resourceMap.get("finish_tGoogleDriveList_1") == null) {
					if (resourceMap.get("reader_tGoogleDriveList_1") != null) {
						try {
							((org.talend.components.api.component.runtime.Reader) resourceMap
									.get("reader_tGoogleDriveList_1")).close();
						} catch (java.io.IOException e_tGoogleDriveList_1) {
							String errorMessage_tGoogleDriveList_1 = "failed to release the resource in tGoogleDriveList_1 :"
									+ e_tGoogleDriveList_1.getMessage();
							System.err.println(errorMessage_tGoogleDriveList_1);
						}
					}
				}

				/**
				 * [tGoogleDriveList_1 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tGoogleDriveList_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	private final org.talend.components.common.runtime.SharedConnectionsPool connectionPool = new org.talend.components.common.runtime.SharedConnectionsPool() {
		public java.sql.Connection getDBConnection(String dbDriver, String url, String userName, String password,
				String dbConnectionName) throws ClassNotFoundException, java.sql.SQLException {
			return SharedDBConnection.getDBConnection(dbDriver, url, userName, password, dbConnectionName);
		}

		public java.sql.Connection getDBConnection(String dbDriver, String url, String dbConnectionName)
				throws ClassNotFoundException, java.sql.SQLException {
			return SharedDBConnection.getDBConnection(dbDriver, url, dbConnectionName);
		}
	};

	private static final String GLOBAL_CONNECTION_POOL_KEY = "GLOBAL_CONNECTION_POOL";

	{
		globalMap.put(GLOBAL_CONNECTION_POOL_KEY, connectionPool);
	}

	public static void main(String[] args) {
		final dropbox_slack dropbox_slackClass = new dropbox_slack();

		int exitCode = dropbox_slackClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = dropbox_slack.class.getClassLoader()
					.getResourceAsStream("demo/dropbox_slack_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = dropbox_slack.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : dropbox_slack");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {// for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}

		if (!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 117168 characters generated by Talend Open Studio for ESB on the December 28,
 * 2019 7:58:21 PM ICT
 ************************************************************************************************/