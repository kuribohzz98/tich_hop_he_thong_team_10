// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package demo.drive_slack_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_5
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJavaRow_6
//import java.util.List;

//the import part of tJavaRow_7
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: drive_slack Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.2.1.20190620_1446
 * @status
 */
public class drive_slack implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "drive_slack";
	private final String projectName = "DEMO";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					drive_slack.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(drive_slack.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTClient_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTClient_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTClient_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputJSON_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTClient_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputJSON_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTClient_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTClient_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTClient_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTClient_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTClient_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTClient_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTClient_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTClient_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_trash_file_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_view_untrash_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTRequest_1_Loop_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tRESTRequest_1_In_error(exception, errorComponent, globalMap);

	}

	public void tRESTRequest_1_In_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputJSON_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputJSON_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRESTRequest_1_Loop_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	private boolean runInTalendEsbRuntimeContainer = false;

	public void setRunInTalendEsbRuntimeContainer(boolean flag) {
		runInTalendEsbRuntimeContainer = flag;
	}

	protected String restEndpoint;

	public void setRestEndpoint(String restEndpoint) {
		this.restEndpoint = restEndpoint;
	}

	public String getRestEndpoint() {
		return "http://localhost:8080/";
	}

	private boolean runInDaemonMode = true;

	public void setRunInDaemonMode(boolean flag) {
		runInDaemonMode = flag;
	}

	private boolean restTalendJobAlreadyStarted = false;

	/**
	 * REST provider implementation
	 */
	@javax.ws.rs.Path("/")
	public static class RestServiceProviderImpl4TalendJob {

		@javax.ws.rs.core.Context
		private org.apache.cxf.jaxrs.ext.MessageContext messageContext;

		private final drive_slack job;

		public RestServiceProviderImpl4TalendJob(drive_slack job) {
			this.job = job;
		}

		private void populateRequestWithJobContext(java.util.Map<String, Object> requestGlobalMap, drive_slack job) {
			// pass job DataSources
			java.util.Map<String, routines.system.TalendDataSource> talendDataSources = (java.util.Map<String, routines.system.TalendDataSource>) job.globalMap
					.get(KEY_DB_DATASOURCES);
			if (null != talendDataSources) {
				java.util.Map<String, routines.system.TalendDataSource> restDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
				for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry : talendDataSources
						.entrySet()) {
					restDataSources.put(talendDataSourceEntry.getKey(),
							new routines.system.TalendDataSource(talendDataSourceEntry.getValue().getRawDataSource()));
				}
				requestGlobalMap.put(KEY_DB_DATASOURCES, restDataSources);
			}

			// pass job shared connections
			requestGlobalMap.putAll(job.getSharedConnections4REST());

			// pass job concurrent map
			requestGlobalMap.put("concurrentHashMap", job.globalMap.get("concurrentHashMap"));
		}

		private void closePassedDataSourceConnections(java.util.Map<String, Object> requestGlobalMap) {
			// close connections in passed job DataSources
			try {
				java.util.Map<String, routines.system.TalendDataSource> restDataSources = (java.util.Map<String, routines.system.TalendDataSource>) requestGlobalMap
						.get(KEY_DB_DATASOURCES);
				if (null != restDataSources) {
					for (routines.system.TalendDataSource restDataSource : restDataSources.values()) {
						restDataSource.close();
					}
				}
			} catch (Throwable e) {
				e.printStackTrace(System.err);
			}
		}

		private javax.ws.rs.core.Response processRequest(java.util.Map<String, Object> request) {

			final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

			try {
				globalMap.put("restRequest", request);

				populateRequestWithJobContext(globalMap, job);

				job.tRESTRequest_1_LoopProcess(globalMap);

				java.util.Map<String, Object> response = (java.util.Map<String, Object>) globalMap.get("restResponse");

				Object responseBody = null;
				Integer status = null;
				java.util.Map<String, String> headers = null;
				if (null != response) {
					Object dropJsonRootProp = response.get("drop.json.root.element");
					Boolean dropJsonRoot = (null == dropJsonRootProp) ? false : (Boolean) dropJsonRootProp;
					messageContext.put("drop.json.root.element", dropJsonRoot.toString());

					responseBody = response.get("BODY");
					status = (Integer) response.get("STATUS");
					headers = (java.util.Map<String, String>) response.get("HEADERS");
				}
				if (null == status) {
					status = (request.containsKey("STATUS")) ? (Integer) request.get("STATUS") : 404;
				}

				javax.ws.rs.core.Response.ResponseBuilder responseBuilder = javax.ws.rs.core.Response.status(status)
						.entity(responseBody);
				if (headers != null) {
					for (java.util.Map.Entry<String, String> header : headers.entrySet()) {
						responseBuilder.header(header.getKey(), header.getValue());
					}
				}

				return responseBuilder.build();

			} catch (Throwable ex) {
				ex.printStackTrace();
				throw new javax.ws.rs.WebApplicationException(ex, 500);
			} finally {
				// close DB connections
				closePassedDataSourceConnections(globalMap);
			}
		}

		private javax.ws.rs.core.Response processStreamingResponseRequest(final java.util.Map<String, Object> request) {

			javax.ws.rs.core.StreamingOutput streamingOutput = new javax.ws.rs.core.StreamingOutput() {
				public void write(java.io.OutputStream output) {

					final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

					try {
						globalMap.put("restResponseStream", output);

						globalMap.put("restRequest", request);

						populateRequestWithJobContext(globalMap, job);

						job.tRESTRequest_1_LoopProcess(globalMap);

						if (globalMap.containsKey("restResponseWrappingClosure")) {
							output.write(((String) globalMap.get("restResponseWrappingClosure")).getBytes());
						}
					} catch (Throwable ex) {
						ex.printStackTrace();
						throw new javax.ws.rs.WebApplicationException(ex, 500);
					} finally {
						// close DB connections
						closePassedDataSourceConnections(globalMap);
					}
				}
			};

			return javax.ws.rs.core.Response.ok().entity(streamingOutput).build();
		}

		@javax.ws.rs.POST()

		@javax.ws.rs.Path("/api/interactivity_component")
		@javax.ws.rs.Consumes({ "*/*" })
		@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
		public javax.ws.rs.core.Response interactivity_component(

				String body

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "POST");
			request_tRESTRequest_1.put("OPERATION", "interactivity_component");
			request_tRESTRequest_1.put("PATTERN", "/api/interactivity_component");

			request_tRESTRequest_1.put("BODY", body);

			populateRequestInfo(request_tRESTRequest_1, messageContext);

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			return processRequest(request_tRESTRequest_1);
		}

		@javax.ws.rs.POST()

		@javax.ws.rs.Path("/api/select_menu")
		@javax.ws.rs.Consumes({ "*/*" })
		@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
		public javax.ws.rs.core.Response load_select_option(

				String body

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "POST");
			request_tRESTRequest_1.put("OPERATION", "load_select_option");
			request_tRESTRequest_1.put("PATTERN", "/api/select_menu");

			request_tRESTRequest_1.put("BODY", body);

			populateRequestInfo(request_tRESTRequest_1, messageContext);

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			return processRequest(request_tRESTRequest_1);
		}

		@javax.ws.rs.POST()

		@javax.ws.rs.Path("/api/drive_subcribe")
		@javax.ws.rs.Consumes({ "*/*" })
		@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
		public javax.ws.rs.core.Response drive_webhook_subcribe(

				String body

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "POST");
			request_tRESTRequest_1.put("OPERATION", "drive_webhook_subcribe");
			request_tRESTRequest_1.put("PATTERN", "/api/drive_subcribe");

			request_tRESTRequest_1.put("BODY", body);

			populateRequestInfo(request_tRESTRequest_1, messageContext);

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			return processRequest(request_tRESTRequest_1);
		}

		@javax.ws.rs.POST()

		@javax.ws.rs.Path("/api/slack_command_drive")
		@javax.ws.rs.Consumes({ "*/*" })
		@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
		public javax.ws.rs.core.Response slack_comment_drive(

				String body

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "POST");
			request_tRESTRequest_1.put("OPERATION", "slack_comment_drive");
			request_tRESTRequest_1.put("PATTERN", "/api/slack_command_drive");

			request_tRESTRequest_1.put("BODY", body);

			populateRequestInfo(request_tRESTRequest_1, messageContext);

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			return processRequest(request_tRESTRequest_1);
		}

		public javax.ws.rs.core.Response handleWrongRequest(org.apache.cxf.jaxrs.ext.MessageContext context, int status,
				String error) {

			// System.out.println("wrong call [uri: " + context.getUriInfo().getPath() + " ;
			// method: " + context.getRequest().getMethod() + " ; status: " + status + " ;
			// error: " + error + "]");

			java.util.Map<String, Object> wrongRequest = new java.util.HashMap<String, Object>();

			wrongRequest.put("ERROR", error);
			wrongRequest.put("STATUS", status);
			wrongRequest.put("VERB", context.getRequest().getMethod());
			wrongRequest.put("URI", context.getUriInfo().getPath());
			wrongRequest.put("URI_BASE", context.getUriInfo().getBaseUri().toString());
			wrongRequest.put("URI_ABSOLUTE", context.getUriInfo().getAbsolutePath().toString());
			wrongRequest.put("URI_REQUEST", context.getUriInfo().getRequestUri().toString());

			return processRequest(wrongRequest);
		}

		private void populateRequestInfo(java.util.Map<String, Object> request,
				org.apache.cxf.jaxrs.ext.MessageContext context) {
			final javax.ws.rs.core.UriInfo ui = context.getUriInfo();

			request.put("URI", ui.getPath());
			request.put("URI_BASE", ui.getBaseUri().toString());
			request.put("URI_ABSOLUTE", ui.getAbsolutePath().toString());
			request.put("URI_REQUEST", ui.getRequestUri().toString());

			request.put("ALL_HEADER_PARAMS", context.getHttpHeaders().getRequestHeaders());
			request.put("ALL_QUERY_PARAMS", ui.getQueryParameters());

			javax.ws.rs.core.SecurityContext securityContext = context.getSecurityContext();
			if (null != securityContext && null != securityContext.getUserPrincipal()) {
				request.put("PRINCIPAL_NAME", securityContext.getUserPrincipal().getName());
			}

			request.put("CorrelationID", context.get("CorrelationID"));

			request.put("MESSAGE_CONTEXT", context);
		}

		private void populateMultipartRequestInfo(java.util.Map<String, Object> request,
				org.apache.cxf.jaxrs.ext.MessageContext context, java.util.List<String> partNames) {
			java.util.Map<String, String> attachmentFilenames = new java.util.HashMap<String, String>();

			java.util.Map<String, java.util.Map<String, java.util.List<String>>> attachmentHeaders = new java.util.HashMap<String, java.util.Map<String, java.util.List<String>>>();

			for (String partName : partNames) {
				org.apache.cxf.jaxrs.ext.multipart.Attachment attachment = getFirstMatchingPart(context, partName);
				if (null != attachment) {
					attachmentHeaders.put(partName, attachment.getHeaders());
					if (null != attachment.getContentDisposition()) {
						String filename = attachment.getContentDisposition().getParameter("filename");
						if (null != filename) {
							attachmentFilenames.put(partName, filename);
						}
					}
				}
			}

			request.put("ATTACHMENT_HEADERS", attachmentHeaders);
			request.put("ATTACHMENT_FILENAMES", attachmentFilenames);
		}

		private static org.apache.cxf.jaxrs.ext.multipart.Attachment getFirstMatchingPart(
				org.apache.cxf.jaxrs.ext.MessageContext context, String partName) {
			List<org.apache.cxf.jaxrs.ext.multipart.Attachment> attachments = org.apache.cxf.jaxrs.utils.multipart.AttachmentUtils
					.getAttachments(context);
			for (org.apache.cxf.jaxrs.ext.multipart.Attachment attachment : attachments) {
				if (partName.equals(attachment.getContentId())) {
					return attachment;
				}
				org.apache.cxf.jaxrs.ext.multipart.ContentDisposition cd = attachment.getContentDisposition();
				if (null != cd && partName.equals(cd.getParameter("name"))) {
					return attachment;
				}
			}
			// unexpected
			throw new javax.ws.rs.InternalServerErrorException();
		}
	}

	public static class ExceptionMapper4TalendJobRestService
			extends org.apache.cxf.jaxrs.impl.WebApplicationExceptionMapper {

		@javax.ws.rs.core.Context
		private org.apache.cxf.jaxrs.ext.MessageContext messageContext;

		private RestServiceProviderImpl4TalendJob provider;

		public ExceptionMapper4TalendJobRestService(RestServiceProviderImpl4TalendJob provider) {
			this.provider = provider;
		}

		public javax.ws.rs.core.Response toResponse(javax.ws.rs.WebApplicationException ex) {
			String error = null;
			javax.ws.rs.core.Response response = ex.getResponse();
			if (null != response && null != response.getEntity()) {
				error = response.getEntity().toString();
			}
			response = super.toResponse(ex);
			if (null == error) {
				if (null != response && null != response.getEntity()) {
					error = response.getEntity().toString();
				} else {
					error = null == ex.getCause() ? ex.getMessage() : ex.getCause().getMessage();
				}
			}
			response = provider.handleWrongRequest(messageContext, response.getStatus(), error);

			java.util.List<javax.ws.rs.core.MediaType> accepts = messageContext.getHttpHeaders()
					.getAcceptableMediaTypes();
			javax.ws.rs.core.MediaType responseType = accepts.isEmpty() ? null : accepts.get(0);

			if (responseType == null
					|| !responseType.getSubtype().equals("xml") && !responseType.getSubtype().equals("json")) {
				responseType = javax.ws.rs.core.MediaType.APPLICATION_XML_TYPE;
			}

			javax.ws.rs.core.Response r = javax.ws.rs.core.Response.status(response.getStatus())
					.entity(response.getEntity()).type(responseType).build();

			if (response.getHeaders() != null) {
				r.getHeaders().putAll(response.getHeaders());
			}

			return r;
		}
	}

	protected String checkEndpointUrl(String url) {
		final String defaultEndpointUrl = "http://127.0.0.1:8090/";

		String endpointUrl = url;
		if (null == endpointUrl || endpointUrl.trim().isEmpty()) {
			endpointUrl = defaultEndpointUrl;
		} else if (!endpointUrl.contains("://")) { // relative
			if (endpointUrl.startsWith("/")) {
				endpointUrl = endpointUrl.substring(1);
			}
			endpointUrl = defaultEndpointUrl + endpointUrl;
		}

		// test for busy
		java.net.URI endpointURI = java.net.URI.create(endpointUrl);
		String host = endpointURI.getHost();
		try {
			if (java.net.InetAddress.getByName(host).isLoopbackAddress()) {
				int port = endpointURI.getPort();
				java.net.ServerSocket ss = null;
				try {
					ss = new java.net.ServerSocket(port);
				} catch (IOException e) {
					// rethrow exception
					throw new IllegalArgumentException(
							"Cannot start provider with uri: " + endpointUrl + ". Port " + port + " already in use.");
				} finally {
					if (ss != null) {
						try {
							ss.close();
						} catch (IOException e) {
							// ignore
						}
					}
				}
				try {
					// ok, let's doublecheck for silent listeners
					java.net.Socket cs = new java.net.Socket(host, port);
					// if succeed - somebody silently listening, fail!
					cs.close();
					// rethrow exception
					throw new IllegalArgumentException(
							"Cannot start provider with uri: " + endpointUrl + ". Port " + port + " already in use.");
				} catch (IOException e) {
					// ok, nobody listens, proceed
				}
			}
		} catch (java.net.UnknownHostException e) {
			// ignore
		}

		return endpointUrl;
	}

	public static class StreamingDOM4JProvider extends org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider {

		public static final String SUPRESS_XML_DECLARATION = "supress.xml.declaration";

		private java.util.Map<String, Object> globalMap = null;

		public void setGlobalMap(java.util.Map<String, Object> globalMap) {
			this.globalMap = globalMap;
		}

		public void writeTo(org.dom4j.Document doc, Class<?> cls, java.lang.reflect.Type type,
				java.lang.annotation.Annotation[] anns, javax.ws.rs.core.MediaType mt,
				javax.ws.rs.core.MultivaluedMap<String, Object> headers, java.io.OutputStream os)
				throws java.io.IOException, javax.ws.rs.WebApplicationException {
			if (mt.getSubtype().contains("xml")) {
				org.dom4j.io.XMLWriter writer;
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = (org.apache.cxf.message.Message) ((java.util.Map<String, Object>) globalMap
							.get("restRequest")).get("CURRENT_MESSAGE");
				}

				if (currentMessage != null && currentMessage.getExchange() != null
						&& currentMessage.getExchange().containsKey(SUPRESS_XML_DECLARATION)) {
					org.dom4j.io.OutputFormat format = new org.dom4j.io.OutputFormat();
					format.setSuppressDeclaration(true);
					writer = new org.dom4j.io.XMLWriter(os, format);
				} else {
					writer = new org.dom4j.io.XMLWriter(os);
				}
				writer.write(doc);
				writer.flush();
			} else {
				super.writeTo(doc, cls, type, anns, mt, headers, os);
			}
		}
	}

	Thread4RestServiceProviderEndpoint thread4RestServiceProviderEndpoint = null;

	class Thread4RestServiceProviderEndpoint extends Thread {

		private final String endpointUrl;

		private final drive_slack job;

		private org.apache.cxf.endpoint.Server server;

		private org.apache.cxf.jaxrs.JAXRSServerFactoryBean sf;

		public Thread4RestServiceProviderEndpoint(drive_slack job, String endpointUrl) {
			this.job = job;
			this.endpointUrl = endpointUrl;
			this.sf = new org.apache.cxf.jaxrs.JAXRSServerFactoryBean();
		}

		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		public org.apache.cxf.endpoint.Server getServer() {
			return server;
		}

		public org.apache.cxf.jaxrs.JAXRSServerFactoryBean getJAXRSServerFactoryBean() {
			return sf;
		}

		public void run() {

			try {
				RestServiceProviderImpl4TalendJob provider = new RestServiceProviderImpl4TalendJob(job);

				if (sf.getProperties() == null) {
					sf.setProperties(new java.util.HashMap<String, Object>());
				}

				java.util.List<Object> providers = (java.util.List<Object>) sf.getProviders();
				providers.add(new ExceptionMapper4TalendJobRestService(provider));
				providers.add(new StreamingDOM4JProvider());

				org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
				jsonProvider.setIgnoreNamespaces(true);
				jsonProvider.setAttributesToElements(true);

				jsonProvider.setConvertTypesToStrings(false);

				providers.add(jsonProvider);
				sf.setProviders(providers);
				sf.setTransportId("http://cxf.apache.org/transports/http");
				sf.setResourceClasses(RestServiceProviderImpl4TalendJob.class);
				sf.setResourceProvider(RestServiceProviderImpl4TalendJob.class,
						new org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider(provider));
				sf.setAddress(endpointUrl);

				final java.util.List<org.apache.cxf.feature.Feature> features = sf.getFeatures() == null
						? new java.util.ArrayList<org.apache.cxf.feature.Feature>()
						: sf.getFeatures();

				sf.setFeatures(features);

				server = sf.create();

				// System.out.println("REST service [endpoint: " + endpointUrl + "] published");
			} catch (Throwable e) {
				e.printStackTrace();
			}
		}

		public void stopEndpoint() {
			if (null != server) {
				server.stop();
				server.destroy();
				// System.out.println("REST service [endpoint: " + endpointUrl + "]
				// unpublished");
			}
		}
	}

	public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String expiration;

		public String getExpiration() {
			return this.expiration;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.expiration = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.expiration, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("expiration=" + expiration);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public Integer statusCode;

		public Integer getStatusCode() {
			return this.statusCode;
		}

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.statusCode = readInteger(dis);

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.statusCode, dos);

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("statusCode=" + String.valueOf(statusCode));
			sb.append(",body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public Integer statusCode;

		public Integer getStatusCode() {
			return this.statusCode;
		}

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.statusCode = readInteger(dis);

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.statusCode, dos);

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("statusCode=" + String.valueOf(statusCode));
			sb.append(",body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public Integer errorCode;

		public Integer getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.errorCode = readInteger(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + String.valueOf(errorCode));
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class process_mainStruct implements routines.system.IPersistableRow<process_mainStruct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String drive_time_out_token;

		public String getDrive_time_out_token() {
			return this.drive_time_out_token;
		}

		public String expiration;

		public String getExpiration() {
			return this.expiration;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		public String access_token;

		public String getAccess_token() {
			return this.access_token;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.drive_time_out_token = readString(dis);

					this.expiration = readString(dis);

					this.string = readString(dis);

					this.access_token = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.drive_time_out_token, dos);

				// String

				writeString(this.expiration, dos);

				// String

				writeString(this.string, dos);

				// String

				writeString(this.access_token, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("drive_time_out_token=" + drive_time_out_token);
			sb.append(",expiration=" + expiration);
			sb.append(",string=" + string);
			sb.append(",access_token=" + access_token);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(process_mainStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class process_set_tokenStruct implements routines.system.IPersistableRow<process_set_tokenStruct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String access_token;

		public String getAccess_token() {
			return this.access_token;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.access_token = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.access_token, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("access_token=" + access_token);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(process_set_tokenStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String drive_time_out_token;

		public String getDrive_time_out_token() {
			return this.drive_time_out_token;
		}

		public String expiration;

		public String getExpiration() {
			return this.expiration;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		public String access_token;

		public String getAccess_token() {
			return this.access_token;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.drive_time_out_token = readString(dis);

					this.expiration = readString(dis);

					this.string = readString(dis);

					this.access_token = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.drive_time_out_token, dos);

				// String

				writeString(this.expiration, dos);

				// String

				writeString(this.string, dos);

				// String

				writeString(this.access_token, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("drive_time_out_token=" + drive_time_out_token);
			sb.append(",expiration=" + expiration);
			sb.append(",string=" + string);
			sb.append(",access_token=" + access_token);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String drive_time_out_token;

		public String getDrive_time_out_token() {
			return this.drive_time_out_token;
		}

		public String expiration;

		public String getExpiration() {
			return this.expiration;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		public String access_token;

		public String getAccess_token() {
			return this.access_token;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.drive_time_out_token = readString(dis);

					this.expiration = readString(dis);

					this.string = readString(dis);

					this.access_token = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.drive_time_out_token, dos);

				// String

				writeString(this.expiration, dos);

				// String

				writeString(this.string, dos);

				// String

				writeString(this.access_token, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("drive_time_out_token=" + drive_time_out_token);
			sb.append(",expiration=" + expiration);
			sb.append(",string=" + string);
			sb.append(",access_token=" + access_token);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String access_token;

		public String getAccess_token() {
			return this.access_token;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.access_token = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.access_token, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("access_token=" + access_token);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public Integer statusCode;

		public Integer getStatusCode() {
			return this.statusCode;
		}

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.statusCode = readInteger(dis);

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.statusCode, dos);

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("statusCode=" + String.valueOf(statusCode));
			sb.append(",body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String drive_webhook_id;

		public String getDrive_webhook_id() {
			return this.drive_webhook_id;
		}

		public String drive_callbackUrl;

		public String getDrive_callbackUrl() {
			return this.drive_callbackUrl;
		}

		public String drive_webhook_token;

		public String getDrive_webhook_token() {
			return this.drive_webhook_token;
		}

		public String drive_client_id;

		public String getDrive_client_id() {
			return this.drive_client_id;
		}

		public String drive_client_secret;

		public String getDrive_client_secret() {
			return this.drive_client_secret;
		}

		public String drive_refresh_token;

		public String getDrive_refresh_token() {
			return this.drive_refresh_token;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.drive_webhook_id = readString(dis);

					this.drive_callbackUrl = readString(dis);

					this.drive_webhook_token = readString(dis);

					this.drive_client_id = readString(dis);

					this.drive_client_secret = readString(dis);

					this.drive_refresh_token = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.drive_webhook_id, dos);

				// String

				writeString(this.drive_callbackUrl, dos);

				// String

				writeString(this.drive_webhook_token, dos);

				// String

				writeString(this.drive_client_id, dos);

				// String

				writeString(this.drive_client_secret, dos);

				// String

				writeString(this.drive_refresh_token, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("drive_webhook_id=" + drive_webhook_id);
			sb.append(",drive_callbackUrl=" + drive_callbackUrl);
			sb.append(",drive_webhook_token=" + drive_webhook_token);
			sb.append(",drive_client_id=" + drive_client_id);
			sb.append(",drive_client_secret=" + drive_client_secret);
			sb.append(",drive_refresh_token=" + drive_refresh_token);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String drive_client_id;

		public String getDrive_client_id() {
			return this.drive_client_id;
		}

		public String drive_client_secret;

		public String getDrive_client_secret() {
			return this.drive_client_secret;
		}

		public String drive_refresh_token;

		public String getDrive_refresh_token() {
			return this.drive_refresh_token;
		}

		public String slack_token;

		public String getSlack_token() {
			return this.slack_token;
		}

		public String slack_user_token;

		public String getSlack_user_token() {
			return this.slack_user_token;
		}

		public String drive_webhook_id;

		public String getDrive_webhook_id() {
			return this.drive_webhook_id;
		}

		public String drive_callbackUrl;

		public String getDrive_callbackUrl() {
			return this.drive_callbackUrl;
		}

		public String drive_webhook_token;

		public String getDrive_webhook_token() {
			return this.drive_webhook_token;
		}

		public String drive_page_token;

		public String getDrive_page_token() {
			return this.drive_page_token;
		}

		public String drive_time_out_token;

		public String getDrive_time_out_token() {
			return this.drive_time_out_token;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.id = this.id;
			other.drive_client_id = this.drive_client_id;
			other.drive_client_secret = this.drive_client_secret;
			other.drive_refresh_token = this.drive_refresh_token;
			other.slack_token = this.slack_token;
			other.slack_user_token = this.slack_user_token;
			other.drive_webhook_id = this.drive_webhook_id;
			other.drive_callbackUrl = this.drive_callbackUrl;
			other.drive_webhook_token = this.drive_webhook_token;
			other.drive_page_token = this.drive_page_token;
			other.drive_time_out_token = this.drive_time_out_token;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.drive_client_id = readString(dis);

					this.drive_client_secret = readString(dis);

					this.drive_refresh_token = readString(dis);

					this.slack_token = readString(dis);

					this.slack_user_token = readString(dis);

					this.drive_webhook_id = readString(dis);

					this.drive_callbackUrl = readString(dis);

					this.drive_webhook_token = readString(dis);

					this.drive_page_token = readString(dis);

					this.drive_time_out_token = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.drive_client_id, dos);

				// String

				writeString(this.drive_client_secret, dos);

				// String

				writeString(this.drive_refresh_token, dos);

				// String

				writeString(this.slack_token, dos);

				// String

				writeString(this.slack_user_token, dos);

				// String

				writeString(this.drive_webhook_id, dos);

				// String

				writeString(this.drive_callbackUrl, dos);

				// String

				writeString(this.drive_webhook_token, dos);

				// String

				writeString(this.drive_page_token, dos);

				// String

				writeString(this.drive_time_out_token, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",drive_client_id=" + drive_client_id);
			sb.append(",drive_client_secret=" + drive_client_secret);
			sb.append(",drive_refresh_token=" + drive_refresh_token);
			sb.append(",slack_token=" + slack_token);
			sb.append(",slack_user_token=" + slack_user_token);
			sb.append(",drive_webhook_id=" + drive_webhook_id);
			sb.append(",drive_callbackUrl=" + drive_callbackUrl);
			sb.append(",drive_webhook_token=" + drive_webhook_token);
			sb.append(",drive_page_token=" + drive_page_token);
			sb.append(",drive_time_out_token=" + drive_time_out_token);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row9Struct row9 = new row9Struct();
				row2Struct row2 = new row2Struct();
				row3Struct row3 = new row3Struct();
				row6Struct row6 = new row6Struct();
				row6Struct row10 = row6;
				process_mainStruct process_main = new process_mainStruct();
				row7Struct row7 = new row7Struct();
				row7Struct row12 = row7;
				row13Struct row13 = new row13Struct();
				row14Struct row14 = new row14Struct();
				process_set_tokenStruct process_set_token = new process_set_tokenStruct();

				/**
				 * [tDBRow_1 begin ] start
				 */

				ok_Hash.put("tDBRow_1", false);
				start_Hash.put("tDBRow_1", System.currentTimeMillis());

				currentComponent = "tDBRow_1";

				int tos_count_tDBRow_1 = 0;

				java.sql.Connection conn_tDBRow_1 = null;
				String query_tDBRow_1 = "";
				boolean whetherReject_tDBRow_1 = false;
				String driverClass_tDBRow_1 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBRow_1 = java.lang.Class.forName(driverClass_tDBRow_1);

				String url_tDBRow_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "talend" + "?"
						+ "noDatetimeStringSync=true&useSSL=false";
				String dbUser_tDBRow_1 = "root";

				final String decryptedPassword_tDBRow_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[J8YPu2j6Wxzw8oyGBc1O6w==]");

				String dbPwd_tDBRow_1 = decryptedPassword_tDBRow_1;

				conn_tDBRow_1 = java.sql.DriverManager.getConnection(url_tDBRow_1, dbUser_tDBRow_1, dbPwd_tDBRow_1);

				resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
				if (conn_tDBRow_1.getAutoCommit()) {

					conn_tDBRow_1.setAutoCommit(false);

				}
				int commitEvery_tDBRow_1 = 10000;
				int commitCounter_tDBRow_1 = 0;

				java.sql.PreparedStatement pstmt_tDBRow_1 = conn_tDBRow_1
						.prepareStatement("UPDATE slack_google_drive SET drive_time_out_token = ? ");
				resourceMap.put("pstmt_tDBRow_1", pstmt_tDBRow_1);

				/**
				 * [tDBRow_1 begin ] stop
				 */

				/**
				 * [tExtractJSONFields_5 begin ] start
				 */

				ok_Hash.put("tExtractJSONFields_5", false);
				start_Hash.put("tExtractJSONFields_5", System.currentTimeMillis());

				currentComponent = "tExtractJSONFields_5";

				int tos_count_tExtractJSONFields_5 = 0;

				int nb_line_tExtractJSONFields_5 = 0;
				String jsonStr_tExtractJSONFields_5 = "";

				class JsonPathCache_tExtractJSONFields_5 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				JsonPathCache_tExtractJSONFields_5 jsonPathCache_tExtractJSONFields_5 = new JsonPathCache_tExtractJSONFields_5();

				/**
				 * [tExtractJSONFields_5 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", "-" };

					String[] des_data = { "-", "+" };

					String[] des_frame = { "|" };

					public void printLine(StringBuilder sb, int titleWidth, int dataWidth) {

						sb.append("+");
						for (int i = 0; i < titleWidth + 2; i++)
							sb.append("-");
						sb.append("+");
						for (int i = 0; i < dataWidth + 2; i++)
							sb.append("-");
						sb.append("+" + "\n");
					}

					public String print(String[] row, int nbLine) {

						StringBuilder sb = new StringBuilder();

						String title = "#" + nbLine + ". " + "tLogRow_1";

						// step 1: get the max length of all the row[] member;
						int dataWidth = 5; // the length of the string "value"
						for (int i = 0; i < row.length; i++) {
							if (row[i] == null && 4 > dataWidth) {
								dataWidth = 4;
							} else if (row[i] != null && row[i].length() > dataWidth)
								dataWidth = row[i].length();
						}

						int titleWidth = 10;

						int totalWidth = dataWidth + titleWidth + 5;

						// step 2: print the header with line number
						sb.append(".");
						for (int i = 0; i < totalWidth; i++)
							sb.append("-");
						sb.append("." + "\n" + "|");

						int emptyCenterWidth = (totalWidth - title.length()) / 2;
						for (int i = 0; i < emptyCenterWidth; i++)
							sb.append(" ");
						sb.append(title);
						for (int i = 0; i < totalWidth - emptyCenterWidth - title.length(); i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// step 3: print "key" and "value"
						printLine(sb, titleWidth, dataWidth);

						sb.append("|" + " key");
						for (int i = 0; i < titleWidth - 2; i++)
							sb.append(" ");
						sb.append("|" + " value");
						for (int i = 0; i < dataWidth - 4; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						printLine(sb, titleWidth, dataWidth);

						// step 4: print dataset

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "statusCode");
						for (int i = 0; i < titleWidth - "statusCode".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[0]);
						for (int i = 0; row[0] == null && i < dataWidth - 3
								|| row[0] != null && i < dataWidth - row[0].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "body");
						for (int i = 0; i < titleWidth - "body".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[1]);
						for (int i = 0; row[1] == null && i < dataWidth - 3
								|| row[1] != null && i < dataWidth - row[1].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "string");
						for (int i = 0; i < titleWidth - "string".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[2]);
						for (int i = 0; row[2] == null && i < dataWidth - 3
								|| row[2] != null && i < dataWidth - row[2].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// step 5: print a line gap
						printLine(sb, titleWidth, dataWidth);
						return sb.toString();

					}

				}

				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());

				currentComponent = "tLogRow_3";

				int tos_count_tLogRow_3 = 0;

				///////////////////////

				class Util_tLogRow_3 {

					String[] des_top = { ".", "-" };

					String[] des_data = { "-", "+" };

					String[] des_frame = { "|" };

					public void printLine(StringBuilder sb, int titleWidth, int dataWidth) {

						sb.append("+");
						for (int i = 0; i < titleWidth + 2; i++)
							sb.append("-");
						sb.append("+");
						for (int i = 0; i < dataWidth + 2; i++)
							sb.append("-");
						sb.append("+" + "\n");
					}

					public String print(String[] row, int nbLine) {

						StringBuilder sb = new StringBuilder();

						String title = "#" + nbLine + ". " + "tLogRow_3";

						// step 1: get the max length of all the row[] member;
						int dataWidth = 5; // the length of the string "value"
						for (int i = 0; i < row.length; i++) {
							if (row[i] == null && 4 > dataWidth) {
								dataWidth = 4;
							} else if (row[i] != null && row[i].length() > dataWidth)
								dataWidth = row[i].length();
						}

						int titleWidth = 12;

						int totalWidth = dataWidth + titleWidth + 5;

						// step 2: print the header with line number
						sb.append(".");
						for (int i = 0; i < totalWidth; i++)
							sb.append("-");
						sb.append("." + "\n" + "|");

						int emptyCenterWidth = (totalWidth - title.length()) / 2;
						for (int i = 0; i < emptyCenterWidth; i++)
							sb.append(" ");
						sb.append(title);
						for (int i = 0; i < totalWidth - emptyCenterWidth - title.length(); i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// step 3: print "key" and "value"
						printLine(sb, titleWidth, dataWidth);

						sb.append("|" + " key");
						for (int i = 0; i < titleWidth - 2; i++)
							sb.append(" ");
						sb.append("|" + " value");
						for (int i = 0; i < dataWidth - 4; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						printLine(sb, titleWidth, dataWidth);

						// step 4: print dataset

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "errorCode");
						for (int i = 0; i < titleWidth - "errorCode".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[0]);
						for (int i = 0; row[0] == null && i < dataWidth - 3
								|| row[0] != null && i < dataWidth - row[0].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "errorMessage");
						for (int i = 0; i < titleWidth - "errorMessage".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[1]);
						for (int i = 0; row[1] == null && i < dataWidth - 3
								|| row[1] != null && i < dataWidth - row[1].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// step 5: print a line gap
						printLine(sb, titleWidth, dataWidth);
						return sb.toString();

					}

				}

				Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();

				java.io.PrintStream consoleOut_tLogRow_3 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_3);
				}

				StringBuilder strBuffer_tLogRow_3 = null;
				int nb_line_tLogRow_3 = 0;
///////////////////////    			

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tRESTClient_3 begin ] start
				 */

				ok_Hash.put("tRESTClient_3", false);
				start_Hash.put("tRESTClient_3", System.currentTimeMillis());

				currentComponent = "tRESTClient_3";

				int tos_count_tRESTClient_3 = 0;

				/**
				 * [tRESTClient_3 begin ] stop
				 */

				/**
				 * [tRESTClient_8 begin ] start
				 */

				ok_Hash.put("tRESTClient_8", false);
				start_Hash.put("tRESTClient_8", System.currentTimeMillis());

				currentComponent = "tRESTClient_8";

				int tos_count_tRESTClient_8 = 0;

				/**
				 * [tRESTClient_8 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				process_mainStruct process_main_tmp = new process_mainStruct();
				process_set_tokenStruct process_set_token_tmp = new process_set_tokenStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				int tos_count_tLogRow_2 = 0;

				///////////////////////

				class Util_tLogRow_2 {

					String[] des_top = { ".", "-" };

					String[] des_data = { "-", "+" };

					String[] des_frame = { "|" };

					public void printLine(StringBuilder sb, int titleWidth, int dataWidth) {

						sb.append("+");
						for (int i = 0; i < titleWidth + 2; i++)
							sb.append("-");
						sb.append("+");
						for (int i = 0; i < dataWidth + 2; i++)
							sb.append("-");
						sb.append("+" + "\n");
					}

					public String print(String[] row, int nbLine) {

						StringBuilder sb = new StringBuilder();

						String title = "#" + nbLine + ". " + "tLogRow_2";

						// step 1: get the max length of all the row[] member;
						int dataWidth = 5; // the length of the string "value"
						for (int i = 0; i < row.length; i++) {
							if (row[i] == null && 4 > dataWidth) {
								dataWidth = 4;
							} else if (row[i] != null && row[i].length() > dataWidth)
								dataWidth = row[i].length();
						}

						int titleWidth = 20;

						int totalWidth = dataWidth + titleWidth + 5;

						// step 2: print the header with line number
						sb.append(".");
						for (int i = 0; i < totalWidth; i++)
							sb.append("-");
						sb.append("." + "\n" + "|");

						int emptyCenterWidth = (totalWidth - title.length()) / 2;
						for (int i = 0; i < emptyCenterWidth; i++)
							sb.append(" ");
						sb.append(title);
						for (int i = 0; i < totalWidth - emptyCenterWidth - title.length(); i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// step 3: print "key" and "value"
						printLine(sb, titleWidth, dataWidth);

						sb.append("|" + " key");
						for (int i = 0; i < titleWidth - 2; i++)
							sb.append(" ");
						sb.append("|" + " value");
						for (int i = 0; i < dataWidth - 4; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						printLine(sb, titleWidth, dataWidth);

						// step 4: print dataset

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "drive_time_out_token");
						for (int i = 0; i < titleWidth - "drive_time_out_token".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[0]);
						for (int i = 0; row[0] == null && i < dataWidth - 3
								|| row[0] != null && i < dataWidth - row[0].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "expiration");
						for (int i = 0; i < titleWidth - "expiration".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[1]);
						for (int i = 0; row[1] == null && i < dataWidth - 3
								|| row[1] != null && i < dataWidth - row[1].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "string");
						for (int i = 0; i < titleWidth - "string".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[2]);
						for (int i = 0; row[2] == null && i < dataWidth - 3
								|| row[2] != null && i < dataWidth - row[2].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "access_token");
						for (int i = 0; i < titleWidth - "access_token".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[3]);
						for (int i = 0; row[3] == null && i < dataWidth - 3
								|| row[3] != null && i < dataWidth - row[3].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// step 5: print a line gap
						printLine(sb, titleWidth, dataWidth);
						return sb.toString();

					}

				}

				Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();

				java.io.PrintStream consoleOut_tLogRow_2 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
				}

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
///////////////////////    			

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tExtractJSONFields_1 begin ] start
				 */

				ok_Hash.put("tExtractJSONFields_1", false);
				start_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());

				currentComponent = "tExtractJSONFields_1";

				int tos_count_tExtractJSONFields_1 = 0;

				int nb_line_tExtractJSONFields_1 = 0;
				String jsonStr_tExtractJSONFields_1 = "";

				class JsonPathCache_tExtractJSONFields_1 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				JsonPathCache_tExtractJSONFields_1 jsonPathCache_tExtractJSONFields_1 = new JsonPathCache_tExtractJSONFields_1();

				/**
				 * [tExtractJSONFields_1 begin ] stop
				 */

				/**
				 * [tRESTClient_1 begin ] start
				 */

				ok_Hash.put("tRESTClient_1", false);
				start_Hash.put("tRESTClient_1", System.currentTimeMillis());

				currentComponent = "tRESTClient_1";

				int tos_count_tRESTClient_1 = 0;

				/**
				 * [tRESTClient_1 begin ] stop
				 */

				/**
				 * [tJavaRow_5 begin ] start
				 */

				ok_Hash.put("tJavaRow_5", false);
				start_Hash.put("tJavaRow_5", System.currentTimeMillis());

				currentComponent = "tJavaRow_5";

				int tos_count_tJavaRow_5 = 0;

				int nb_line_tJavaRow_5 = 0;

				/**
				 * [tJavaRow_5 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
				calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "root";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[J8YPu2j6Wxzw8oyGBc1O6w==]");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "talend" + "?"
						+ "noDatetimeStringSync=true&useSSL=false";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  `slack_google_drive`.`id`, \n  `slack_google_drive`.`drive_client_id`, \n  `slack_google_drive`.`drive_client_s"
						+ "ecret`, \n  `slack_google_drive`.`drive_refresh_token`, \n  `slack_google_drive`.`slack_token`, \n  `slack_google_drive`.`s"
						+ "lack_user_token`, \n  `slack_google_drive`.`drive_webhook_id`, \n  `slack_google_drive`.`drive_callbackUrl`, \n  `slack_goo"
						+ "gle_drive`.`drive_webhook_token`, \n  `slack_google_drive`.`drive_page_token`, \n  `slack_google_drive`.`drive_time_out_to"
						+ "ken`\nFROM `slack_google_drive`";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.id = 0;
						} else {

							row1.id = rs_tDBInput_1.getInt(1);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.drive_client_id = null;
						} else {

							row1.drive_client_id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.drive_client_secret = null;
						} else {

							row1.drive_client_secret = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.drive_refresh_token = null;
						} else {

							row1.drive_refresh_token = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.slack_token = null;
						} else {

							row1.slack_token = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.slack_user_token = null;
						} else {

							row1.slack_user_token = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.drive_webhook_id = null;
						} else {

							row1.drive_webhook_id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.drive_callbackUrl = null;
						} else {

							row1.drive_callbackUrl = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.drive_webhook_token = null;
						} else {

							row1.drive_webhook_token = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.drive_page_token = null;
						} else {

							row1.drive_page_token = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.drive_time_out_token = null;
						} else {

							row1.drive_time_out_token = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_5 main ] start
						 */

						currentComponent = "tJavaRow_5";

						// code sample:
//
// multiply by 2 the row identifier
// row9.id = row1.id * 2;
//
// lowercase the name
// row9.name = row1.name.toLowerCase();

						this.globalMap.put("slack_token", row1.slack_token);
						this.globalMap.put("slack_user_token", row1.slack_user_token);
						this.globalMap.put("drive_webhook_id", row1.drive_webhook_id);
						this.globalMap.put("drive_callbackUrl", row1.drive_callbackUrl);
						this.globalMap.put("drive_webhook_token", row1.drive_webhook_token);
						this.globalMap.put("drive_page_token", row1.drive_page_token);
						this.globalMap.put("drive_time_out_token", row1.drive_time_out_token);

						row9.drive_client_id = row1.drive_client_id;
						row9.drive_client_secret = row1.drive_client_secret;
						row9.drive_refresh_token = row1.drive_refresh_token;
						nb_line_tJavaRow_5++;

						tos_count_tJavaRow_5++;

						/**
						 * [tJavaRow_5 main ] stop
						 */

						/**
						 * [tJavaRow_5 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_5";

						/**
						 * [tJavaRow_5 process_data_begin ] stop
						 */

						/**
						 * [tRESTClient_1 main ] start
						 */

						currentComponent = "tRESTClient_1";

						row2 = null;

// expected response body
						javax.ws.rs.core.Response responseDoc_tRESTClient_1 = null;

						try {
							// request body
							org.dom4j.Document requestDoc_tRESTClient_1 = null;
							String requestString_tRESTClient_1 = null;

							Object requestBody_tRESTClient_1 = requestDoc_tRESTClient_1 != null
									? requestDoc_tRESTClient_1
									: requestString_tRESTClient_1;

							// resposne class name
							Class<?> responseClass_tRESTClient_1 = String.class;

							// create web client instance
							org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_1 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

							boolean inOSGi = routines.system.BundleUtils.inOSGi();

							final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_1 = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

							String url = "https://www.googleapis.com/oauth2/v4/token?client_secret="
									+ row9.drive_client_secret + "&grant_type=refresh_token&refresh_token="
									+ row9.drive_refresh_token + "&client_id=" + row9.drive_client_id;
							// {baseUri}tRESTClient
							factoryBean_tRESTClient_1.setServiceName(new javax.xml.namespace.QName(url, "tRESTClient"));
							factoryBean_tRESTClient_1.setAddress(url);

							factoryBean_tRESTClient_1.setFeatures(features_tRESTClient_1);

							java.util.List<Object> providers_tRESTClient_1 = new java.util.ArrayList<Object>();
							providers_tRESTClient_1.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
								// workaround for https://jira.talendforge.org/browse/TESB-7276
								public org.dom4j.Document readFrom(Class<org.dom4j.Document> cls,
										java.lang.reflect.Type type, java.lang.annotation.Annotation[] anns,
										javax.ws.rs.core.MediaType mt,
										javax.ws.rs.core.MultivaluedMap<String, String> headers, java.io.InputStream is)
										throws IOException, javax.ws.rs.WebApplicationException {
									String contentLength = headers.getFirst("Content-Length");
									if (!org.apache.cxf.common.util.StringUtils.isEmpty(contentLength)
											&& Integer.valueOf(contentLength) <= 0) {
										try {
											return org.dom4j.DocumentHelper.parseText("<root/>");
										} catch (org.dom4j.DocumentException e_tRESTClient_1) {
											e_tRESTClient_1.printStackTrace();
										}
										return null;
									}
									return super.readFrom(cls, type, anns, mt, headers, is);
								}
							});
							org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_1 = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
							jsonProvider_tRESTClient_1.setIgnoreNamespaces(true);
							jsonProvider_tRESTClient_1.setAttributesToElements(true);

							jsonProvider_tRESTClient_1.setSupportUnwrapped(true);
							jsonProvider_tRESTClient_1.setWrapperName("root");

							jsonProvider_tRESTClient_1.setDropRootElement(false);
							jsonProvider_tRESTClient_1.setConvertTypesToStrings(false);
							providers_tRESTClient_1.add(jsonProvider_tRESTClient_1);
							factoryBean_tRESTClient_1.setProviders(providers_tRESTClient_1);
							factoryBean_tRESTClient_1.setTransportId("http://cxf.apache.org/transports/http");

							boolean use_auth_tRESTClient_1 = false;
							if (use_auth_tRESTClient_1 && "SAML".equals("BASIC")) {
								if (!inOSGi) {
									throw new IllegalArgumentException(
											"SAML based security scenarios are not supported in Studio (standalone)");
								}
								// set SAML Token authentication

								final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil
										.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

								org.apache.cxf.ws.security.trust.STSClient stsClient = org.talend.esb.security.saml.STSClientUtils
										.createSTSClient(factoryBean_tRESTClient_1.getBus(), "username",
												decryptedPassword_tRESTClient_1);

								org.talend.esb.security.saml.SAMLRESTUtils.configureClient(factoryBean_tRESTClient_1,
										stsClient);
							}

							org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_1 = factoryBean_tRESTClient_1
									.createWebClient();

							// set request path
							webClient_tRESTClient_1.path("");

							// set connection properties
							org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_1 = org.apache.cxf.jaxrs.client.WebClient
									.getConfig(webClient_tRESTClient_1);
							org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_1 = clientConfig_tRESTClient_1
									.getHttpConduit();

							if (clientConfig_tRESTClient_1.getEndpoint() != null
									&& clientConfig_tRESTClient_1.getEndpoint().getEndpointInfo() != null) {
								clientConfig_tRESTClient_1.getEndpoint().getEndpointInfo()
										.setProperty("enable.webclient.operation.reporting", true);
							}

							if (use_auth_tRESTClient_1 && "BASIC".equals("BASIC")) {
								// set BASIC auth

								final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil
										.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

								org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_1 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
								authPolicy_tRESTClient_1.setAuthorizationType("Basic");
								authPolicy_tRESTClient_1.setUserName("username");
								authPolicy_tRESTClient_1.setPassword(decryptedPassword_tRESTClient_1);
								conduit_tRESTClient_1.setAuthorization(authPolicy_tRESTClient_1);
							} else if (use_auth_tRESTClient_1 && "HTTP Digest".equals("BASIC")) {
								// set Digest auth

								final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil
										.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

								org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_1 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
								authPolicy_tRESTClient_1.setAuthorizationType("Digest");
								authPolicy_tRESTClient_1.setUserName("username");
								authPolicy_tRESTClient_1.setPassword(decryptedPassword_tRESTClient_1);
								conduit_tRESTClient_1.setAuthorization(authPolicy_tRESTClient_1);
							}

							if (!inOSGi) {
								conduit_tRESTClient_1.getClient().setReceiveTimeout((long) (60 * 1000L));
								conduit_tRESTClient_1.getClient().setConnectionTimeout((long) (30 * 1000L));
								boolean use_proxy_tRESTClient_1 = false;
								if (use_proxy_tRESTClient_1) {

									final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil
											.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");

									conduit_tRESTClient_1.getClient().setProxyServer("61.163.92.4");
									conduit_tRESTClient_1.getClient().setProxyServerPort(Integer.valueOf(8080));
									conduit_tRESTClient_1.getProxyAuthorization().setUserName("");
									conduit_tRESTClient_1.getProxyAuthorization()
											.setPassword(decryptedPassword_tRESTClient_1);
								}
							}

							// set Content-Type
							webClient_tRESTClient_1.type("application/json");

							// set Accept-Type
							webClient_tRESTClient_1.accept("*/*");

							// set optional query and header properties if any

							if (use_auth_tRESTClient_1 && "OAUTH2_BEARER".equals("BASIC")) {
								// set oAuth2 bearer token
								webClient_tRESTClient_1.header("Authorization", "Bearer " + "");
							}

							if (use_auth_tRESTClient_1 && "OIDC_PASSWORD_GRANT".equals("BASIC")) {

								final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil
										.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

								String username_tRESTClient_1 = "username";
								String password_tRESTClient_1 = decryptedPassword_tRESTClient_1;

								String bearerHeader_tRESTClient_1 = null;

								try {
									if (!inOSGi) {
										org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_1 = new org.springframework.context.support.ClassPathXmlApplicationContext(
												"META-INF/tesb/oidc-context.xml");
										org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_1 = context_tRESTClient_1
												.getBean(org.talend.esb.security.oidc.OidcConfiguration.class);
										bearerHeader_tRESTClient_1 = org.talend.esb.security.oidc.OidcClientUtils
												.oidcClientBearer(username_tRESTClient_1, password_tRESTClient_1,
														oidcConfiguration_tRESTClient_1);
									} else {
										bearerHeader_tRESTClient_1 = org.talend.esb.security.oidc.OidcClientUtils
												.oidcClientBearer(username_tRESTClient_1, password_tRESTClient_1);
									}
								} catch (Exception ex) {
									throw new javax.ws.rs.WebApplicationException("Failed to get OIDC access token: ",
											ex);
								}

								webClient_tRESTClient_1.header("Authorization", bearerHeader_tRESTClient_1);
							}

							// if FORM request then capture query parameters into Form, otherwise set them
							// as queries

							try {
								// start send request

								responseDoc_tRESTClient_1 = webClient_tRESTClient_1.post(requestBody_tRESTClient_1);

								int webClientResponseStatus_tRESTClient_1 = webClient_tRESTClient_1.getResponse()
										.getStatus();
								if (webClientResponseStatus_tRESTClient_1 >= 300) {
									throw new javax.ws.rs.WebApplicationException(
											webClient_tRESTClient_1.getResponse());
								}

								if (row2 == null) {
									row2 = new row2Struct();
								}

								row2.statusCode = webClientResponseStatus_tRESTClient_1;

								Object responseObj_tRESTClient_1 = null;
								if (responseDoc_tRESTClient_1 != null && responseDoc_tRESTClient_1.hasEntity()) {
									responseObj_tRESTClient_1 = responseDoc_tRESTClient_1
											.readEntity(responseClass_tRESTClient_1);

									if (responseObj_tRESTClient_1 != null) {
										if (responseClass_tRESTClient_1 == String.class) {
											row2.string = (String) responseObj_tRESTClient_1;
										} else {
											routines.system.Document responseTalendDoc_tRESTClient_1 = null;
											if (null != responseObj_tRESTClient_1) {
												responseTalendDoc_tRESTClient_1 = new routines.system.Document();
												responseTalendDoc_tRESTClient_1
														.setDocument((org.dom4j.Document) responseObj_tRESTClient_1);
											}
											row2.body = responseTalendDoc_tRESTClient_1;
										}
									}
								}

								globalMap.put("tRESTClient_1_HEADERS",
										webClient_tRESTClient_1.getResponse().getHeaders());

								// handle "oneway" for PUT, POST and PATCH with empty response payload
								if (webClientResponseStatus_tRESTClient_1 == 202 && responseObj_tRESTClient_1 == null) {
									row2.string = "";
									return;
								}

							} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_1) {

								throw ex_tRESTClient_1;

							}

						} catch (Exception e_tRESTClient_1) {

							throw new TalendException(e_tRESTClient_1, currentComponent, globalMap);

						}

						tos_count_tRESTClient_1++;

						/**
						 * [tRESTClient_1 main ] stop
						 */

						/**
						 * [tRESTClient_1 process_data_begin ] start
						 */

						currentComponent = "tRESTClient_1";

						/**
						 * [tRESTClient_1 process_data_begin ] stop
						 */
// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tExtractJSONFields_1 main ] start
							 */

							currentComponent = "tExtractJSONFields_1";

							if (row2.string != null) {// C_01
								jsonStr_tExtractJSONFields_1 = row2.string.toString();

								row3 = null;

								String loopPath_tExtractJSONFields_1 = "$";
								java.util.List<Object> resultset_tExtractJSONFields_1 = new java.util.ArrayList<Object>();

								boolean isStructError_tExtractJSONFields_1 = true;
								com.jayway.jsonpath.ReadContext document_tExtractJSONFields_1 = null;
								try {
									document_tExtractJSONFields_1 = com.jayway.jsonpath.JsonPath
											.parse(jsonStr_tExtractJSONFields_1);
									com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(loopPath_tExtractJSONFields_1);
									Object result_tExtractJSONFields_1 = document_tExtractJSONFields_1.read(
											compiledLoopPath_tExtractJSONFields_1, net.minidev.json.JSONObject.class);
									if (result_tExtractJSONFields_1 instanceof net.minidev.json.JSONArray) {
										resultset_tExtractJSONFields_1 = (net.minidev.json.JSONArray) result_tExtractJSONFields_1;
									} else {
										resultset_tExtractJSONFields_1.add(result_tExtractJSONFields_1);
									}

									isStructError_tExtractJSONFields_1 = false;
								} catch (java.lang.Exception ex_tExtractJSONFields_1) {
									System.err.println(ex_tExtractJSONFields_1.getMessage());
								}

								String jsonPath_tExtractJSONFields_1 = null;
								com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_1 = null;

								Object value_tExtractJSONFields_1 = null;

								Object root_tExtractJSONFields_1 = null;
								for (int i_tExtractJSONFields_1 = 0; isStructError_tExtractJSONFields_1
										|| (i_tExtractJSONFields_1 < resultset_tExtractJSONFields_1
												.size()); i_tExtractJSONFields_1++) {
									if (!isStructError_tExtractJSONFields_1) {
										Object row_tExtractJSONFields_1 = resultset_tExtractJSONFields_1
												.get(i_tExtractJSONFields_1);
										row3 = null;
										row3 = new row3Struct();
										nb_line_tExtractJSONFields_1++;
										try {
											jsonPath_tExtractJSONFields_1 = "@.access_token";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
														.read(row_tExtractJSONFields_1);

												row3.access_token = value_tExtractJSONFields_1 == null ?

														null

														: value_tExtractJSONFields_1.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row3.access_token =

														null

												;
											}
										} catch (java.lang.Exception ex_tExtractJSONFields_1) {
											System.err.println(ex_tExtractJSONFields_1.getMessage());
											row3 = null;
										}

									}

									isStructError_tExtractJSONFields_1 = false;

//}

									tos_count_tExtractJSONFields_1++;

									/**
									 * [tExtractJSONFields_1 main ] stop
									 */

									/**
									 * [tExtractJSONFields_1 process_data_begin ] start
									 */

									currentComponent = "tExtractJSONFields_1";

									/**
									 * [tExtractJSONFields_1 process_data_begin ] stop
									 */
// Start of branch "row3"
									if (row3 != null) {

										/**
										 * [tJavaRow_1 main ] start
										 */

										currentComponent = "tJavaRow_1";

										// code sample:
//
// multiply by 2 the row identifier
// row6.id = row3.id * 2;
//
// lowercase the name
// row6.name = row3.name.toLowerCase();

										this.globalMap.put("drive_access_token", row3.access_token);

										row6.access_token = row3.access_token;
										row6.expiration = "\""
												+ new Date(new Date().getTime() + 5 * 60 * 60 * 1000).getTime() + "\"";
										long expiration = new Date(new Date().getTime() + 5 * 60 * 60 * 1000).getTime();

										row6.string = "{\"id\":\"" + this.globalMap.get("drive_webhook_id").toString()
												+ "\",\"type\":\"webhook\",\"address\":\""
												+ this.globalMap.get("drive_callbackUrl").toString()
												+ "/drive_webhook/subcribe/zzz" + "\",\"token\":\""
												+ this.globalMap.get("drive_webhook_token").toString()
												+ "\",\"expiration\":\"" + expiration + "\",\"payload\":true}";

										row6.drive_time_out_token = this.globalMap.get("drive_time_out_token") == null
												? "0"
												: this.globalMap.get("drive_time_out_token").toString();

										nb_line_tJavaRow_1++;

										tos_count_tJavaRow_1++;

										/**
										 * [tJavaRow_1 main ] stop
										 */

										/**
										 * [tJavaRow_1 process_data_begin ] start
										 */

										currentComponent = "tJavaRow_1";

										/**
										 * [tJavaRow_1 process_data_begin ] stop
										 */

										/**
										 * [tLogRow_2 main ] start
										 */

										currentComponent = "tLogRow_2";

///////////////////////		

										strBuffer_tLogRow_2 = new StringBuilder();

										if (row6.drive_time_out_token != null) { //

											strBuffer_tLogRow_2.append(String.valueOf(row6.drive_time_out_token));

										} //

										strBuffer_tLogRow_2.append("|");

										if (row6.expiration != null) { //

											strBuffer_tLogRow_2.append(String.valueOf(row6.expiration));

										} //

										strBuffer_tLogRow_2.append("|");

										if (row6.string != null) { //

											strBuffer_tLogRow_2.append(String.valueOf(row6.string));

										} //

										strBuffer_tLogRow_2.append("|");

										if (row6.access_token != null) { //

											strBuffer_tLogRow_2.append(String.valueOf(row6.access_token));

										} //

										String[] row_tLogRow_2 = new String[4];

										if (row6.drive_time_out_token != null) { //
											row_tLogRow_2[0] = String.valueOf(row6.drive_time_out_token);

										} //

										if (row6.expiration != null) { //
											row_tLogRow_2[1] = String.valueOf(row6.expiration);

										} //

										if (row6.string != null) { //
											row_tLogRow_2[2] = String.valueOf(row6.string);

										} //

										if (row6.access_token != null) { //
											row_tLogRow_2[3] = String.valueOf(row6.access_token);

										} //

										nb_line_tLogRow_2++;
										consoleOut_tLogRow_2
												.println(util_tLogRow_2.print(row_tLogRow_2, nb_line_tLogRow_2));
										consoleOut_tLogRow_2.flush();
//////

//////                    

///////////////////////    			

										row10 = row6;

										tos_count_tLogRow_2++;

										/**
										 * [tLogRow_2 main ] stop
										 */

										/**
										 * [tLogRow_2 process_data_begin ] start
										 */

										currentComponent = "tLogRow_2";

										/**
										 * [tLogRow_2 process_data_begin ] stop
										 */

										/**
										 * [tMap_2 main ] start
										 */

										currentComponent = "tMap_2";

										boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_2 = false;
										boolean mainRowRejected_tMap_2 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
											// ###############################
											// # Output tables

											process_main = null;
											process_set_token = null;

// # Output table : 'process_main'
											process_main_tmp.drive_time_out_token = row10.drive_time_out_token;
											process_main_tmp.expiration = row10.expiration;
											process_main_tmp.string = row10.string;
											process_main_tmp.access_token = row10.access_token;
											process_main = process_main_tmp;

// # Output table : 'process_set_token'
											process_set_token_tmp.access_token = row10.access_token;
											process_set_token = process_set_token_tmp;
// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_2 = false;

										tos_count_tMap_2++;

										/**
										 * [tMap_2 main ] stop
										 */

										/**
										 * [tMap_2 process_data_begin ] start
										 */

										currentComponent = "tMap_2";

										/**
										 * [tMap_2 process_data_begin ] stop
										 */
// Start of branch "process_main"
										if (process_main != null) {

											/**
											 * [tRESTClient_3 main ] start
											 */

											currentComponent = "tRESTClient_3";

											row14 = null;
											row7 = null;

// expected response body
											javax.ws.rs.core.Response responseDoc_tRESTClient_3 = null;

											try {
												// request body
												org.dom4j.Document requestDoc_tRESTClient_3 = null;
												String requestString_tRESTClient_3 = null;
												requestString_tRESTClient_3 = process_main.string;

												Object requestBody_tRESTClient_3 = requestDoc_tRESTClient_3 != null
														? requestDoc_tRESTClient_3
														: requestString_tRESTClient_3;

												// resposne class name
												Class<?> responseClass_tRESTClient_3 = String.class;

												// create web client instance
												org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_3 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

												boolean inOSGi = routines.system.BundleUtils.inOSGi();

												final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_3 = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

												String url = "https://www.googleapis.com/drive/v3/changes/watch?pageToken="
														+ this.globalMap.get("drive_page_token");
												// {baseUri}tRESTClient
												factoryBean_tRESTClient_3.setServiceName(
														new javax.xml.namespace.QName(url, "tRESTClient"));
												factoryBean_tRESTClient_3.setAddress(url);

												factoryBean_tRESTClient_3.setFeatures(features_tRESTClient_3);

												java.util.List<Object> providers_tRESTClient_3 = new java.util.ArrayList<Object>();
												providers_tRESTClient_3
														.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
															// workaround for
															// https://jira.talendforge.org/browse/TESB-7276
															public org.dom4j.Document readFrom(
																	Class<org.dom4j.Document> cls,
																	java.lang.reflect.Type type,
																	java.lang.annotation.Annotation[] anns,
																	javax.ws.rs.core.MediaType mt,
																	javax.ws.rs.core.MultivaluedMap<String, String> headers,
																	java.io.InputStream is) throws IOException,
																	javax.ws.rs.WebApplicationException {
																String contentLength = headers
																		.getFirst("Content-Length");
																if (!org.apache.cxf.common.util.StringUtils
																		.isEmpty(contentLength)
																		&& Integer.valueOf(contentLength) <= 0) {
																	try {
																		return org.dom4j.DocumentHelper
																				.parseText("<root/>");
																	} catch (org.dom4j.DocumentException e_tRESTClient_3) {
																		e_tRESTClient_3.printStackTrace();
																	}
																	return null;
																}
																return super.readFrom(cls, type, anns, mt, headers, is);
															}
														});
												org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_3 = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
												jsonProvider_tRESTClient_3.setIgnoreNamespaces(true);
												jsonProvider_tRESTClient_3.setAttributesToElements(true);

												jsonProvider_tRESTClient_3.setSupportUnwrapped(true);
												jsonProvider_tRESTClient_3.setWrapperName("root");

												jsonProvider_tRESTClient_3.setDropRootElement(false);
												jsonProvider_tRESTClient_3.setConvertTypesToStrings(false);
												providers_tRESTClient_3.add(jsonProvider_tRESTClient_3);
												factoryBean_tRESTClient_3.setProviders(providers_tRESTClient_3);
												factoryBean_tRESTClient_3
														.setTransportId("http://cxf.apache.org/transports/http");

												boolean use_auth_tRESTClient_3 = false;
												if (use_auth_tRESTClient_3 && "SAML".equals("BASIC")) {
													if (!inOSGi) {
														throw new IllegalArgumentException(
																"SAML based security scenarios are not supported in Studio (standalone)");
													}
													// set SAML Token authentication

													final String decryptedPassword_tRESTClient_3 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													org.apache.cxf.ws.security.trust.STSClient stsClient = org.talend.esb.security.saml.STSClientUtils
															.createSTSClient(factoryBean_tRESTClient_3.getBus(),
																	"username", decryptedPassword_tRESTClient_3);

													org.talend.esb.security.saml.SAMLRESTUtils
															.configureClient(factoryBean_tRESTClient_3, stsClient);
												}

												org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_3 = factoryBean_tRESTClient_3
														.createWebClient();

												// set request path
												webClient_tRESTClient_3.path("");

												// set connection properties
												org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_3 = org.apache.cxf.jaxrs.client.WebClient
														.getConfig(webClient_tRESTClient_3);
												org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_3 = clientConfig_tRESTClient_3
														.getHttpConduit();

												if (clientConfig_tRESTClient_3.getEndpoint() != null
														&& clientConfig_tRESTClient_3.getEndpoint()
																.getEndpointInfo() != null) {
													clientConfig_tRESTClient_3.getEndpoint().getEndpointInfo()
															.setProperty("enable.webclient.operation.reporting", true);
												}

												if (use_auth_tRESTClient_3 && "BASIC".equals("BASIC")) {
													// set BASIC auth

													final String decryptedPassword_tRESTClient_3 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_3 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
													authPolicy_tRESTClient_3.setAuthorizationType("Basic");
													authPolicy_tRESTClient_3.setUserName("username");
													authPolicy_tRESTClient_3
															.setPassword(decryptedPassword_tRESTClient_3);
													conduit_tRESTClient_3.setAuthorization(authPolicy_tRESTClient_3);
												} else if (use_auth_tRESTClient_3 && "HTTP Digest".equals("BASIC")) {
													// set Digest auth

													final String decryptedPassword_tRESTClient_3 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_3 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
													authPolicy_tRESTClient_3.setAuthorizationType("Digest");
													authPolicy_tRESTClient_3.setUserName("username");
													authPolicy_tRESTClient_3
															.setPassword(decryptedPassword_tRESTClient_3);
													conduit_tRESTClient_3.setAuthorization(authPolicy_tRESTClient_3);
												}

												if (!inOSGi) {
													conduit_tRESTClient_3.getClient()
															.setReceiveTimeout((long) (60 * 1000L));
													conduit_tRESTClient_3.getClient()
															.setConnectionTimeout((long) (30 * 1000L));
													boolean use_proxy_tRESTClient_3 = false;
													if (use_proxy_tRESTClient_3) {

														final String decryptedPassword_tRESTClient_3 = routines.system.PasswordEncryptUtil
																.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");

														conduit_tRESTClient_3.getClient().setProxyServer("61.163.92.4");
														conduit_tRESTClient_3.getClient()
																.setProxyServerPort(Integer.valueOf(8080));
														conduit_tRESTClient_3.getProxyAuthorization().setUserName("");
														conduit_tRESTClient_3.getProxyAuthorization()
																.setPassword(decryptedPassword_tRESTClient_3);
													}
												}

												// set Content-Type
												webClient_tRESTClient_3.type("application/json");

												// set Accept-Type
												webClient_tRESTClient_3.accept("*/*");

												// set optional query and header properties if any

												webClient_tRESTClient_3.header("Authorization",
														"Bearer " + process_main.access_token);

												if (use_auth_tRESTClient_3 && "OAUTH2_BEARER".equals("BASIC")) {
													// set oAuth2 bearer token
													webClient_tRESTClient_3.header("Authorization", "Bearer " + "");
												}

												if (use_auth_tRESTClient_3 && "OIDC_PASSWORD_GRANT".equals("BASIC")) {

													final String decryptedPassword_tRESTClient_3 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													String username_tRESTClient_3 = "username";
													String password_tRESTClient_3 = decryptedPassword_tRESTClient_3;

													String bearerHeader_tRESTClient_3 = null;

													try {
														if (!inOSGi) {
															org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_3 = new org.springframework.context.support.ClassPathXmlApplicationContext(
																	"META-INF/tesb/oidc-context.xml");
															org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_3 = context_tRESTClient_3
																	.getBean(
																			org.talend.esb.security.oidc.OidcConfiguration.class);
															bearerHeader_tRESTClient_3 = org.talend.esb.security.oidc.OidcClientUtils
																	.oidcClientBearer(username_tRESTClient_3,
																			password_tRESTClient_3,
																			oidcConfiguration_tRESTClient_3);
														} else {
															bearerHeader_tRESTClient_3 = org.talend.esb.security.oidc.OidcClientUtils
																	.oidcClientBearer(username_tRESTClient_3,
																			password_tRESTClient_3);
														}
													} catch (Exception ex) {
														throw new javax.ws.rs.WebApplicationException(
																"Failed to get OIDC access token: ", ex);
													}

													webClient_tRESTClient_3.header("Authorization",
															bearerHeader_tRESTClient_3);
												}

												// if FORM request then capture query parameters into Form, otherwise
												// set them as queries

												try {
													// start send request

													responseDoc_tRESTClient_3 = webClient_tRESTClient_3
															.post(requestBody_tRESTClient_3);

													int webClientResponseStatus_tRESTClient_3 = webClient_tRESTClient_3
															.getResponse().getStatus();
													if (webClientResponseStatus_tRESTClient_3 >= 300) {
														throw new javax.ws.rs.WebApplicationException(
																webClient_tRESTClient_3.getResponse());
													}

													if (row7 == null) {
														row7 = new row7Struct();
													}

													row7.statusCode = webClientResponseStatus_tRESTClient_3;

													Object responseObj_tRESTClient_3 = null;
													if (responseDoc_tRESTClient_3 != null
															&& responseDoc_tRESTClient_3.hasEntity()) {
														responseObj_tRESTClient_3 = responseDoc_tRESTClient_3
																.readEntity(responseClass_tRESTClient_3);

														if (responseObj_tRESTClient_3 != null) {
															if (responseClass_tRESTClient_3 == String.class) {
																row7.string = (String) responseObj_tRESTClient_3;
															} else {
																routines.system.Document responseTalendDoc_tRESTClient_3 = null;
																if (null != responseObj_tRESTClient_3) {
																	responseTalendDoc_tRESTClient_3 = new routines.system.Document();
																	responseTalendDoc_tRESTClient_3.setDocument(
																			(org.dom4j.Document) responseObj_tRESTClient_3);
																}
																row7.body = responseTalendDoc_tRESTClient_3;
															}
														}
													}

													globalMap.put("tRESTClient_3_HEADERS",
															webClient_tRESTClient_3.getResponse().getHeaders());

													// handle "oneway" for PUT, POST and PATCH with empty response
													// payload
													if (webClientResponseStatus_tRESTClient_3 == 202
															&& responseObj_tRESTClient_3 == null) {
														row7.string = "";
														return;
													}

												} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_3) {

													if (row14 == null) {
														row14 = new row14Struct();
													}
													row14.errorCode = ex_tRESTClient_3.getResponse().getStatus();

													String errorMessage_tRESTClient_3 = null;
													try {
														errorMessage_tRESTClient_3 = ex_tRESTClient_3.getResponse()
																.readEntity(String.class);
													} catch (Exception exe_tRESTClient_3) {
														// ignore
													}
													if (null == errorMessage_tRESTClient_3
															|| 0 == errorMessage_tRESTClient_3.trim().length()) {
														errorMessage_tRESTClient_3 = ex_tRESTClient_3.getMessage();
													}
													row14.errorMessage = errorMessage_tRESTClient_3;

													globalMap.put("tRESTClient_3_HEADERS",
															ex_tRESTClient_3.getResponse().getHeaders());

												}

											} catch (Exception e_tRESTClient_3) {

												throw new TalendException(e_tRESTClient_3, currentComponent, globalMap);

											}

											tos_count_tRESTClient_3++;

											/**
											 * [tRESTClient_3 main ] stop
											 */

											/**
											 * [tRESTClient_3 process_data_begin ] start
											 */

											currentComponent = "tRESTClient_3";

											/**
											 * [tRESTClient_3 process_data_begin ] stop
											 */
// Start of branch "row7"
											if (row7 != null) {

												/**
												 * [tLogRow_1 main ] start
												 */

												currentComponent = "tLogRow_1";

///////////////////////		

												strBuffer_tLogRow_1 = new StringBuilder();

												if (row7.statusCode != null) { //

													strBuffer_tLogRow_1.append(String.valueOf(row7.statusCode));

												} //

												strBuffer_tLogRow_1.append("|");

												if (row7.body != null) { //

													strBuffer_tLogRow_1.append(String.valueOf(row7.body));

												} //

												strBuffer_tLogRow_1.append("|");

												if (row7.string != null) { //

													strBuffer_tLogRow_1.append(String.valueOf(row7.string));

												} //

												String[] row_tLogRow_1 = new String[3];

												if (row7.statusCode != null) { //
													row_tLogRow_1[0] = String.valueOf(row7.statusCode);

												} //

												if (row7.body != null) { //
													row_tLogRow_1[1] = String.valueOf(row7.body);

												} //

												if (row7.string != null) { //
													row_tLogRow_1[2] = String.valueOf(row7.string);

												} //

												nb_line_tLogRow_1++;
												consoleOut_tLogRow_1.println(
														util_tLogRow_1.print(row_tLogRow_1, nb_line_tLogRow_1));
												consoleOut_tLogRow_1.flush();
//////

//////                    

///////////////////////    			

												row12 = row7;

												tos_count_tLogRow_1++;

												/**
												 * [tLogRow_1 main ] stop
												 */

												/**
												 * [tLogRow_1 process_data_begin ] start
												 */

												currentComponent = "tLogRow_1";

												/**
												 * [tLogRow_1 process_data_begin ] stop
												 */

												/**
												 * [tExtractJSONFields_5 main ] start
												 */

												currentComponent = "tExtractJSONFields_5";

												if (row12.string != null) {// C_01
													jsonStr_tExtractJSONFields_5 = row12.string.toString();

													row13 = null;

													String loopPath_tExtractJSONFields_5 = "$";
													java.util.List<Object> resultset_tExtractJSONFields_5 = new java.util.ArrayList<Object>();

													boolean isStructError_tExtractJSONFields_5 = true;
													com.jayway.jsonpath.ReadContext document_tExtractJSONFields_5 = null;
													try {
														document_tExtractJSONFields_5 = com.jayway.jsonpath.JsonPath
																.parse(jsonStr_tExtractJSONFields_5);
														com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
																.getCompiledJsonPath(loopPath_tExtractJSONFields_5);
														Object result_tExtractJSONFields_5 = document_tExtractJSONFields_5
																.read(compiledLoopPath_tExtractJSONFields_5,
																		net.minidev.json.JSONObject.class);
														if (result_tExtractJSONFields_5 instanceof net.minidev.json.JSONArray) {
															resultset_tExtractJSONFields_5 = (net.minidev.json.JSONArray) result_tExtractJSONFields_5;
														} else {
															resultset_tExtractJSONFields_5
																	.add(result_tExtractJSONFields_5);
														}

														isStructError_tExtractJSONFields_5 = false;
													} catch (java.lang.Exception ex_tExtractJSONFields_5) {
														System.err.println(ex_tExtractJSONFields_5.getMessage());
													}

													String jsonPath_tExtractJSONFields_5 = null;
													com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_5 = null;

													Object value_tExtractJSONFields_5 = null;

													Object root_tExtractJSONFields_5 = null;
													for (int i_tExtractJSONFields_5 = 0; isStructError_tExtractJSONFields_5
															|| (i_tExtractJSONFields_5 < resultset_tExtractJSONFields_5
																	.size()); i_tExtractJSONFields_5++) {
														if (!isStructError_tExtractJSONFields_5) {
															Object row_tExtractJSONFields_5 = resultset_tExtractJSONFields_5
																	.get(i_tExtractJSONFields_5);
															row13 = null;
															row13 = new row13Struct();
															nb_line_tExtractJSONFields_5++;
															try {
																jsonPath_tExtractJSONFields_5 = "@.expiration";
																compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
																		.getCompiledJsonPath(
																				jsonPath_tExtractJSONFields_5);

																try {

																	value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
																			.read(row_tExtractJSONFields_5);

																	row13.expiration = value_tExtractJSONFields_5 == null
																			?

																			null

																			: value_tExtractJSONFields_5.toString();
																} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
																	row13.expiration =

																			null

																	;
																}
															} catch (java.lang.Exception ex_tExtractJSONFields_5) {
																System.err
																		.println(ex_tExtractJSONFields_5.getMessage());
																row13 = null;
															}

														}

														isStructError_tExtractJSONFields_5 = false;

//}

														tos_count_tExtractJSONFields_5++;

														/**
														 * [tExtractJSONFields_5 main ] stop
														 */

														/**
														 * [tExtractJSONFields_5 process_data_begin ] start
														 */

														currentComponent = "tExtractJSONFields_5";

														/**
														 * [tExtractJSONFields_5 process_data_begin ] stop
														 */
// Start of branch "row13"
														if (row13 != null) {

															/**
															 * [tDBRow_1 main ] start
															 */

															currentComponent = "tDBRow_1";

															query_tDBRow_1 = "UPDATE slack_google_drive SET drive_time_out_token = ? ";
															whetherReject_tDBRow_1 = false;
															globalMap.put("tDBRow_1_QUERY", query_tDBRow_1);
															try {
																pstmt_tDBRow_1.setString(1, row13.expiration);
																pstmt_tDBRow_1.execute();

															} catch (java.lang.Exception e) {
																whetherReject_tDBRow_1 = true;

																System.err.print(e.getMessage());

															}

															commitCounter_tDBRow_1++;
															if (commitEvery_tDBRow_1 <= commitCounter_tDBRow_1) {

																conn_tDBRow_1.commit();

																commitCounter_tDBRow_1 = 0;
															}

															tos_count_tDBRow_1++;

															/**
															 * [tDBRow_1 main ] stop
															 */

															/**
															 * [tDBRow_1 process_data_begin ] start
															 */

															currentComponent = "tDBRow_1";

															/**
															 * [tDBRow_1 process_data_begin ] stop
															 */

															/**
															 * [tDBRow_1 process_data_end ] start
															 */

															currentComponent = "tDBRow_1";

															/**
															 * [tDBRow_1 process_data_end ] stop
															 */

														} // End of branch "row13"

														// end for
													}

												} // C_01

												/**
												 * [tExtractJSONFields_5 process_data_end ] start
												 */

												currentComponent = "tExtractJSONFields_5";

												/**
												 * [tExtractJSONFields_5 process_data_end ] stop
												 */

												/**
												 * [tLogRow_1 process_data_end ] start
												 */

												currentComponent = "tLogRow_1";

												/**
												 * [tLogRow_1 process_data_end ] stop
												 */

											} // End of branch "row7"

// Start of branch "row14"
											if (row14 != null) {

												/**
												 * [tLogRow_3 main ] start
												 */

												currentComponent = "tLogRow_3";

///////////////////////		

												strBuffer_tLogRow_3 = new StringBuilder();

												if (row14.errorCode != null) { //

													strBuffer_tLogRow_3.append(String.valueOf(row14.errorCode));

												} //

												strBuffer_tLogRow_3.append("|");

												if (row14.errorMessage != null) { //

													strBuffer_tLogRow_3.append(String.valueOf(row14.errorMessage));

												} //

												String[] row_tLogRow_3 = new String[2];

												if (row14.errorCode != null) { //
													row_tLogRow_3[0] = String.valueOf(row14.errorCode);

												} //

												if (row14.errorMessage != null) { //
													row_tLogRow_3[1] = String.valueOf(row14.errorMessage);

												} //

												nb_line_tLogRow_3++;
												consoleOut_tLogRow_3.println(
														util_tLogRow_3.print(row_tLogRow_3, nb_line_tLogRow_3));
												consoleOut_tLogRow_3.flush();
//////

//////                    

///////////////////////    			

												tos_count_tLogRow_3++;

												/**
												 * [tLogRow_3 main ] stop
												 */

												/**
												 * [tLogRow_3 process_data_begin ] start
												 */

												currentComponent = "tLogRow_3";

												/**
												 * [tLogRow_3 process_data_begin ] stop
												 */

												/**
												 * [tLogRow_3 process_data_end ] start
												 */

												currentComponent = "tLogRow_3";

												/**
												 * [tLogRow_3 process_data_end ] stop
												 */

											} // End of branch "row14"

											/**
											 * [tRESTClient_3 process_data_end ] start
											 */

											currentComponent = "tRESTClient_3";

											/**
											 * [tRESTClient_3 process_data_end ] stop
											 */

										} // End of branch "process_main"

// Start of branch "process_set_token"
										if (process_set_token != null) {

											/**
											 * [tRESTClient_8 main ] start
											 */

											currentComponent = "tRESTClient_8";

// expected response body
											javax.ws.rs.core.Response responseDoc_tRESTClient_8 = null;

											try {
												// request body
												org.dom4j.Document requestDoc_tRESTClient_8 = null;
												String requestString_tRESTClient_8 = null;

												Object requestBody_tRESTClient_8 = requestDoc_tRESTClient_8 != null
														? requestDoc_tRESTClient_8
														: requestString_tRESTClient_8;

												// resposne class name
												Class<?> responseClass_tRESTClient_8 = String.class;

												// create web client instance
												org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_8 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

												boolean inOSGi = routines.system.BundleUtils.inOSGi();

												final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_8 = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

												String url = "http://localhost:3000/drive/listen_token";
												// {baseUri}tRESTClient
												factoryBean_tRESTClient_8.setServiceName(
														new javax.xml.namespace.QName(url, "tRESTClient"));
												factoryBean_tRESTClient_8.setAddress(url);

												factoryBean_tRESTClient_8.setFeatures(features_tRESTClient_8);

												java.util.List<Object> providers_tRESTClient_8 = new java.util.ArrayList<Object>();
												providers_tRESTClient_8
														.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
															// workaround for
															// https://jira.talendforge.org/browse/TESB-7276
															public org.dom4j.Document readFrom(
																	Class<org.dom4j.Document> cls,
																	java.lang.reflect.Type type,
																	java.lang.annotation.Annotation[] anns,
																	javax.ws.rs.core.MediaType mt,
																	javax.ws.rs.core.MultivaluedMap<String, String> headers,
																	java.io.InputStream is) throws IOException,
																	javax.ws.rs.WebApplicationException {
																String contentLength = headers
																		.getFirst("Content-Length");
																if (!org.apache.cxf.common.util.StringUtils
																		.isEmpty(contentLength)
																		&& Integer.valueOf(contentLength) <= 0) {
																	try {
																		return org.dom4j.DocumentHelper
																				.parseText("<root/>");
																	} catch (org.dom4j.DocumentException e_tRESTClient_8) {
																		e_tRESTClient_8.printStackTrace();
																	}
																	return null;
																}
																return super.readFrom(cls, type, anns, mt, headers, is);
															}
														});
												org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_8 = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
												jsonProvider_tRESTClient_8.setIgnoreNamespaces(true);
												jsonProvider_tRESTClient_8.setAttributesToElements(true);

												jsonProvider_tRESTClient_8.setSupportUnwrapped(true);
												jsonProvider_tRESTClient_8.setWrapperName("root");

												jsonProvider_tRESTClient_8.setDropRootElement(false);
												jsonProvider_tRESTClient_8.setConvertTypesToStrings(false);
												providers_tRESTClient_8.add(jsonProvider_tRESTClient_8);
												factoryBean_tRESTClient_8.setProviders(providers_tRESTClient_8);
												factoryBean_tRESTClient_8
														.setTransportId("http://cxf.apache.org/transports/http");

												boolean use_auth_tRESTClient_8 = false;
												if (use_auth_tRESTClient_8 && "SAML".equals("BASIC")) {
													if (!inOSGi) {
														throw new IllegalArgumentException(
																"SAML based security scenarios are not supported in Studio (standalone)");
													}
													// set SAML Token authentication

													final String decryptedPassword_tRESTClient_8 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													org.apache.cxf.ws.security.trust.STSClient stsClient = org.talend.esb.security.saml.STSClientUtils
															.createSTSClient(factoryBean_tRESTClient_8.getBus(),
																	"username", decryptedPassword_tRESTClient_8);

													org.talend.esb.security.saml.SAMLRESTUtils
															.configureClient(factoryBean_tRESTClient_8, stsClient);
												}

												org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_8 = factoryBean_tRESTClient_8
														.createWebClient();

												// set request path
												webClient_tRESTClient_8.path("");

												// set connection properties
												org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_8 = org.apache.cxf.jaxrs.client.WebClient
														.getConfig(webClient_tRESTClient_8);
												org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_8 = clientConfig_tRESTClient_8
														.getHttpConduit();

												if (clientConfig_tRESTClient_8.getEndpoint() != null
														&& clientConfig_tRESTClient_8.getEndpoint()
																.getEndpointInfo() != null) {
													clientConfig_tRESTClient_8.getEndpoint().getEndpointInfo()
															.setProperty("enable.webclient.operation.reporting", true);
												}

												if (use_auth_tRESTClient_8 && "BASIC".equals("BASIC")) {
													// set BASIC auth

													final String decryptedPassword_tRESTClient_8 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_8 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
													authPolicy_tRESTClient_8.setAuthorizationType("Basic");
													authPolicy_tRESTClient_8.setUserName("username");
													authPolicy_tRESTClient_8
															.setPassword(decryptedPassword_tRESTClient_8);
													conduit_tRESTClient_8.setAuthorization(authPolicy_tRESTClient_8);
												} else if (use_auth_tRESTClient_8 && "HTTP Digest".equals("BASIC")) {
													// set Digest auth

													final String decryptedPassword_tRESTClient_8 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_8 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
													authPolicy_tRESTClient_8.setAuthorizationType("Digest");
													authPolicy_tRESTClient_8.setUserName("username");
													authPolicy_tRESTClient_8
															.setPassword(decryptedPassword_tRESTClient_8);
													conduit_tRESTClient_8.setAuthorization(authPolicy_tRESTClient_8);
												}

												if (!inOSGi) {
													conduit_tRESTClient_8.getClient()
															.setReceiveTimeout((long) (60 * 1000L));
													conduit_tRESTClient_8.getClient()
															.setConnectionTimeout((long) (30 * 1000L));
													boolean use_proxy_tRESTClient_8 = false;
													if (use_proxy_tRESTClient_8) {

														final String decryptedPassword_tRESTClient_8 = routines.system.PasswordEncryptUtil
																.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");

														conduit_tRESTClient_8.getClient().setProxyServer("61.163.92.4");
														conduit_tRESTClient_8.getClient()
																.setProxyServerPort(Integer.valueOf(8080));
														conduit_tRESTClient_8.getProxyAuthorization().setUserName("");
														conduit_tRESTClient_8.getProxyAuthorization()
																.setPassword(decryptedPassword_tRESTClient_8);
													}
												}

												// set Content-Type
												webClient_tRESTClient_8.type("application/x-www-form-urlencoded");

												// set Accept-Type
												webClient_tRESTClient_8.accept("*/*");

												// set optional query and header properties if any

												if (use_auth_tRESTClient_8 && "OAUTH2_BEARER".equals("BASIC")) {
													// set oAuth2 bearer token
													webClient_tRESTClient_8.header("Authorization", "Bearer " + "");
												}

												if (use_auth_tRESTClient_8 && "OIDC_PASSWORD_GRANT".equals("BASIC")) {

													final String decryptedPassword_tRESTClient_8 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													String username_tRESTClient_8 = "username";
													String password_tRESTClient_8 = decryptedPassword_tRESTClient_8;

													String bearerHeader_tRESTClient_8 = null;

													try {
														if (!inOSGi) {
															org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_8 = new org.springframework.context.support.ClassPathXmlApplicationContext(
																	"META-INF/tesb/oidc-context.xml");
															org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_8 = context_tRESTClient_8
																	.getBean(
																			org.talend.esb.security.oidc.OidcConfiguration.class);
															bearerHeader_tRESTClient_8 = org.talend.esb.security.oidc.OidcClientUtils
																	.oidcClientBearer(username_tRESTClient_8,
																			password_tRESTClient_8,
																			oidcConfiguration_tRESTClient_8);
														} else {
															bearerHeader_tRESTClient_8 = org.talend.esb.security.oidc.OidcClientUtils
																	.oidcClientBearer(username_tRESTClient_8,
																			password_tRESTClient_8);
														}
													} catch (Exception ex) {
														throw new javax.ws.rs.WebApplicationException(
																"Failed to get OIDC access token: ", ex);
													}

													webClient_tRESTClient_8.header("Authorization",
															bearerHeader_tRESTClient_8);
												}

												// if FORM request then capture query parameters into Form, otherwise
												// set them as queries

												javax.ws.rs.core.Form form_tRESTClient_8 = new javax.ws.rs.core.Form();

												form_tRESTClient_8.param("token", process_set_token.access_token);

												requestBody_tRESTClient_8 = form_tRESTClient_8;

												try {
													// start send request

													responseDoc_tRESTClient_8 = webClient_tRESTClient_8
															.post(requestBody_tRESTClient_8);

													int webClientResponseStatus_tRESTClient_8 = webClient_tRESTClient_8
															.getResponse().getStatus();
													if (webClientResponseStatus_tRESTClient_8 >= 300) {
														throw new javax.ws.rs.WebApplicationException(
																webClient_tRESTClient_8.getResponse());
													}

												} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_8) {

													throw ex_tRESTClient_8;

												}

											} catch (Exception e_tRESTClient_8) {

												throw new TalendException(e_tRESTClient_8, currentComponent, globalMap);

											}

											tos_count_tRESTClient_8++;

											/**
											 * [tRESTClient_8 main ] stop
											 */

											/**
											 * [tRESTClient_8 process_data_begin ] start
											 */

											currentComponent = "tRESTClient_8";

											/**
											 * [tRESTClient_8 process_data_begin ] stop
											 */

											/**
											 * [tRESTClient_8 process_data_end ] start
											 */

											currentComponent = "tRESTClient_8";

											/**
											 * [tRESTClient_8 process_data_end ] stop
											 */

										} // End of branch "process_set_token"

										/**
										 * [tMap_2 process_data_end ] start
										 */

										currentComponent = "tMap_2";

										/**
										 * [tMap_2 process_data_end ] stop
										 */

										/**
										 * [tLogRow_2 process_data_end ] start
										 */

										currentComponent = "tLogRow_2";

										/**
										 * [tLogRow_2 process_data_end ] stop
										 */

										/**
										 * [tJavaRow_1 process_data_end ] start
										 */

										currentComponent = "tJavaRow_1";

										/**
										 * [tJavaRow_1 process_data_end ] stop
										 */

									} // End of branch "row3"

									// end for
								}

							} // C_01

							/**
							 * [tExtractJSONFields_1 process_data_end ] start
							 */

							currentComponent = "tExtractJSONFields_1";

							/**
							 * [tExtractJSONFields_1 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tRESTClient_1 process_data_end ] start
						 */

						currentComponent = "tRESTClient_1";

						/**
						 * [tRESTClient_1 process_data_end ] stop
						 */

						/**
						 * [tJavaRow_5 process_data_end ] start
						 */

						currentComponent = "tJavaRow_5";

						/**
						 * [tJavaRow_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

					}

				}

				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tJavaRow_5 end ] start
				 */

				currentComponent = "tJavaRow_5";

				globalMap.put("tJavaRow_5_NB_LINE", nb_line_tJavaRow_5);

				ok_Hash.put("tJavaRow_5", true);
				end_Hash.put("tJavaRow_5", System.currentTimeMillis());

				/**
				 * [tJavaRow_5 end ] stop
				 */

				/**
				 * [tRESTClient_1 end ] start
				 */

				currentComponent = "tRESTClient_1";

				if (globalMap.get("tRESTClient_1_NB_LINE") == null) {
					globalMap.put("tRESTClient_1_NB_LINE", 1);
				}

// [tRESTCliend_end]

				ok_Hash.put("tRESTClient_1", true);
				end_Hash.put("tRESTClient_1", System.currentTimeMillis());

				/**
				 * [tRESTClient_1 end ] stop
				 */

				/**
				 * [tExtractJSONFields_1 end ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_1);

				ok_Hash.put("tExtractJSONFields_1", true);
				end_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());

				/**
				 * [tExtractJSONFields_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

//////
//////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

///////////////////////    			

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tRESTClient_3 end ] start
				 */

				currentComponent = "tRESTClient_3";

				if (globalMap.get("tRESTClient_3_NB_LINE") == null) {
					globalMap.put("tRESTClient_3_NB_LINE", 1);
				}

// [tRESTCliend_end]

				ok_Hash.put("tRESTClient_3", true);
				end_Hash.put("tRESTClient_3", System.currentTimeMillis());

				/**
				 * [tRESTClient_3 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tExtractJSONFields_5 end ] start
				 */

				currentComponent = "tExtractJSONFields_5";

				globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_5);

				ok_Hash.put("tExtractJSONFields_5", true);
				end_Hash.put("tExtractJSONFields_5", System.currentTimeMillis());

				/**
				 * [tExtractJSONFields_5 end ] stop
				 */

				/**
				 * [tDBRow_1 end ] start
				 */

				currentComponent = "tDBRow_1";

				pstmt_tDBRow_1.close();
				resourceMap.remove("pstmt_tDBRow_1");
				resourceMap.put("statementClosed_tDBRow_1", true);
				if (commitEvery_tDBRow_1 > commitCounter_tDBRow_1) {

					conn_tDBRow_1.commit();

					commitCounter_tDBRow_1 = 0;

				}
				conn_tDBRow_1.close();

				resourceMap.put("finish_tDBRow_1", true);

				ok_Hash.put("tDBRow_1", true);
				end_Hash.put("tDBRow_1", System.currentTimeMillis());

				/**
				 * [tDBRow_1 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

//////
//////
				globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

///////////////////////    			

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

				/**
				 * [tRESTClient_8 end ] start
				 */

				currentComponent = "tRESTClient_8";

				if (globalMap.get("tRESTClient_8_NB_LINE") == null) {
					globalMap.put("tRESTClient_8_NB_LINE", 1);
				}

// [tRESTCliend_end]

				ok_Hash.put("tRESTClient_8", true);
				end_Hash.put("tRESTClient_8", System.currentTimeMillis());

				/**
				 * [tRESTClient_8 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tJavaRow_5 finally ] start
				 */

				currentComponent = "tJavaRow_5";

				/**
				 * [tJavaRow_5 finally ] stop
				 */

				/**
				 * [tRESTClient_1 finally ] start
				 */

				currentComponent = "tRESTClient_1";

				/**
				 * [tRESTClient_1 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_1 finally ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				/**
				 * [tExtractJSONFields_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tRESTClient_3 finally ] start
				 */

				currentComponent = "tRESTClient_3";

				/**
				 * [tRESTClient_3 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_5 finally ] start
				 */

				currentComponent = "tExtractJSONFields_5";

				/**
				 * [tExtractJSONFields_5 finally ] stop
				 */

				/**
				 * [tDBRow_1 finally ] start
				 */

				currentComponent = "tDBRow_1";

				try {
					if (resourceMap.get("statementClosed_tDBRow_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBRow_1 = null;
						if ((pstmtToClose_tDBRow_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBRow_1")) != null) {
							pstmtToClose_tDBRow_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBRow_1") == null) {
						java.sql.Connection ctn_tDBRow_1 = null;
						if ((ctn_tDBRow_1 = (java.sql.Connection) resourceMap.get("conn_tDBRow_1")) != null) {
							try {
								ctn_tDBRow_1.close();
							} catch (java.sql.SQLException sqlEx_tDBRow_1) {
								String errorMessage_tDBRow_1 = "failed to close the connection in tDBRow_1 :"
										+ sqlEx_tDBRow_1.getMessage();
								System.err.println(errorMessage_tDBRow_1);
							}
						}
					}
				}

				/**
				 * [tDBRow_1 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

				/**
				 * [tRESTClient_8 finally ] start
				 */

				currentComponent = "tRESTClient_8";

				/**
				 * [tRESTClient_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class trash_fileStruct implements routines.system.IPersistableRow<trash_fileStruct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String view;

		public String getView() {
			return this.view;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.view = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.view, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("view=" + view);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(trash_fileStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String data;

		public String getData() {
			return this.data;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputJSON_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputJSON_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row26Struct row26 = new row26Struct();
				trash_fileStruct trash_file = new trash_fileStruct();

				/**
				 * [tAdvancedHash_trash_file begin ] start
				 */

				ok_Hash.put("tAdvancedHash_trash_file", false);
				start_Hash.put("tAdvancedHash_trash_file", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_trash_file";

				int tos_count_tAdvancedHash_trash_file = 0;

				// connection name:trash_file
				// source node:tMap_4 - inputs:(row26) outputs:(trash_file,trash_file) | target
				// node:tAdvancedHash_trash_file - inputs:(trash_file) outputs:()
				// linked node: tMap_5 - inputs:(trash_file,row28) outputs:(tMap_5_res)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_trash_file = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<trash_fileStruct> tHash_Lookup_trash_file = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<trash_fileStruct>getLookup(matchingModeEnum_trash_file);

				globalMap.put("tHash_Lookup_trash_file", tHash_Lookup_trash_file);

				/**
				 * [tAdvancedHash_trash_file begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				trash_fileStruct trash_file_tmp = new trash_fileStruct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tFileInputJSON_1 begin ] start
				 */

				ok_Hash.put("tFileInputJSON_1", false);
				start_Hash.put("tFileInputJSON_1", System.currentTimeMillis());

				currentComponent = "tFileInputJSON_1";

				int tos_count_tFileInputJSON_1 = 0;

				class JsonPathCache_tFileInputJSON_1 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				int nb_line_tFileInputJSON_1 = 0;

				JsonPathCache_tFileInputJSON_1 jsonPathCache_tFileInputJSON_1 = new JsonPathCache_tFileInputJSON_1();

				String loopPath_tFileInputJSON_1 = "$";
				java.util.List<Object> resultset_tFileInputJSON_1 = new java.util.ArrayList<Object>();

				java.io.InputStream is_tFileInputJSON_1 = null;
				com.jayway.jsonpath.ParseContext parseContext_tFileInputJSON_1 = com.jayway.jsonpath.JsonPath
						.using(com.jayway.jsonpath.Configuration.defaultConfiguration());
				Object filenameOrStream_tFileInputJSON_1 = null;
				try {
					filenameOrStream_tFileInputJSON_1 = "F:/Talend/Studio/workspace/DEMO/metadata/json/slack_drive_json/trash.json";
				} catch (java.lang.Exception e_tFileInputJSON_1) {

					System.err.println(e_tFileInputJSON_1.getMessage());
				}

				com.jayway.jsonpath.ReadContext document_tFileInputJSON_1 = null;
				try {
					if (filenameOrStream_tFileInputJSON_1 instanceof java.io.InputStream) {
						is_tFileInputJSON_1 = (java.io.InputStream) filenameOrStream_tFileInputJSON_1;
					} else {

						is_tFileInputJSON_1 = new java.io.FileInputStream((String) filenameOrStream_tFileInputJSON_1);

					}

					document_tFileInputJSON_1 = parseContext_tFileInputJSON_1.parse(is_tFileInputJSON_1, "UTF-8");
					com.jayway.jsonpath.JsonPath compiledLoopPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
							.getCompiledJsonPath(loopPath_tFileInputJSON_1);
					Object result_tFileInputJSON_1 = document_tFileInputJSON_1.read(compiledLoopPath_tFileInputJSON_1,
							net.minidev.json.JSONObject.class);
					if (result_tFileInputJSON_1 instanceof net.minidev.json.JSONArray) {
						resultset_tFileInputJSON_1 = (net.minidev.json.JSONArray) result_tFileInputJSON_1;
					} else {
						resultset_tFileInputJSON_1.add(result_tFileInputJSON_1);
					}
				} catch (java.lang.Exception e_tFileInputJSON_1) {
					System.err.println(e_tFileInputJSON_1.getMessage());
				} finally {
					if (is_tFileInputJSON_1 != null) {
						is_tFileInputJSON_1.close();
					}
				}

				String jsonPath_tFileInputJSON_1 = null;
				com.jayway.jsonpath.JsonPath compiledJsonPath_tFileInputJSON_1 = null;

				Object value_tFileInputJSON_1 = null;
				Object root_tFileInputJSON_1 = null;
				for (Object row_tFileInputJSON_1 : resultset_tFileInputJSON_1) {
					nb_line_tFileInputJSON_1++;
					row26 = null;
					boolean whetherReject_tFileInputJSON_1 = false;
					row26 = new row26Struct();

					try {
						jsonPath_tFileInputJSON_1 = "@";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {

							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);

							row26.data = value_tFileInputJSON_1 == null ?

									null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row26.data =

									null;
						}
					} catch (java.lang.Exception e_tFileInputJSON_1) {
						whetherReject_tFileInputJSON_1 = true;
						System.err.println(e_tFileInputJSON_1.getMessage());
						row26 = null;
					}
//}

					/**
					 * [tFileInputJSON_1 begin ] stop
					 */

					/**
					 * [tFileInputJSON_1 main ] start
					 */

					currentComponent = "tFileInputJSON_1";

					tos_count_tFileInputJSON_1++;

					/**
					 * [tFileInputJSON_1 main ] stop
					 */

					/**
					 * [tFileInputJSON_1 process_data_begin ] start
					 */

					currentComponent = "tFileInputJSON_1";

					/**
					 * [tFileInputJSON_1 process_data_begin ] stop
					 */
// Start of branch "row26"
					if (row26 != null) {

						/**
						 * [tMap_4 main ] start
						 */

						currentComponent = "tMap_4";

						boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_4 = false;
						boolean mainRowRejected_tMap_4 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
							// ###############################
							// # Output tables

							trash_file = null;

// # Output table : 'trash_file'
							trash_file_tmp.view = row26.data;
							trash_file = trash_file_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_4 = false;

						tos_count_tMap_4++;

						/**
						 * [tMap_4 main ] stop
						 */

						/**
						 * [tMap_4 process_data_begin ] start
						 */

						currentComponent = "tMap_4";

						/**
						 * [tMap_4 process_data_begin ] stop
						 */
// Start of branch "trash_file"
						if (trash_file != null) {

							/**
							 * [tAdvancedHash_trash_file main ] start
							 */

							currentComponent = "tAdvancedHash_trash_file";

							trash_fileStruct trash_file_HashRow = new trash_fileStruct();

							trash_file_HashRow.view = trash_file.view;

							tHash_Lookup_trash_file.put(trash_file_HashRow);

							tos_count_tAdvancedHash_trash_file++;

							/**
							 * [tAdvancedHash_trash_file main ] stop
							 */

							/**
							 * [tAdvancedHash_trash_file process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_trash_file";

							/**
							 * [tAdvancedHash_trash_file process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_trash_file process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_trash_file";

							/**
							 * [tAdvancedHash_trash_file process_data_end ] stop
							 */

						} // End of branch "trash_file"

						/**
						 * [tMap_4 process_data_end ] start
						 */

						currentComponent = "tMap_4";

						/**
						 * [tMap_4 process_data_end ] stop
						 */

					} // End of branch "row26"

					/**
					 * [tFileInputJSON_1 process_data_end ] start
					 */

					currentComponent = "tFileInputJSON_1";

					/**
					 * [tFileInputJSON_1 process_data_end ] stop
					 */

					/**
					 * [tFileInputJSON_1 end ] start
					 */

					currentComponent = "tFileInputJSON_1";

				}
				globalMap.put("tFileInputJSON_1_NB_LINE", nb_line_tFileInputJSON_1);

				ok_Hash.put("tFileInputJSON_1", true);
				end_Hash.put("tFileInputJSON_1", System.currentTimeMillis());

				/**
				 * [tFileInputJSON_1 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
// ###############################      

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_trash_file end ] start
				 */

				currentComponent = "tAdvancedHash_trash_file";

				tHash_Lookup_trash_file.endPut();

				ok_Hash.put("tAdvancedHash_trash_file", true);
				end_Hash.put("tAdvancedHash_trash_file", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_trash_file end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputJSON_1 finally ] start
				 */

				currentComponent = "tFileInputJSON_1";

				/**
				 * [tFileInputJSON_1 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_trash_file finally ] start
				 */

				currentComponent = "tAdvancedHash_trash_file";

				/**
				 * [tAdvancedHash_trash_file finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputJSON_1_SUBPROCESS_STATE", 1);
	}

	public static class view_untrashStruct implements routines.system.IPersistableRow<view_untrashStruct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String data;

		public String getData() {
			return this.data;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(view_untrashStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String data;

		public String getData() {
			return this.data;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row35Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputJSON_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputJSON_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row35Struct row35 = new row35Struct();
				view_untrashStruct view_untrash = new view_untrashStruct();

				/**
				 * [tAdvancedHash_view_untrash begin ] start
				 */

				ok_Hash.put("tAdvancedHash_view_untrash", false);
				start_Hash.put("tAdvancedHash_view_untrash", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_view_untrash";

				int tos_count_tAdvancedHash_view_untrash = 0;

				// connection name:view_untrash
				// source node:tMap_8 - inputs:(row35) outputs:(view_untrash,view_untrash) |
				// target node:tAdvancedHash_view_untrash - inputs:(view_untrash) outputs:()
				// linked node: tMap_7 - inputs:(view_untrash,row34) outputs:(tMap_7_res)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_view_untrash = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<view_untrashStruct> tHash_Lookup_view_untrash = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<view_untrashStruct>getLookup(matchingModeEnum_view_untrash);

				globalMap.put("tHash_Lookup_view_untrash", tHash_Lookup_view_untrash);

				/**
				 * [tAdvancedHash_view_untrash begin ] stop
				 */

				/**
				 * [tMap_8 begin ] start
				 */

				ok_Hash.put("tMap_8", false);
				start_Hash.put("tMap_8", System.currentTimeMillis());

				currentComponent = "tMap_8";

				int tos_count_tMap_8 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_8__Struct {
				}
				Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
				view_untrashStruct view_untrash_tmp = new view_untrashStruct();
// ###############################

				/**
				 * [tMap_8 begin ] stop
				 */

				/**
				 * [tFileInputJSON_2 begin ] start
				 */

				ok_Hash.put("tFileInputJSON_2", false);
				start_Hash.put("tFileInputJSON_2", System.currentTimeMillis());

				currentComponent = "tFileInputJSON_2";

				int tos_count_tFileInputJSON_2 = 0;

				class JsonPathCache_tFileInputJSON_2 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				int nb_line_tFileInputJSON_2 = 0;

				JsonPathCache_tFileInputJSON_2 jsonPathCache_tFileInputJSON_2 = new JsonPathCache_tFileInputJSON_2();

				String loopPath_tFileInputJSON_2 = "$";
				java.util.List<Object> resultset_tFileInputJSON_2 = new java.util.ArrayList<Object>();

				java.io.InputStream is_tFileInputJSON_2 = null;
				com.jayway.jsonpath.ParseContext parseContext_tFileInputJSON_2 = com.jayway.jsonpath.JsonPath
						.using(com.jayway.jsonpath.Configuration.defaultConfiguration());
				Object filenameOrStream_tFileInputJSON_2 = null;
				try {
					filenameOrStream_tFileInputJSON_2 = "F:/Talend/Studio/workspace/DEMO/metadata/json/slack_drive_json/untrash.json";
				} catch (java.lang.Exception e_tFileInputJSON_2) {

					System.err.println(e_tFileInputJSON_2.getMessage());
				}

				com.jayway.jsonpath.ReadContext document_tFileInputJSON_2 = null;
				try {
					if (filenameOrStream_tFileInputJSON_2 instanceof java.io.InputStream) {
						is_tFileInputJSON_2 = (java.io.InputStream) filenameOrStream_tFileInputJSON_2;
					} else {

						is_tFileInputJSON_2 = new java.io.FileInputStream((String) filenameOrStream_tFileInputJSON_2);

					}

					document_tFileInputJSON_2 = parseContext_tFileInputJSON_2.parse(is_tFileInputJSON_2, "UTF-8");
					com.jayway.jsonpath.JsonPath compiledLoopPath_tFileInputJSON_2 = jsonPathCache_tFileInputJSON_2
							.getCompiledJsonPath(loopPath_tFileInputJSON_2);
					Object result_tFileInputJSON_2 = document_tFileInputJSON_2.read(compiledLoopPath_tFileInputJSON_2,
							net.minidev.json.JSONObject.class);
					if (result_tFileInputJSON_2 instanceof net.minidev.json.JSONArray) {
						resultset_tFileInputJSON_2 = (net.minidev.json.JSONArray) result_tFileInputJSON_2;
					} else {
						resultset_tFileInputJSON_2.add(result_tFileInputJSON_2);
					}
				} catch (java.lang.Exception e_tFileInputJSON_2) {
					System.err.println(e_tFileInputJSON_2.getMessage());
				} finally {
					if (is_tFileInputJSON_2 != null) {
						is_tFileInputJSON_2.close();
					}
				}

				String jsonPath_tFileInputJSON_2 = null;
				com.jayway.jsonpath.JsonPath compiledJsonPath_tFileInputJSON_2 = null;

				Object value_tFileInputJSON_2 = null;
				Object root_tFileInputJSON_2 = null;
				for (Object row_tFileInputJSON_2 : resultset_tFileInputJSON_2) {
					nb_line_tFileInputJSON_2++;
					row35 = null;
					boolean whetherReject_tFileInputJSON_2 = false;
					row35 = new row35Struct();

					try {
						jsonPath_tFileInputJSON_2 = "@";
						compiledJsonPath_tFileInputJSON_2 = jsonPathCache_tFileInputJSON_2
								.getCompiledJsonPath(jsonPath_tFileInputJSON_2);

						try {

							value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(row_tFileInputJSON_2);

							row35.data = value_tFileInputJSON_2 == null ?

									null : value_tFileInputJSON_2.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_2) {
							row35.data =

									null;
						}
					} catch (java.lang.Exception e_tFileInputJSON_2) {
						whetherReject_tFileInputJSON_2 = true;
						System.err.println(e_tFileInputJSON_2.getMessage());
						row35 = null;
					}
//}

					/**
					 * [tFileInputJSON_2 begin ] stop
					 */

					/**
					 * [tFileInputJSON_2 main ] start
					 */

					currentComponent = "tFileInputJSON_2";

					tos_count_tFileInputJSON_2++;

					/**
					 * [tFileInputJSON_2 main ] stop
					 */

					/**
					 * [tFileInputJSON_2 process_data_begin ] start
					 */

					currentComponent = "tFileInputJSON_2";

					/**
					 * [tFileInputJSON_2 process_data_begin ] stop
					 */
// Start of branch "row35"
					if (row35 != null) {

						/**
						 * [tMap_8 main ] start
						 */

						currentComponent = "tMap_8";

						boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_8 = false;
						boolean mainRowRejected_tMap_8 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
							// ###############################
							// # Output tables

							view_untrash = null;

// # Output table : 'view_untrash'
							view_untrash_tmp.data = row35.data;
							view_untrash = view_untrash_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_8 = false;

						tos_count_tMap_8++;

						/**
						 * [tMap_8 main ] stop
						 */

						/**
						 * [tMap_8 process_data_begin ] start
						 */

						currentComponent = "tMap_8";

						/**
						 * [tMap_8 process_data_begin ] stop
						 */
// Start of branch "view_untrash"
						if (view_untrash != null) {

							/**
							 * [tAdvancedHash_view_untrash main ] start
							 */

							currentComponent = "tAdvancedHash_view_untrash";

							view_untrashStruct view_untrash_HashRow = new view_untrashStruct();

							view_untrash_HashRow.data = view_untrash.data;

							tHash_Lookup_view_untrash.put(view_untrash_HashRow);

							tos_count_tAdvancedHash_view_untrash++;

							/**
							 * [tAdvancedHash_view_untrash main ] stop
							 */

							/**
							 * [tAdvancedHash_view_untrash process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_view_untrash";

							/**
							 * [tAdvancedHash_view_untrash process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_view_untrash process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_view_untrash";

							/**
							 * [tAdvancedHash_view_untrash process_data_end ] stop
							 */

						} // End of branch "view_untrash"

						/**
						 * [tMap_8 process_data_end ] start
						 */

						currentComponent = "tMap_8";

						/**
						 * [tMap_8 process_data_end ] stop
						 */

					} // End of branch "row35"

					/**
					 * [tFileInputJSON_2 process_data_end ] start
					 */

					currentComponent = "tFileInputJSON_2";

					/**
					 * [tFileInputJSON_2 process_data_end ] stop
					 */

					/**
					 * [tFileInputJSON_2 end ] start
					 */

					currentComponent = "tFileInputJSON_2";

				}
				globalMap.put("tFileInputJSON_2_NB_LINE", nb_line_tFileInputJSON_2);

				ok_Hash.put("tFileInputJSON_2", true);
				end_Hash.put("tFileInputJSON_2", System.currentTimeMillis());

				/**
				 * [tFileInputJSON_2 end ] stop
				 */

				/**
				 * [tMap_8 end ] start
				 */

				currentComponent = "tMap_8";

// ###############################
// # Lookup hashes releasing
// ###############################      

				ok_Hash.put("tMap_8", true);
				end_Hash.put("tMap_8", System.currentTimeMillis());

				/**
				 * [tMap_8 end ] stop
				 */

				/**
				 * [tAdvancedHash_view_untrash end ] start
				 */

				currentComponent = "tAdvancedHash_view_untrash";

				tHash_Lookup_view_untrash.endPut();

				ok_Hash.put("tAdvancedHash_view_untrash", true);
				end_Hash.put("tAdvancedHash_view_untrash", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_view_untrash end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputJSON_2 finally ] start
				 */

				currentComponent = "tFileInputJSON_2";

				/**
				 * [tFileInputJSON_2 finally ] stop
				 */

				/**
				 * [tMap_8 finally ] start
				 */

				currentComponent = "tMap_8";

				/**
				 * [tMap_8 finally ] stop
				 */

				/**
				 * [tAdvancedHash_view_untrash finally ] start
				 */

				currentComponent = "tAdvancedHash_view_untrash";

				/**
				 * [tAdvancedHash_view_untrash finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputJSON_2_SUBPROCESS_STATE", 1);
	}

	public static class row38Struct implements routines.system.IPersistableRow<row38Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String url;

		public String getUrl() {
			return this.url;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.url = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.url, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("url=" + url);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row38Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row37Struct implements routines.system.IPersistableRow<row37Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String submit_type;

		public String getSubmit_type() {
			return this.submit_type;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String file_trash;

		public String getFile_trash() {
			return this.file_trash;
		}

		public String file_untrash;

		public String getFile_untrash() {
			return this.file_untrash;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.submit_type = readString(dis);

					this.type = readString(dis);

					this.file_trash = readString(dis);

					this.file_untrash = readString(dis);

					this.title = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.submit_type, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.file_trash, dos);

				// String

				writeString(this.file_untrash, dos);

				// String

				writeString(this.title, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("submit_type=" + submit_type);
			sb.append(",type=" + type);
			sb.append(",file_trash=" + file_trash);
			sb.append(",file_untrash=" + file_untrash);
			sb.append(",title=" + title);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row37Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class type_submitStruct implements routines.system.IPersistableRow<type_submitStruct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String submit_type;

		public String getSubmit_type() {
			return this.submit_type;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String file_trash;

		public String getFile_trash() {
			return this.file_trash;
		}

		public String file_untrash;

		public String getFile_untrash() {
			return this.file_untrash;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.submit_type = readString(dis);

					this.type = readString(dis);

					this.file_trash = readString(dis);

					this.file_untrash = readString(dis);

					this.title = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.submit_type, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.file_trash, dos);

				// String

				writeString(this.file_untrash, dos);

				// String

				writeString(this.title, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("submit_type=" + submit_type);
			sb.append(",type=" + type);
			sb.append(",file_trash=" + file_trash);
			sb.append(",file_untrash=" + file_untrash);
			sb.append(",title=" + title);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(type_submitStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class submit_resStruct implements routines.system.IPersistableRow<submit_resStruct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String newColumn;

		public String getNewColumn() {
			return this.newColumn;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.newColumn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.newColumn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("newColumn=" + newColumn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(submit_resStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String file_trash;

		public String getFile_trash() {
			return this.file_trash;
		}

		public String file_untrash;

		public String getFile_untrash() {
			return this.file_untrash;
		}

		public String view_id;

		public String getView_id() {
			return this.view_id;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String submit_type;

		public String getSubmit_type() {
			return this.submit_type;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.file_trash = readString(dis);

					this.file_untrash = readString(dis);

					this.view_id = readString(dis);

					this.type = readString(dis);

					this.submit_type = readString(dis);

					this.title = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.file_trash, dos);

				// String

				writeString(this.file_untrash, dos);

				// String

				writeString(this.view_id, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.submit_type, dos);

				// String

				writeString(this.title, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("file_trash=" + file_trash);
			sb.append(",file_untrash=" + file_untrash);
			sb.append(",view_id=" + view_id);
			sb.append(",type=" + type);
			sb.append(",submit_type=" + submit_type);
			sb.append(",title=" + title);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row36Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public Integer statusCode;

		public Integer getStatusCode() {
			return this.statusCode;
		}

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.statusCode = readInteger(dis);

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.statusCode, dos);

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("statusCode=" + String.valueOf(statusCode));
			sb.append(",body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String action_id;

		public String getAction_id() {
			return this.action_id;
		}

		public String block_id;

		public String getBlock_id() {
			return this.block_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.action_id = readString(dis);

					this.block_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.action_id, dos);

				// String

				writeString(this.block_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("action_id=" + action_id);
			sb.append(",block_id=" + block_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public Integer statusCode;

		public Integer getStatusCode() {
			return this.statusCode;
		}

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.statusCode = readInteger(dis);

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.statusCode, dos);

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("statusCode=" + String.valueOf(statusCode));
			sb.append(",body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row33Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String action_id;

		public String getAction_id() {
			return this.action_id;
		}

		public String block_id;

		public String getBlock_id() {
			return this.block_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.action_id = readString(dis);

					this.block_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.action_id, dos);

				// String

				writeString(this.block_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("action_id=" + action_id);
			sb.append(",block_id=" + block_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class load_file_trashedStruct implements routines.system.IPersistableRow<load_file_trashedStruct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String action_id;

		public String getAction_id() {
			return this.action_id;
		}

		public String block_id;

		public String getBlock_id() {
			return this.block_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.action_id = readString(dis);

					this.block_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.action_id, dos);

				// String

				writeString(this.block_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("action_id=" + action_id);
			sb.append(",block_id=" + block_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(load_file_trashedStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class load_file_not_trashStruct
			implements routines.system.IPersistableRow<load_file_not_trashStruct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String action_id;

		public String getAction_id() {
			return this.action_id;
		}

		public String block_id;

		public String getBlock_id() {
			return this.block_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.action_id = readString(dis);

					this.block_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.action_id, dos);

				// String

				writeString(this.block_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("action_id=" + action_id);
			sb.append(",block_id=" + block_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(load_file_not_trashStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String action_id;

		public String getAction_id() {
			return this.action_id;
		}

		public String block_id;

		public String getBlock_id() {
			return this.block_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.action_id = readString(dis);

					this.block_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.action_id, dos);

				// String

				writeString(this.block_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("action_id=" + action_id);
			sb.append(",block_id=" + block_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row29Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String string;

		public String getString() {
			return this.string;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public Integer statusCode;

		public Integer getStatusCode() {
			return this.statusCode;
		}

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.statusCode = readInteger(dis);

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.statusCode, dos);

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("statusCode=" + String.valueOf(statusCode));
			sb.append(",body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String parentId;

		public String getParentId() {
			return this.parentId;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.parentId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.parentId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("parentId=" + parentId);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String mimeType;

		public String getMimeType() {
			return this.mimeType;
		}

		public String parentId;

		public String getParentId() {
			return this.parentId;
		}

		public String webViewLink;

		public String getWebViewLink() {
			return this.webViewLink;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String trashed;

		public String getTrashed() {
			return this.trashed;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.mimeType = readString(dis);

					this.parentId = readString(dis);

					this.webViewLink = readString(dis);

					this.id = readString(dis);

					this.name = readString(dis);

					this.trashed = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.mimeType, dos);

				// String

				writeString(this.parentId, dos);

				// String

				writeString(this.webViewLink, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.trashed, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mimeType=" + mimeType);
			sb.append(",parentId=" + parentId);
			sb.append(",webViewLink=" + webViewLink);
			sb.append(",id=" + id);
			sb.append(",name=" + name);
			sb.append(",trashed=" + trashed);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public Integer statusCode;

		public Integer getStatusCode() {
			return this.statusCode;
		}

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.statusCode = readInteger(dis);

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.statusCode, dos);

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("statusCode=" + String.valueOf(statusCode));
			sb.append(",body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String fileId;

		public String getFileId() {
			return this.fileId;
		}

		public String removed;

		public String getRemoved() {
			return this.removed;
		}

		public String fileName;

		public String getFileName() {
			return this.fileName;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.fileId = readString(dis);

					this.removed = readString(dis);

					this.fileName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.fileId, dos);

				// String

				writeString(this.removed, dos);

				// String

				writeString(this.fileName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("fileId=" + fileId);
			sb.append(",removed=" + removed);
			sb.append(",fileName=" + fileName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String string;

		public String getString() {
			return this.string;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String fileId;

		public String getFileId() {
			return this.fileId;
		}

		public String removed;

		public String getRemoved() {
			return this.removed;
		}

		public String fileName;

		public String getFileName() {
			return this.fileName;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.fileId = readString(dis);

					this.removed = readString(dis);

					this.fileName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.fileId, dos);

				// String

				writeString(this.removed, dos);

				// String

				writeString(this.fileName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("fileId=" + fileId);
			sb.append(",removed=" + removed);
			sb.append(",fileName=" + fileName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class file_removed_to_trachStruct
			implements routines.system.IPersistableRow<file_removed_to_trachStruct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String fileId;

		public String getFileId() {
			return this.fileId;
		}

		public String removed;

		public String getRemoved() {
			return this.removed;
		}

		public String fileName;

		public String getFileName() {
			return this.fileName;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.fileId = readString(dis);

					this.removed = readString(dis);

					this.fileName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.fileId, dos);

				// String

				writeString(this.removed, dos);

				// String

				writeString(this.fileName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("fileId=" + fileId);
			sb.append(",removed=" + removed);
			sb.append(",fileName=" + fileName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(file_removed_to_trachStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class file_changeStruct implements routines.system.IPersistableRow<file_changeStruct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String fileId;

		public String getFileId() {
			return this.fileId;
		}

		public String removed;

		public String getRemoved() {
			return this.removed;
		}

		public String fileName;

		public String getFileName() {
			return this.fileName;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.fileId = readString(dis);

					this.removed = readString(dis);

					this.fileName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.fileId, dos);

				// String

				writeString(this.removed, dos);

				// String

				writeString(this.fileName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("fileId=" + fileId);
			sb.append(",removed=" + removed);
			sb.append(",fileName=" + fileName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(file_changeStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class responseStruct implements routines.system.IPersistableRow<responseStruct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(responseStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String fileId;

		public String getFileId() {
			return this.fileId;
		}

		public String removed;

		public String getRemoved() {
			return this.removed;
		}

		public String fileName;

		public String getFileName() {
			return this.fileName;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.fileId = readString(dis);

					this.removed = readString(dis);

					this.fileName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.fileId, dos);

				// String

				writeString(this.removed, dos);

				// String

				writeString(this.fileName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("fileId=" + fileId);
			sb.append(",removed=" + removed);
			sb.append(",fileName=" + fileName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String body;

		public String getBody() {
			return this.body;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.body = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.body, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + body);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tMap_7_resStruct implements routines.system.IPersistableRow<tMap_7_resStruct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String trigger_id;

		public String getTrigger_id() {
			return this.trigger_id;
		}

		public String view;

		public String getView() {
			return this.view;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.trigger_id = readString(dis);

					this.view = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.trigger_id, dos);

				// String

				writeString(this.view, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("trigger_id=" + trigger_id);
			sb.append(",view=" + view);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tMap_7_resStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String text_command;

		public String getText_command() {
			return this.text_command;
		}

		public String trigger_id;

		public String getTrigger_id() {
			return this.trigger_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.text_command = readString(dis);

					this.trigger_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.text_command, dos);

				// String

				writeString(this.trigger_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("text_command=" + text_command);
			sb.append(",trigger_id=" + trigger_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row34Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tMap_5_resStruct implements routines.system.IPersistableRow<tMap_5_resStruct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String trigger_id;

		public String getTrigger_id() {
			return this.trigger_id;
		}

		public String view;

		public String getView() {
			return this.view;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.trigger_id = readString(dis);

					this.view = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.trigger_id, dos);

				// String

				writeString(this.view, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("trigger_id=" + trigger_id);
			sb.append(",view=" + view);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tMap_5_resStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String text_command;

		public String getText_command() {
			return this.text_command;
		}

		public String trigger_id;

		public String getTrigger_id() {
			return this.trigger_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.text_command = readString(dis);

					this.trigger_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.text_command, dos);

				// String

				writeString(this.trigger_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("text_command=" + text_command);
			sb.append(",trigger_id=" + trigger_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String text_command;

		public String getText_command() {
			return this.text_command;
		}

		public String trigger_id;

		public String getTrigger_id() {
			return this.trigger_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.text_command = readString(dis);

					this.trigger_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.text_command, dos);

				// String

				writeString(this.trigger_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("text_command=" + text_command);
			sb.append(",trigger_id=" + trigger_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class getAllStruct implements routines.system.IPersistableRow<getAllStruct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String text_command;

		public String getText_command() {
			return this.text_command;
		}

		public String trigger_id;

		public String getTrigger_id() {
			return this.trigger_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.text_command = readString(dis);

					this.trigger_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.text_command, dos);

				// String

				writeString(this.trigger_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("text_command=" + text_command);
			sb.append(",trigger_id=" + trigger_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(getAllStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class trashStruct implements routines.system.IPersistableRow<trashStruct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String text_command;

		public String getText_command() {
			return this.text_command;
		}

		public String trigger_id;

		public String getTrigger_id() {
			return this.trigger_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.text_command = readString(dis);

					this.trigger_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.text_command, dos);

				// String

				writeString(this.trigger_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("text_command=" + text_command);
			sb.append(",trigger_id=" + trigger_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(trashStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class untrashStruct implements routines.system.IPersistableRow<untrashStruct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String text_command;

		public String getText_command() {
			return this.text_command;
		}

		public String trigger_id;

		public String getTrigger_id() {
			return this.trigger_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.text_command = readString(dis);

					this.trigger_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.text_command, dos);

				// String

				writeString(this.trigger_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("text_command=" + text_command);
			sb.append(",trigger_id=" + trigger_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(untrashStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String text_command;

		public String getText_command() {
			return this.text_command;
		}

		public String trigger_id;

		public String getTrigger_id() {
			return this.trigger_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.text_command = readString(dis);

					this.trigger_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.text_command, dos);

				// String

				writeString(this.trigger_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("text_command=" + text_command);
			sb.append(",trigger_id=" + trigger_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class slack_comment_driveStruct
			implements routines.system.IPersistableRow<slack_comment_driveStruct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String body;

		public String getBody() {
			return this.body;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.body = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.body, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + body);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(slack_comment_driveStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class drive_webhook_subcribeStruct
			implements routines.system.IPersistableRow<drive_webhook_subcribeStruct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String body;

		public String getBody() {
			return this.body;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.body = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.body, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + body);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(drive_webhook_subcribeStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class load_select_optionStruct implements routines.system.IPersistableRow<load_select_optionStruct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String body;

		public String getBody() {
			return this.body;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.body = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.body, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + body);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(load_select_optionStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class interactivity_componentStruct
			implements routines.system.IPersistableRow<interactivity_componentStruct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String body;

		public String getBody() {
			return this.body;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.body = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.body, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + body);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(interactivity_componentStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tRESTRequest_1Struct
			implements routines.system.IPersistableRow<after_tRESTRequest_1Struct> {
		final static byte[] commonByteArrayLock_DEMO_drive_slack = new byte[0];
		static byte[] commonByteArray_DEMO_drive_slack = new byte[0];

		public String uri;

		public String getUri() {
			return this.uri;
		}

		public String method;

		public String getMethod() {
			return this.method;
		}

		public Integer status;

		public Integer getStatus() {
			return this.status;
		}

		public String error;

		public String getError() {
			return this.error;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_drive_slack.length) {
					if (length < 1024 && commonByteArray_DEMO_drive_slack.length == 0) {
						commonByteArray_DEMO_drive_slack = new byte[1024];
					} else {
						commonByteArray_DEMO_drive_slack = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_drive_slack, 0, length);
				strReturn = new String(commonByteArray_DEMO_drive_slack, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_drive_slack) {

				try {

					int length = 0;

					this.uri = readString(dis);

					this.method = readString(dis);

					this.status = readInteger(dis);

					this.error = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.uri, dos);

				// String

				writeString(this.method, dos);

				// Integer

				writeInteger(this.status, dos);

				// String

				writeString(this.error, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("uri=" + uri);
			sb.append(",method=" + method);
			sb.append(",status=" + String.valueOf(status));
			sb.append(",error=" + error);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tRESTRequest_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRESTRequest_1_LoopProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRESTRequest_1_Loop_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputJSON_2Process(globalMap);
				tFileInputJSON_1Process(globalMap);

				slack_comment_driveStruct slack_comment_drive = new slack_comment_driveStruct();
				row5Struct row5 = new row5Struct();
				getAllStruct getAll = new getAllStruct();
				row25Struct row25 = new row25Struct();
				trashStruct trash = new trashStruct();
				row28Struct row28 = new row28Struct();
				tMap_5_resStruct tMap_5_res = new tMap_5_resStruct();
				untrashStruct untrash = new untrashStruct();
				row34Struct row34 = new row34Struct();
				tMap_7_resStruct tMap_7_res = new tMap_7_resStruct();
				drive_webhook_subcribeStruct drive_webhook_subcribe = new drive_webhook_subcribeStruct();
				drive_webhook_subcribeStruct row27 = drive_webhook_subcribe;
				row15Struct row15 = new row15Struct();
				file_removed_to_trachStruct file_removed_to_trach = new file_removed_to_trachStruct();
				row17Struct row17 = new row17Struct();
				row18Struct row18 = new row18Struct();
				file_changeStruct file_change = new file_changeStruct();
				row19Struct row19 = new row19Struct();
				row16Struct row16 = new row16Struct();
				row20Struct row20 = new row20Struct();
				row21Struct row21 = new row21Struct();
				row22Struct row22 = new row22Struct();
				row23Struct row23 = new row23Struct();
				row24Struct row24 = new row24Struct();
				responseStruct response = new responseStruct();
				load_select_optionStruct load_select_option = new load_select_optionStruct();
				row29Struct row29 = new row29Struct();
				load_file_trashedStruct load_file_trashed = new load_file_trashedStruct();
				row32Struct row32 = new row32Struct();
				row33Struct row33 = new row33Struct();
				load_file_not_trashStruct load_file_not_trash = new load_file_not_trashStruct();
				row30Struct row30 = new row30Struct();
				row31Struct row31 = new row31Struct();
				interactivity_componentStruct interactivity_component = new interactivity_componentStruct();
				row36Struct row36 = new row36Struct();
				type_submitStruct type_submit = new type_submitStruct();
				row37Struct row37 = new row37Struct();
				row38Struct row38 = new row38Struct();
				submit_resStruct submit_res = new submit_resStruct();

				/**
				 * [tRESTRequest_1_Loop begin ] start
				 */

				int NB_ITERATE_tRESTRequest_1_In = 0; // for statistics

				ok_Hash.put("tRESTRequest_1_Loop", false);
				start_Hash.put("tRESTRequest_1_Loop", System.currentTimeMillis());

				currentVirtualComponent = "tRESTRequest_1";

				currentComponent = "tRESTRequest_1_Loop";

				int tos_count_tRESTRequest_1_Loop = 0;

				interactivity_component = null;

				load_select_option = null;

				drive_webhook_subcribe = null;

				slack_comment_drive = null;

				int nb_line_tRESTRequest_1 = 0;

				try {

					java.util.Map<String, Object> requestMessage_tRESTRequest_1 = (java.util.Map<String, Object>) globalMap
							.get("restRequest");

					restEndpoint = getRestEndpoint();

					if (null == requestMessage_tRESTRequest_1) {

						if (restTalendJobAlreadyStarted) {
							throw new RuntimeException("request is not provided");
						} else {
							if (!runInTalendEsbRuntimeContainer && null == thread4RestServiceProviderEndpoint) {
								String endpointUrl_tRESTRequest_1 = checkEndpointUrl(restEndpoint);
								// *** external thread for endpoint initialization
								thread4RestServiceProviderEndpoint = new Thread4RestServiceProviderEndpoint(this,
										endpointUrl_tRESTRequest_1);
								thread4RestServiceProviderEndpoint.start();
								// *** external thread for endpoint initialization
							}

							restTalendJobAlreadyStarted = true;

							if (runInDaemonMode) {
								Thread.currentThread();
								try {
									while (true) {
										Thread.sleep(60000);
									}
								} catch (InterruptedException e_tRESTRequest_1) {
									// e_tRESTRequest_1.printStackTrace();
									// throw new TalendException(e_tRESTRequest_1, "wholeJob", globalMap);
								}
							}
						}
						return;
					}

					requestMessage_tRESTRequest_1.put("CURRENT_MESSAGE",
							org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage());

					Object ctx_tRESTRequest_1 = requestMessage_tRESTRequest_1.get("MESSAGE_CONTEXT");
					if (ctx_tRESTRequest_1 != null
							&& ctx_tRESTRequest_1 instanceof org.apache.cxf.jaxrs.impl.tl.ThreadLocalMessageContext) {
						requestMessage_tRESTRequest_1.put("MESSAGE_CONTEXT",
								((org.apache.cxf.jaxrs.impl.tl.ThreadLocalMessageContext) ctx_tRESTRequest_1).get());
					}

					/**
					 * [tRESTRequest_1_Loop begin ] stop
					 */

					/**
					 * [tRESTRequest_1_Loop main ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_Loop";

					tos_count_tRESTRequest_1_Loop++;

					/**
					 * [tRESTRequest_1_Loop main ] stop
					 */

					/**
					 * [tRESTRequest_1_Loop process_data_begin ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_Loop";

					/**
					 * [tRESTRequest_1_Loop process_data_begin ] stop
					 */
					NB_ITERATE_tRESTRequest_1_In++;

					/**
					 * [tLogRow_4 begin ] start
					 */

					ok_Hash.put("tLogRow_4", false);
					start_Hash.put("tLogRow_4", System.currentTimeMillis());

					currentComponent = "tLogRow_4";

					int tos_count_tLogRow_4 = 0;

					///////////////////////

					class Util_tLogRow_4 {

						String[] des_top = { ".", "-" };

						String[] des_data = { "-", "+" };

						String[] des_frame = { "|" };

						public void printLine(StringBuilder sb, int titleWidth, int dataWidth) {

							sb.append("+");
							for (int i = 0; i < titleWidth + 2; i++)
								sb.append("-");
							sb.append("+");
							for (int i = 0; i < dataWidth + 2; i++)
								sb.append("-");
							sb.append("+" + "\n");
						}

						public String print(String[] row, int nbLine) {

							StringBuilder sb = new StringBuilder();

							String title = "#" + nbLine + ". " + "tLogRow_4";

							// step 1: get the max length of all the row[] member;
							int dataWidth = 5; // the length of the string "value"
							for (int i = 0; i < row.length; i++) {
								if (row[i] == null && 4 > dataWidth) {
									dataWidth = 4;
								} else if (row[i] != null && row[i].length() > dataWidth)
									dataWidth = row[i].length();
							}

							int titleWidth = 12;

							int totalWidth = dataWidth + titleWidth + 5;

							// step 2: print the header with line number
							sb.append(".");
							for (int i = 0; i < totalWidth; i++)
								sb.append("-");
							sb.append("." + "\n" + "|");

							int emptyCenterWidth = (totalWidth - title.length()) / 2;
							for (int i = 0; i < emptyCenterWidth; i++)
								sb.append(" ");
							sb.append(title);
							for (int i = 0; i < totalWidth - emptyCenterWidth - title.length(); i++)
								sb.append(" ");
							sb.append("|" + "\n");

							// step 3: print "key" and "value"
							printLine(sb, titleWidth, dataWidth);

							sb.append("|" + " key");
							for (int i = 0; i < titleWidth - 2; i++)
								sb.append(" ");
							sb.append("|" + " value");
							for (int i = 0; i < dataWidth - 4; i++)
								sb.append(" ");
							sb.append("|" + "\n");

							printLine(sb, titleWidth, dataWidth);

							// step 4: print dataset

							// for(int i=0; i<row.length; i++){
							sb.append("| " + "text_command");
							for (int i = 0; i < titleWidth - "text_command".length() + 1; i++)
								sb.append(" ");
							sb.append("| " + row[0]);
							for (int i = 0; row[0] == null && i < dataWidth - 3
									|| row[0] != null && i < dataWidth - row[0].length() + 1; i++)
								sb.append(" ");
							sb.append("|" + "\n");

							// }

							// for(int i=0; i<row.length; i++){
							sb.append("| " + "trigger_id");
							for (int i = 0; i < titleWidth - "trigger_id".length() + 1; i++)
								sb.append(" ");
							sb.append("| " + row[1]);
							for (int i = 0; row[1] == null && i < dataWidth - 3
									|| row[1] != null && i < dataWidth - row[1].length() + 1; i++)
								sb.append(" ");
							sb.append("|" + "\n");

							// }

							// step 5: print a line gap
							printLine(sb, titleWidth, dataWidth);
							return sb.toString();

						}

					}

					Util_tLogRow_4 util_tLogRow_4 = new Util_tLogRow_4();

					java.io.PrintStream consoleOut_tLogRow_4 = null;
					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_4);
					}

					StringBuilder strBuffer_tLogRow_4 = null;
					int nb_line_tLogRow_4 = 0;
///////////////////////    			

					/**
					 * [tLogRow_4 begin ] stop
					 */

					/**
					 * [tFilterRow_1 begin ] start
					 */

					ok_Hash.put("tFilterRow_1", false);
					start_Hash.put("tFilterRow_1", System.currentTimeMillis());

					currentComponent = "tFilterRow_1";

					int tos_count_tFilterRow_1 = 0;

					int nb_line_tFilterRow_1 = 0;
					int nb_line_ok_tFilterRow_1 = 0;
					int nb_line_reject_tFilterRow_1 = 0;

					class Operator_tFilterRow_1 {
						private String sErrorMsg = "";
						private boolean bMatchFlag = true;
						private String sUnionFlag = "&&";

						public Operator_tFilterRow_1(String unionFlag) {
							sUnionFlag = unionFlag;
							bMatchFlag = "||".equals(unionFlag) ? false : true;
						}

						public String getErrorMsg() {
							if (sErrorMsg != null && sErrorMsg.length() > 1)
								return sErrorMsg.substring(1);
							else
								return null;
						}

						public boolean getMatchFlag() {
							return bMatchFlag;
						}

						public void matches(boolean partMatched, String reason) {
							// no need to care about the next judgement
							if ("||".equals(sUnionFlag) && bMatchFlag) {
								return;
							}

							if (!partMatched) {
								sErrorMsg += "|" + reason;
							}

							if ("||".equals(sUnionFlag))
								bMatchFlag = bMatchFlag || partMatched;
							else
								bMatchFlag = bMatchFlag && partMatched;
						}
					}

					/**
					 * [tFilterRow_1 begin ] stop
					 */

					/**
					 * [tRESTClient_9 begin ] start
					 */

					ok_Hash.put("tRESTClient_9", false);
					start_Hash.put("tRESTClient_9", System.currentTimeMillis());

					currentComponent = "tRESTClient_9";

					int tos_count_tRESTClient_9 = 0;

					/**
					 * [tRESTClient_9 begin ] stop
					 */

					/**
					 * [tMap_5 begin ] start
					 */

					ok_Hash.put("tMap_5", false);
					start_Hash.put("tMap_5", System.currentTimeMillis());

					currentComponent = "tMap_5";

					int tos_count_tMap_5 = 0;

// ###############################
// # Lookup's keys initialization

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<trash_fileStruct> tHash_Lookup_trash_file = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<trash_fileStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<trash_fileStruct>) globalMap
							.get("tHash_Lookup_trash_file"));

					tHash_Lookup_trash_file.initGet();

					trash_fileStruct trash_fileHashKey = new trash_fileStruct();
					trash_fileStruct trash_fileDefault = new trash_fileStruct();
// ###############################        

// ###############################
// # Vars initialization
					class Var__tMap_5__Struct {
					}
					Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
					tMap_5_resStruct tMap_5_res_tmp = new tMap_5_resStruct();
// ###############################

					/**
					 * [tMap_5 begin ] stop
					 */

					/**
					 * [tFilterRow_5 begin ] start
					 */

					ok_Hash.put("tFilterRow_5", false);
					start_Hash.put("tFilterRow_5", System.currentTimeMillis());

					currentComponent = "tFilterRow_5";

					int tos_count_tFilterRow_5 = 0;

					int nb_line_tFilterRow_5 = 0;
					int nb_line_ok_tFilterRow_5 = 0;
					int nb_line_reject_tFilterRow_5 = 0;

					class Operator_tFilterRow_5 {
						private String sErrorMsg = "";
						private boolean bMatchFlag = true;
						private String sUnionFlag = "&&";

						public Operator_tFilterRow_5(String unionFlag) {
							sUnionFlag = unionFlag;
							bMatchFlag = "||".equals(unionFlag) ? false : true;
						}

						public String getErrorMsg() {
							if (sErrorMsg != null && sErrorMsg.length() > 1)
								return sErrorMsg.substring(1);
							else
								return null;
						}

						public boolean getMatchFlag() {
							return bMatchFlag;
						}

						public void matches(boolean partMatched, String reason) {
							// no need to care about the next judgement
							if ("||".equals(sUnionFlag) && bMatchFlag) {
								return;
							}

							if (!partMatched) {
								sErrorMsg += "|" + reason;
							}

							if ("||".equals(sUnionFlag))
								bMatchFlag = bMatchFlag || partMatched;
							else
								bMatchFlag = bMatchFlag && partMatched;
						}
					}

					/**
					 * [tFilterRow_5 begin ] stop
					 */

					/**
					 * [tRESTClient_12 begin ] start
					 */

					ok_Hash.put("tRESTClient_12", false);
					start_Hash.put("tRESTClient_12", System.currentTimeMillis());

					currentComponent = "tRESTClient_12";

					int tos_count_tRESTClient_12 = 0;

					/**
					 * [tRESTClient_12 begin ] stop
					 */

					/**
					 * [tMap_7 begin ] start
					 */

					ok_Hash.put("tMap_7", false);
					start_Hash.put("tMap_7", System.currentTimeMillis());

					currentComponent = "tMap_7";

					int tos_count_tMap_7 = 0;

// ###############################
// # Lookup's keys initialization

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<view_untrashStruct> tHash_Lookup_view_untrash = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<view_untrashStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<view_untrashStruct>) globalMap
							.get("tHash_Lookup_view_untrash"));

					tHash_Lookup_view_untrash.initGet();

					view_untrashStruct view_untrashHashKey = new view_untrashStruct();
					view_untrashStruct view_untrashDefault = new view_untrashStruct();
// ###############################        

// ###############################
// # Vars initialization
					class Var__tMap_7__Struct {
					}
					Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
					tMap_7_resStruct tMap_7_res_tmp = new tMap_7_resStruct();
// ###############################

					/**
					 * [tMap_7 begin ] stop
					 */

					/**
					 * [tFilterRow_8 begin ] start
					 */

					ok_Hash.put("tFilterRow_8", false);
					start_Hash.put("tFilterRow_8", System.currentTimeMillis());

					currentComponent = "tFilterRow_8";

					int tos_count_tFilterRow_8 = 0;

					int nb_line_tFilterRow_8 = 0;
					int nb_line_ok_tFilterRow_8 = 0;
					int nb_line_reject_tFilterRow_8 = 0;

					class Operator_tFilterRow_8 {
						private String sErrorMsg = "";
						private boolean bMatchFlag = true;
						private String sUnionFlag = "&&";

						public Operator_tFilterRow_8(String unionFlag) {
							sUnionFlag = unionFlag;
							bMatchFlag = "||".equals(unionFlag) ? false : true;
						}

						public String getErrorMsg() {
							if (sErrorMsg != null && sErrorMsg.length() > 1)
								return sErrorMsg.substring(1);
							else
								return null;
						}

						public boolean getMatchFlag() {
							return bMatchFlag;
						}

						public void matches(boolean partMatched, String reason) {
							// no need to care about the next judgement
							if ("||".equals(sUnionFlag) && bMatchFlag) {
								return;
							}

							if (!partMatched) {
								sErrorMsg += "|" + reason;
							}

							if ("||".equals(sUnionFlag))
								bMatchFlag = bMatchFlag || partMatched;
							else
								bMatchFlag = bMatchFlag && partMatched;
						}
					}

					/**
					 * [tFilterRow_8 begin ] stop
					 */

					/**
					 * [tMap_3 begin ] start
					 */

					ok_Hash.put("tMap_3", false);
					start_Hash.put("tMap_3", System.currentTimeMillis());

					currentComponent = "tMap_3";

					int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
					class Var__tMap_3__Struct {
					}
					Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
					getAllStruct getAll_tmp = new getAllStruct();
					trashStruct trash_tmp = new trashStruct();
					untrashStruct untrash_tmp = new untrashStruct();
// ###############################

					/**
					 * [tMap_3 begin ] stop
					 */

					/**
					 * [tExtractJSONFields_2 begin ] start
					 */

					ok_Hash.put("tExtractJSONFields_2", false);
					start_Hash.put("tExtractJSONFields_2", System.currentTimeMillis());

					currentComponent = "tExtractJSONFields_2";

					int tos_count_tExtractJSONFields_2 = 0;

					int nb_line_tExtractJSONFields_2 = 0;
					String jsonStr_tExtractJSONFields_2 = "";

					class JsonPathCache_tExtractJSONFields_2 {
						final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

						public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
							if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
								return jsonPathString2compiledJsonPath.get(jsonPath);
							} else {
								com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
										.compile(jsonPath);
								jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
								return compiledLoopPath;
							}
						}
					}

					JsonPathCache_tExtractJSONFields_2 jsonPathCache_tExtractJSONFields_2 = new JsonPathCache_tExtractJSONFields_2();

					/**
					 * [tExtractJSONFields_2 begin ] stop
					 */

					/**
					 * [tRESTClient_5 begin ] start
					 */

					ok_Hash.put("tRESTClient_5", false);
					start_Hash.put("tRESTClient_5", System.currentTimeMillis());

					currentComponent = "tRESTClient_5";

					int tos_count_tRESTClient_5 = 0;

					/**
					 * [tRESTClient_5 begin ] stop
					 */

					/**
					 * [tJavaRow_2 begin ] start
					 */

					ok_Hash.put("tJavaRow_2", false);
					start_Hash.put("tJavaRow_2", System.currentTimeMillis());

					currentComponent = "tJavaRow_2";

					int tos_count_tJavaRow_2 = 0;

					int nb_line_tJavaRow_2 = 0;

					/**
					 * [tJavaRow_2 begin ] stop
					 */

					/**
					 * [tFilterRow_4 begin ] start
					 */

					ok_Hash.put("tFilterRow_4", false);
					start_Hash.put("tFilterRow_4", System.currentTimeMillis());

					currentComponent = "tFilterRow_4";

					int tos_count_tFilterRow_4 = 0;

					int nb_line_tFilterRow_4 = 0;
					int nb_line_ok_tFilterRow_4 = 0;
					int nb_line_reject_tFilterRow_4 = 0;

					class Operator_tFilterRow_4 {
						private String sErrorMsg = "";
						private boolean bMatchFlag = true;
						private String sUnionFlag = "&&";

						public Operator_tFilterRow_4(String unionFlag) {
							sUnionFlag = unionFlag;
							bMatchFlag = "||".equals(unionFlag) ? false : true;
						}

						public String getErrorMsg() {
							if (sErrorMsg != null && sErrorMsg.length() > 1)
								return sErrorMsg.substring(1);
							else
								return null;
						}

						public boolean getMatchFlag() {
							return bMatchFlag;
						}

						public void matches(boolean partMatched, String reason) {
							// no need to care about the next judgement
							if ("||".equals(sUnionFlag) && bMatchFlag) {
								return;
							}

							if (!partMatched) {
								sErrorMsg += "|" + reason;
							}

							if ("||".equals(sUnionFlag))
								bMatchFlag = bMatchFlag || partMatched;
							else
								bMatchFlag = bMatchFlag && partMatched;
						}
					}

					/**
					 * [tFilterRow_4 begin ] stop
					 */

					/**
					 * [tRESTClient_7 begin ] start
					 */

					ok_Hash.put("tRESTClient_7", false);
					start_Hash.put("tRESTClient_7", System.currentTimeMillis());

					currentComponent = "tRESTClient_7";

					int tos_count_tRESTClient_7 = 0;

					/**
					 * [tRESTClient_7 begin ] stop
					 */

					/**
					 * [tJavaRow_6 begin ] start
					 */

					ok_Hash.put("tJavaRow_6", false);
					start_Hash.put("tJavaRow_6", System.currentTimeMillis());

					currentComponent = "tJavaRow_6";

					int tos_count_tJavaRow_6 = 0;

					int nb_line_tJavaRow_6 = 0;

					/**
					 * [tJavaRow_6 begin ] stop
					 */

					/**
					 * [tExtractJSONFields_8 begin ] start
					 */

					ok_Hash.put("tExtractJSONFields_8", false);
					start_Hash.put("tExtractJSONFields_8", System.currentTimeMillis());

					currentComponent = "tExtractJSONFields_8";

					int tos_count_tExtractJSONFields_8 = 0;

					int nb_line_tExtractJSONFields_8 = 0;
					String jsonStr_tExtractJSONFields_8 = "";

					class JsonPathCache_tExtractJSONFields_8 {
						final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

						public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
							if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
								return jsonPathString2compiledJsonPath.get(jsonPath);
							} else {
								com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
										.compile(jsonPath);
								jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
								return compiledLoopPath;
							}
						}
					}

					JsonPathCache_tExtractJSONFields_8 jsonPathCache_tExtractJSONFields_8 = new JsonPathCache_tExtractJSONFields_8();

					/**
					 * [tExtractJSONFields_8 begin ] stop
					 */

					/**
					 * [tRESTClient_6 begin ] start
					 */

					ok_Hash.put("tRESTClient_6", false);
					start_Hash.put("tRESTClient_6", System.currentTimeMillis());

					currentComponent = "tRESTClient_6";

					int tos_count_tRESTClient_6 = 0;

					/**
					 * [tRESTClient_6 begin ] stop
					 */

					/**
					 * [tJavaRow_3 begin ] start
					 */

					ok_Hash.put("tJavaRow_3", false);
					start_Hash.put("tJavaRow_3", System.currentTimeMillis());

					currentComponent = "tJavaRow_3";

					int tos_count_tJavaRow_3 = 0;

					int nb_line_tJavaRow_3 = 0;

					/**
					 * [tJavaRow_3 begin ] stop
					 */

					/**
					 * [tExtractJSONFields_7 begin ] start
					 */

					ok_Hash.put("tExtractJSONFields_7", false);
					start_Hash.put("tExtractJSONFields_7", System.currentTimeMillis());

					currentComponent = "tExtractJSONFields_7";

					int tos_count_tExtractJSONFields_7 = 0;

					int nb_line_tExtractJSONFields_7 = 0;
					String jsonStr_tExtractJSONFields_7 = "";

					class JsonPathCache_tExtractJSONFields_7 {
						final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

						public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
							if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
								return jsonPathString2compiledJsonPath.get(jsonPath);
							} else {
								com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
										.compile(jsonPath);
								jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
								return compiledLoopPath;
							}
						}
					}

					JsonPathCache_tExtractJSONFields_7 jsonPathCache_tExtractJSONFields_7 = new JsonPathCache_tExtractJSONFields_7();

					/**
					 * [tExtractJSONFields_7 begin ] stop
					 */

					/**
					 * [tRESTClient_4 begin ] start
					 */

					ok_Hash.put("tRESTClient_4", false);
					start_Hash.put("tRESTClient_4", System.currentTimeMillis());

					currentComponent = "tRESTClient_4";

					int tos_count_tRESTClient_4 = 0;

					/**
					 * [tRESTClient_4 begin ] stop
					 */

					/**
					 * [tFilterRow_3 begin ] start
					 */

					ok_Hash.put("tFilterRow_3", false);
					start_Hash.put("tFilterRow_3", System.currentTimeMillis());

					currentComponent = "tFilterRow_3";

					int tos_count_tFilterRow_3 = 0;

					int nb_line_tFilterRow_3 = 0;
					int nb_line_ok_tFilterRow_3 = 0;
					int nb_line_reject_tFilterRow_3 = 0;

					class Operator_tFilterRow_3 {
						private String sErrorMsg = "";
						private boolean bMatchFlag = true;
						private String sUnionFlag = "&&";

						public Operator_tFilterRow_3(String unionFlag) {
							sUnionFlag = unionFlag;
							bMatchFlag = "||".equals(unionFlag) ? false : true;
						}

						public String getErrorMsg() {
							if (sErrorMsg != null && sErrorMsg.length() > 1)
								return sErrorMsg.substring(1);
							else
								return null;
						}

						public boolean getMatchFlag() {
							return bMatchFlag;
						}

						public void matches(boolean partMatched, String reason) {
							// no need to care about the next judgement
							if ("||".equals(sUnionFlag) && bMatchFlag) {
								return;
							}

							if (!partMatched) {
								sErrorMsg += "|" + reason;
							}

							if ("||".equals(sUnionFlag))
								bMatchFlag = bMatchFlag || partMatched;
							else
								bMatchFlag = bMatchFlag && partMatched;
						}
					}

					/**
					 * [tFilterRow_3 begin ] stop
					 */

					/**
					 * [tRESTResponse_1 begin ] start
					 */

					ok_Hash.put("tRESTResponse_1", false);
					start_Hash.put("tRESTResponse_1", System.currentTimeMillis());

					currentComponent = "tRESTResponse_1";

					int tos_count_tRESTResponse_1 = 0;

					/**
					 * [tRESTResponse_1 begin ] stop
					 */

					/**
					 * [tMap_1 begin ] start
					 */

					ok_Hash.put("tMap_1", false);
					start_Hash.put("tMap_1", System.currentTimeMillis());

					currentComponent = "tMap_1";

					int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
					class Var__tMap_1__Struct {
					}
					Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
					file_removed_to_trachStruct file_removed_to_trach_tmp = new file_removed_to_trachStruct();
					file_changeStruct file_change_tmp = new file_changeStruct();
					responseStruct response_tmp = new responseStruct();
// ###############################

					/**
					 * [tMap_1 begin ] stop
					 */

					/**
					 * [tExtractJSONFields_6 begin ] start
					 */

					ok_Hash.put("tExtractJSONFields_6", false);
					start_Hash.put("tExtractJSONFields_6", System.currentTimeMillis());

					currentComponent = "tExtractJSONFields_6";

					int tos_count_tExtractJSONFields_6 = 0;

					int nb_line_tExtractJSONFields_6 = 0;
					String jsonStr_tExtractJSONFields_6 = "";

					class JsonPathCache_tExtractJSONFields_6 {
						final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

						public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
							if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
								return jsonPathString2compiledJsonPath.get(jsonPath);
							} else {
								com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
										.compile(jsonPath);
								jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
								return compiledLoopPath;
							}
						}
					}

					JsonPathCache_tExtractJSONFields_6 jsonPathCache_tExtractJSONFields_6 = new JsonPathCache_tExtractJSONFields_6();

					/**
					 * [tExtractJSONFields_6 begin ] stop
					 */

					/**
					 * [tLogRow_6 begin ] start
					 */

					ok_Hash.put("tLogRow_6", false);
					start_Hash.put("tLogRow_6", System.currentTimeMillis());

					currentComponent = "tLogRow_6";

					int tos_count_tLogRow_6 = 0;

					///////////////////////

					class Util_tLogRow_6 {

						String[] des_top = { ".", "-" };

						String[] des_data = { "-", "+" };

						String[] des_frame = { "|" };

						public void printLine(StringBuilder sb, int titleWidth, int dataWidth) {

							sb.append("+");
							for (int i = 0; i < titleWidth + 2; i++)
								sb.append("-");
							sb.append("+");
							for (int i = 0; i < dataWidth + 2; i++)
								sb.append("-");
							sb.append("+" + "\n");
						}

						public String print(String[] row, int nbLine) {

							StringBuilder sb = new StringBuilder();

							String title = "#" + nbLine + ". " + "tLogRow_6";

							// step 1: get the max length of all the row[] member;
							int dataWidth = 5; // the length of the string "value"
							for (int i = 0; i < row.length; i++) {
								if (row[i] == null && 4 > dataWidth) {
									dataWidth = 4;
								} else if (row[i] != null && row[i].length() > dataWidth)
									dataWidth = row[i].length();
							}

							int titleWidth = 4;

							int totalWidth = dataWidth + titleWidth + 5;

							// step 2: print the header with line number
							sb.append(".");
							for (int i = 0; i < totalWidth; i++)
								sb.append("-");
							sb.append("." + "\n" + "|");

							int emptyCenterWidth = (totalWidth - title.length()) / 2;
							for (int i = 0; i < emptyCenterWidth; i++)
								sb.append(" ");
							sb.append(title);
							for (int i = 0; i < totalWidth - emptyCenterWidth - title.length(); i++)
								sb.append(" ");
							sb.append("|" + "\n");

							// step 3: print "key" and "value"
							printLine(sb, titleWidth, dataWidth);

							sb.append("|" + " key");
							for (int i = 0; i < titleWidth - 2; i++)
								sb.append(" ");
							sb.append("|" + " value");
							for (int i = 0; i < dataWidth - 4; i++)
								sb.append(" ");
							sb.append("|" + "\n");

							printLine(sb, titleWidth, dataWidth);

							// step 4: print dataset

							// for(int i=0; i<row.length; i++){
							sb.append("| " + "body");
							for (int i = 0; i < titleWidth - "body".length() + 1; i++)
								sb.append(" ");
							sb.append("| " + row[0]);
							for (int i = 0; row[0] == null && i < dataWidth - 3
									|| row[0] != null && i < dataWidth - row[0].length() + 1; i++)
								sb.append(" ");
							sb.append("|" + "\n");

							// }

							// step 5: print a line gap
							printLine(sb, titleWidth, dataWidth);
							return sb.toString();

						}

					}

					Util_tLogRow_6 util_tLogRow_6 = new Util_tLogRow_6();

					java.io.PrintStream consoleOut_tLogRow_6 = null;
					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_6 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_6 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_6);
					}

					StringBuilder strBuffer_tLogRow_6 = null;
					int nb_line_tLogRow_6 = 0;
///////////////////////    			

					/**
					 * [tLogRow_6 begin ] stop
					 */

					/**
					 * [tRESTResponse_3 begin ] start
					 */

					ok_Hash.put("tRESTResponse_3", false);
					start_Hash.put("tRESTResponse_3", System.currentTimeMillis());

					currentComponent = "tRESTResponse_3";

					int tos_count_tRESTResponse_3 = 0;

					/**
					 * [tRESTResponse_3 begin ] stop
					 */

					/**
					 * [tRESTClient_11 begin ] start
					 */

					ok_Hash.put("tRESTClient_11", false);
					start_Hash.put("tRESTClient_11", System.currentTimeMillis());

					currentComponent = "tRESTClient_11";

					int tos_count_tRESTClient_11 = 0;

					/**
					 * [tRESTClient_11 begin ] stop
					 */

					/**
					 * [tFilterRow_7 begin ] start
					 */

					ok_Hash.put("tFilterRow_7", false);
					start_Hash.put("tFilterRow_7", System.currentTimeMillis());

					currentComponent = "tFilterRow_7";

					int tos_count_tFilterRow_7 = 0;

					int nb_line_tFilterRow_7 = 0;
					int nb_line_ok_tFilterRow_7 = 0;
					int nb_line_reject_tFilterRow_7 = 0;

					class Operator_tFilterRow_7 {
						private String sErrorMsg = "";
						private boolean bMatchFlag = true;
						private String sUnionFlag = "&&";

						public Operator_tFilterRow_7(String unionFlag) {
							sUnionFlag = unionFlag;
							bMatchFlag = "||".equals(unionFlag) ? false : true;
						}

						public String getErrorMsg() {
							if (sErrorMsg != null && sErrorMsg.length() > 1)
								return sErrorMsg.substring(1);
							else
								return null;
						}

						public boolean getMatchFlag() {
							return bMatchFlag;
						}

						public void matches(boolean partMatched, String reason) {
							// no need to care about the next judgement
							if ("||".equals(sUnionFlag) && bMatchFlag) {
								return;
							}

							if (!partMatched) {
								sErrorMsg += "|" + reason;
							}

							if ("||".equals(sUnionFlag))
								bMatchFlag = bMatchFlag || partMatched;
							else
								bMatchFlag = bMatchFlag && partMatched;
						}
					}

					/**
					 * [tFilterRow_7 begin ] stop
					 */

					/**
					 * [tRESTResponse_2 begin ] start
					 */

					ok_Hash.put("tRESTResponse_2", false);
					start_Hash.put("tRESTResponse_2", System.currentTimeMillis());

					currentComponent = "tRESTResponse_2";

					int tos_count_tRESTResponse_2 = 0;

					/**
					 * [tRESTResponse_2 begin ] stop
					 */

					/**
					 * [tRESTClient_10 begin ] start
					 */

					ok_Hash.put("tRESTClient_10", false);
					start_Hash.put("tRESTClient_10", System.currentTimeMillis());

					currentComponent = "tRESTClient_10";

					int tos_count_tRESTClient_10 = 0;

					/**
					 * [tRESTClient_10 begin ] stop
					 */

					/**
					 * [tFilterRow_6 begin ] start
					 */

					ok_Hash.put("tFilterRow_6", false);
					start_Hash.put("tFilterRow_6", System.currentTimeMillis());

					currentComponent = "tFilterRow_6";

					int tos_count_tFilterRow_6 = 0;

					int nb_line_tFilterRow_6 = 0;
					int nb_line_ok_tFilterRow_6 = 0;
					int nb_line_reject_tFilterRow_6 = 0;

					class Operator_tFilterRow_6 {
						private String sErrorMsg = "";
						private boolean bMatchFlag = true;
						private String sUnionFlag = "&&";

						public Operator_tFilterRow_6(String unionFlag) {
							sUnionFlag = unionFlag;
							bMatchFlag = "||".equals(unionFlag) ? false : true;
						}

						public String getErrorMsg() {
							if (sErrorMsg != null && sErrorMsg.length() > 1)
								return sErrorMsg.substring(1);
							else
								return null;
						}

						public boolean getMatchFlag() {
							return bMatchFlag;
						}

						public void matches(boolean partMatched, String reason) {
							// no need to care about the next judgement
							if ("||".equals(sUnionFlag) && bMatchFlag) {
								return;
							}

							if (!partMatched) {
								sErrorMsg += "|" + reason;
							}

							if ("||".equals(sUnionFlag))
								bMatchFlag = bMatchFlag || partMatched;
							else
								bMatchFlag = bMatchFlag && partMatched;
						}
					}

					/**
					 * [tFilterRow_6 begin ] stop
					 */

					/**
					 * [tMap_6 begin ] start
					 */

					ok_Hash.put("tMap_6", false);
					start_Hash.put("tMap_6", System.currentTimeMillis());

					currentComponent = "tMap_6";

					int tos_count_tMap_6 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
					class Var__tMap_6__Struct {
					}
					Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
					load_file_trashedStruct load_file_trashed_tmp = new load_file_trashedStruct();
					load_file_not_trashStruct load_file_not_trash_tmp = new load_file_not_trashStruct();
// ###############################

					/**
					 * [tMap_6 begin ] stop
					 */

					/**
					 * [tExtractJSONFields_9 begin ] start
					 */

					ok_Hash.put("tExtractJSONFields_9", false);
					start_Hash.put("tExtractJSONFields_9", System.currentTimeMillis());

					currentComponent = "tExtractJSONFields_9";

					int tos_count_tExtractJSONFields_9 = 0;

					int nb_line_tExtractJSONFields_9 = 0;
					String jsonStr_tExtractJSONFields_9 = "";

					class JsonPathCache_tExtractJSONFields_9 {
						final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

						public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
							if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
								return jsonPathString2compiledJsonPath.get(jsonPath);
							} else {
								com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
										.compile(jsonPath);
								jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
								return compiledLoopPath;
							}
						}
					}

					JsonPathCache_tExtractJSONFields_9 jsonPathCache_tExtractJSONFields_9 = new JsonPathCache_tExtractJSONFields_9();

					/**
					 * [tExtractJSONFields_9 begin ] stop
					 */

					/**
					 * [tRESTClient_13 begin ] start
					 */

					ok_Hash.put("tRESTClient_13", false);
					start_Hash.put("tRESTClient_13", System.currentTimeMillis());

					currentComponent = "tRESTClient_13";

					int tos_count_tRESTClient_13 = 0;

					/**
					 * [tRESTClient_13 begin ] stop
					 */

					/**
					 * [tJavaRow_7 begin ] start
					 */

					ok_Hash.put("tJavaRow_7", false);
					start_Hash.put("tJavaRow_7", System.currentTimeMillis());

					currentComponent = "tJavaRow_7";

					int tos_count_tJavaRow_7 = 0;

					int nb_line_tJavaRow_7 = 0;

					/**
					 * [tJavaRow_7 begin ] stop
					 */

					/**
					 * [tFilterRow_9 begin ] start
					 */

					ok_Hash.put("tFilterRow_9", false);
					start_Hash.put("tFilterRow_9", System.currentTimeMillis());

					currentComponent = "tFilterRow_9";

					int tos_count_tFilterRow_9 = 0;

					int nb_line_tFilterRow_9 = 0;
					int nb_line_ok_tFilterRow_9 = 0;
					int nb_line_reject_tFilterRow_9 = 0;

					class Operator_tFilterRow_9 {
						private String sErrorMsg = "";
						private boolean bMatchFlag = true;
						private String sUnionFlag = "&&";

						public Operator_tFilterRow_9(String unionFlag) {
							sUnionFlag = unionFlag;
							bMatchFlag = "||".equals(unionFlag) ? false : true;
						}

						public String getErrorMsg() {
							if (sErrorMsg != null && sErrorMsg.length() > 1)
								return sErrorMsg.substring(1);
							else
								return null;
						}

						public boolean getMatchFlag() {
							return bMatchFlag;
						}

						public void matches(boolean partMatched, String reason) {
							// no need to care about the next judgement
							if ("||".equals(sUnionFlag) && bMatchFlag) {
								return;
							}

							if (!partMatched) {
								sErrorMsg += "|" + reason;
							}

							if ("||".equals(sUnionFlag))
								bMatchFlag = bMatchFlag || partMatched;
							else
								bMatchFlag = bMatchFlag && partMatched;
						}
					}

					/**
					 * [tFilterRow_9 begin ] stop
					 */

					/**
					 * [tRESTResponse_4 begin ] start
					 */

					ok_Hash.put("tRESTResponse_4", false);
					start_Hash.put("tRESTResponse_4", System.currentTimeMillis());

					currentComponent = "tRESTResponse_4";

					int tos_count_tRESTResponse_4 = 0;

					/**
					 * [tRESTResponse_4 begin ] stop
					 */

					/**
					 * [tMap_9 begin ] start
					 */

					ok_Hash.put("tMap_9", false);
					start_Hash.put("tMap_9", System.currentTimeMillis());

					currentComponent = "tMap_9";

					int tos_count_tMap_9 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
					class Var__tMap_9__Struct {
					}
					Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
					type_submitStruct type_submit_tmp = new type_submitStruct();
					submit_resStruct submit_res_tmp = new submit_resStruct();
// ###############################

					/**
					 * [tMap_9 begin ] stop
					 */

					/**
					 * [tExtractJSONFields_10 begin ] start
					 */

					ok_Hash.put("tExtractJSONFields_10", false);
					start_Hash.put("tExtractJSONFields_10", System.currentTimeMillis());

					currentComponent = "tExtractJSONFields_10";

					int tos_count_tExtractJSONFields_10 = 0;

					int nb_line_tExtractJSONFields_10 = 0;
					String jsonStr_tExtractJSONFields_10 = "";

					class JsonPathCache_tExtractJSONFields_10 {
						final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

						public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
							if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
								return jsonPathString2compiledJsonPath.get(jsonPath);
							} else {
								com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
										.compile(jsonPath);
								jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
								return compiledLoopPath;
							}
						}
					}

					JsonPathCache_tExtractJSONFields_10 jsonPathCache_tExtractJSONFields_10 = new JsonPathCache_tExtractJSONFields_10();

					/**
					 * [tExtractJSONFields_10 begin ] stop
					 */

					/**
					 * [tRESTRequest_1_In begin ] start
					 */

					ok_Hash.put("tRESTRequest_1_In", false);
					start_Hash.put("tRESTRequest_1_In", System.currentTimeMillis());

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					int tos_count_tRESTRequest_1_In = 0;

					/**
					 * [tRESTRequest_1_In begin ] stop
					 */

					/**
					 * [tRESTRequest_1_In main ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					if (requestMessage_tRESTRequest_1.containsKey("ERROR")) { // wrong request received
						interactivity_component = null;
						load_select_option = null;
						drive_webhook_subcribe = null;
						slack_comment_drive = null;
					} else { // non-error (not wrong request)

						String matchedUriPattern_tRESTRequest_1 = (String) requestMessage_tRESTRequest_1.get("PATTERN");
						String matchedFlow_tRESTRequest_1 = (String) requestMessage_tRESTRequest_1.get("OPERATION");

						java.util.Map<String, Object> params_tRESTRequest_1 = (java.util.Map<String, Object>) requestMessage_tRESTRequest_1
								.get("PARAMS");
						if (matchedFlow_tRESTRequest_1.equals("interactivity_component")) {
							interactivity_component = new interactivity_componentStruct();
							Object bodyObject_tRESTRequest_1 = requestMessage_tRESTRequest_1.get("BODY");
							if (null != bodyObject_tRESTRequest_1) {

								interactivity_component.body = (String) bodyObject_tRESTRequest_1;

							}
						} else { // non matched flow
							interactivity_component = null;
						}

						if (matchedFlow_tRESTRequest_1.equals("load_select_option")) {
							load_select_option = new load_select_optionStruct();
							Object bodyObject_tRESTRequest_1 = requestMessage_tRESTRequest_1.get("BODY");
							if (null != bodyObject_tRESTRequest_1) {

								load_select_option.body = (String) bodyObject_tRESTRequest_1;

							}
						} else { // non matched flow
							load_select_option = null;
						}

						if (matchedFlow_tRESTRequest_1.equals("drive_webhook_subcribe")) {
							drive_webhook_subcribe = new drive_webhook_subcribeStruct();
							Object bodyObject_tRESTRequest_1 = requestMessage_tRESTRequest_1.get("BODY");
							if (null != bodyObject_tRESTRequest_1) {

								drive_webhook_subcribe.body = (String) bodyObject_tRESTRequest_1;

							}
						} else { // non matched flow
							drive_webhook_subcribe = null;
						}

						if (matchedFlow_tRESTRequest_1.equals("slack_comment_drive")) {
							slack_comment_drive = new slack_comment_driveStruct();
							Object bodyObject_tRESTRequest_1 = requestMessage_tRESTRequest_1.get("BODY");
							if (null != bodyObject_tRESTRequest_1) {

								slack_comment_drive.body = (String) bodyObject_tRESTRequest_1;

							}
						} else { // non matched flow
							slack_comment_drive = null;
						}

					}

					globalMap.put("tRESTRequest_1_URI", (String) requestMessage_tRESTRequest_1.get("URI"));
					globalMap.put("tRESTRequest_1_URI_BASE", (String) requestMessage_tRESTRequest_1.get("URI_BASE"));
					globalMap.put("tRESTRequest_1_URI_ABSOLUTE",
							(String) requestMessage_tRESTRequest_1.get("URI_ABSOLUTE"));
					globalMap.put("tRESTRequest_1_URI_REQUEST",
							(String) requestMessage_tRESTRequest_1.get("URI_REQUEST"));
					globalMap.put("tRESTRequest_1_HTTP_METHOD", (String) requestMessage_tRESTRequest_1.get("VERB"));

					globalMap.put("tRESTRequest_1_ATTACHMENT_HEADERS",
							requestMessage_tRESTRequest_1.get("ATTACHMENT_HEADERS"));
					globalMap.put("tRESTRequest_1_ATTACHMENT_FILENAMES",
							requestMessage_tRESTRequest_1.get("ATTACHMENT_FILENAMES"));

					globalMap.put("tRESTRequest_1_PRINCIPAL_NAME",
							(String) requestMessage_tRESTRequest_1.get("PRINCIPAL_NAME"));
					globalMap.put("tRESTRequest_1_CORRELATION_ID",
							(String) requestMessage_tRESTRequest_1.get("CorrelationID"));

					tos_count_tRESTRequest_1_In++;

					/**
					 * [tRESTRequest_1_In main ] stop
					 */

					/**
					 * [tRESTRequest_1_In process_data_begin ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					/**
					 * [tRESTRequest_1_In process_data_begin ] stop
					 */
// Start of branch "slack_comment_drive"
					if (slack_comment_drive != null) {

						/**
						 * [tExtractJSONFields_2 main ] start
						 */

						currentComponent = "tExtractJSONFields_2";

						if (slack_comment_drive.body != null) {// C_01
							jsonStr_tExtractJSONFields_2 = slack_comment_drive.body.toString();

							row5 = null;

							String loopPath_tExtractJSONFields_2 = "$";
							java.util.List<Object> resultset_tExtractJSONFields_2 = new java.util.ArrayList<Object>();

							boolean isStructError_tExtractJSONFields_2 = true;
							com.jayway.jsonpath.ReadContext document_tExtractJSONFields_2 = null;
							try {
								document_tExtractJSONFields_2 = com.jayway.jsonpath.JsonPath
										.parse(jsonStr_tExtractJSONFields_2);
								com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
										.getCompiledJsonPath(loopPath_tExtractJSONFields_2);
								Object result_tExtractJSONFields_2 = document_tExtractJSONFields_2
										.read(compiledLoopPath_tExtractJSONFields_2, net.minidev.json.JSONObject.class);
								if (result_tExtractJSONFields_2 instanceof net.minidev.json.JSONArray) {
									resultset_tExtractJSONFields_2 = (net.minidev.json.JSONArray) result_tExtractJSONFields_2;
								} else {
									resultset_tExtractJSONFields_2.add(result_tExtractJSONFields_2);
								}

								isStructError_tExtractJSONFields_2 = false;
							} catch (java.lang.Exception ex_tExtractJSONFields_2) {
								System.err.println(ex_tExtractJSONFields_2.getMessage());
							}

							String jsonPath_tExtractJSONFields_2 = null;
							com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_2 = null;

							Object value_tExtractJSONFields_2 = null;

							Object root_tExtractJSONFields_2 = null;
							for (int i_tExtractJSONFields_2 = 0; isStructError_tExtractJSONFields_2
									|| (i_tExtractJSONFields_2 < resultset_tExtractJSONFields_2
											.size()); i_tExtractJSONFields_2++) {
								if (!isStructError_tExtractJSONFields_2) {
									Object row_tExtractJSONFields_2 = resultset_tExtractJSONFields_2
											.get(i_tExtractJSONFields_2);
									row5 = null;
									row5 = new row5Struct();
									nb_line_tExtractJSONFields_2++;
									try {
										jsonPath_tExtractJSONFields_2 = "@.text";
										compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
												.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

										try {

											value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
													.read(row_tExtractJSONFields_2);

											row5.text_command = value_tExtractJSONFields_2 == null ?

													null

													: value_tExtractJSONFields_2.toString();
										} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
											row5.text_command =

													null

											;
										}
										jsonPath_tExtractJSONFields_2 = "@.trigger_id";
										compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
												.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

										try {

											value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
													.read(row_tExtractJSONFields_2);

											row5.trigger_id = value_tExtractJSONFields_2 == null ?

													null

													: value_tExtractJSONFields_2.toString();
										} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
											row5.trigger_id =

													null

											;
										}
									} catch (java.lang.Exception ex_tExtractJSONFields_2) {
										System.err.println(ex_tExtractJSONFields_2.getMessage());
										row5 = null;
									}

								}

								isStructError_tExtractJSONFields_2 = false;

//}

								tos_count_tExtractJSONFields_2++;

								/**
								 * [tExtractJSONFields_2 main ] stop
								 */

								/**
								 * [tExtractJSONFields_2 process_data_begin ] start
								 */

								currentComponent = "tExtractJSONFields_2";

								/**
								 * [tExtractJSONFields_2 process_data_begin ] stop
								 */
// Start of branch "row5"
								if (row5 != null) {

									/**
									 * [tMap_3 main ] start
									 */

									currentComponent = "tMap_3";

									boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_3 = false;
									boolean mainRowRejected_tMap_3 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
										// ###############################
										// # Output tables

										getAll = null;
										trash = null;
										untrash = null;

// # Output table : 'getAll'
										getAll_tmp.text_command = row5.text_command;
										getAll_tmp.trigger_id = row5.trigger_id;
										getAll = getAll_tmp;

// # Output table : 'trash'
										trash_tmp.text_command = row5.text_command;
										trash_tmp.trigger_id = row5.trigger_id;
										trash = trash_tmp;

// # Output table : 'untrash'
										untrash_tmp.text_command = row5.text_command;
										untrash_tmp.trigger_id = row5.trigger_id;
										untrash = untrash_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_3 = false;

									tos_count_tMap_3++;

									/**
									 * [tMap_3 main ] stop
									 */

									/**
									 * [tMap_3 process_data_begin ] start
									 */

									currentComponent = "tMap_3";

									/**
									 * [tMap_3 process_data_begin ] stop
									 */
// Start of branch "getAll"
									if (getAll != null) {

										/**
										 * [tFilterRow_1 main ] start
										 */

										currentComponent = "tFilterRow_1";

										row25 = null;
										Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
										ope_tFilterRow_1.matches(
												(getAll.text_command == null ? false
														: getAll.text_command.compareTo("GetAll") == 0),
												"text_command.compareTo(\"GetAll\") == 0 failed");

										if (ope_tFilterRow_1.getMatchFlag()) {
											if (row25 == null) {
												row25 = new row25Struct();
											}
											row25.text_command = getAll.text_command;
											row25.trigger_id = getAll.trigger_id;
											nb_line_ok_tFilterRow_1++;
										} else {
											nb_line_reject_tFilterRow_1++;
										}

										nb_line_tFilterRow_1++;

										tos_count_tFilterRow_1++;

										/**
										 * [tFilterRow_1 main ] stop
										 */

										/**
										 * [tFilterRow_1 process_data_begin ] start
										 */

										currentComponent = "tFilterRow_1";

										/**
										 * [tFilterRow_1 process_data_begin ] stop
										 */
// Start of branch "row25"
										if (row25 != null) {

											/**
											 * [tLogRow_4 main ] start
											 */

											currentComponent = "tLogRow_4";

///////////////////////		

											strBuffer_tLogRow_4 = new StringBuilder();

											if (row25.text_command != null) { //

												strBuffer_tLogRow_4.append(String.valueOf(row25.text_command));

											} //

											strBuffer_tLogRow_4.append("|");

											if (row25.trigger_id != null) { //

												strBuffer_tLogRow_4.append(String.valueOf(row25.trigger_id));

											} //

											String[] row_tLogRow_4 = new String[2];

											if (row25.text_command != null) { //
												row_tLogRow_4[0] = String.valueOf(row25.text_command);

											} //

											if (row25.trigger_id != null) { //
												row_tLogRow_4[1] = String.valueOf(row25.trigger_id);

											} //

											nb_line_tLogRow_4++;
											consoleOut_tLogRow_4
													.println(util_tLogRow_4.print(row_tLogRow_4, nb_line_tLogRow_4));
											consoleOut_tLogRow_4.flush();
//////

//////                    

///////////////////////    			

											tos_count_tLogRow_4++;

											/**
											 * [tLogRow_4 main ] stop
											 */

											/**
											 * [tLogRow_4 process_data_begin ] start
											 */

											currentComponent = "tLogRow_4";

											/**
											 * [tLogRow_4 process_data_begin ] stop
											 */

											/**
											 * [tLogRow_4 process_data_end ] start
											 */

											currentComponent = "tLogRow_4";

											/**
											 * [tLogRow_4 process_data_end ] stop
											 */

										} // End of branch "row25"

										/**
										 * [tFilterRow_1 process_data_end ] start
										 */

										currentComponent = "tFilterRow_1";

										/**
										 * [tFilterRow_1 process_data_end ] stop
										 */

									} // End of branch "getAll"

// Start of branch "trash"
									if (trash != null) {

										/**
										 * [tFilterRow_5 main ] start
										 */

										currentComponent = "tFilterRow_5";

										row28 = null;
										Operator_tFilterRow_5 ope_tFilterRow_5 = new Operator_tFilterRow_5("&&");
										ope_tFilterRow_5.matches(
												(trash.text_command == null ? false
														: trash.text_command.compareTo("trash") == 0),
												"text_command.compareTo(\"trash\") == 0 failed");

										if (ope_tFilterRow_5.getMatchFlag()) {
											if (row28 == null) {
												row28 = new row28Struct();
											}
											row28.text_command = trash.text_command;
											row28.trigger_id = trash.trigger_id;
											nb_line_ok_tFilterRow_5++;
										} else {
											nb_line_reject_tFilterRow_5++;
										}

										nb_line_tFilterRow_5++;

										tos_count_tFilterRow_5++;

										/**
										 * [tFilterRow_5 main ] stop
										 */

										/**
										 * [tFilterRow_5 process_data_begin ] start
										 */

										currentComponent = "tFilterRow_5";

										/**
										 * [tFilterRow_5 process_data_begin ] stop
										 */
// Start of branch "row28"
										if (row28 != null) {

											/**
											 * [tMap_5 main ] start
											 */

											currentComponent = "tMap_5";

											boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

											// ###############################
											// # Input tables (lookups)
											boolean rejectedInnerJoin_tMap_5 = false;
											boolean mainRowRejected_tMap_5 = false;

											///////////////////////////////////////////////
											// Starting Lookup Table "trash_file"
											///////////////////////////////////////////////

											boolean forceLooptrash_file = false;

											trash_fileStruct trash_fileObjectFromLookup = null;

											if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

												tHash_Lookup_trash_file.lookup(trash_fileHashKey);

												if (!tHash_Lookup_trash_file.hasNext()) { // G_TM_M_090

													forceLooptrash_file = true;

												} // G_TM_M_090

											} // G_TM_M_020

											else { // G 20 - G 21
												forceLooptrash_file = true;
											} // G 21

											trash_fileStruct trash_file = null;

											while ((tHash_Lookup_trash_file != null
													&& tHash_Lookup_trash_file.hasNext()) || forceLooptrash_file) { // G_TM_M_043

												// CALL close loop of lookup 'trash_file'

												trash_fileStruct fromLookup_trash_file = null;
												trash_file = trash_fileDefault;

												if (!forceLooptrash_file) { // G 46

													fromLookup_trash_file = tHash_Lookup_trash_file.next();

													if (fromLookup_trash_file != null) {
														trash_file = fromLookup_trash_file;
													}

												} // G 46

												forceLooptrash_file = false;

												// ###############################
												{ // start of Var scope

													// ###############################
													// # Vars tables

													Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
													// ###############################
													// # Output tables

													tMap_5_res = null;

// # Output table : 'tMap_5_res'
													tMap_5_res_tmp.trigger_id = row28.trigger_id;
													tMap_5_res_tmp.view = trash_file.view;
													tMap_5_res = tMap_5_res_tmp;
// ###############################

												} // end of Var scope

												rejectedInnerJoin_tMap_5 = false;

												tos_count_tMap_5++;

												/**
												 * [tMap_5 main ] stop
												 */

												/**
												 * [tMap_5 process_data_begin ] start
												 */

												currentComponent = "tMap_5";

												/**
												 * [tMap_5 process_data_begin ] stop
												 */
// Start of branch "tMap_5_res"
												if (tMap_5_res != null) {

													/**
													 * [tRESTClient_9 main ] start
													 */

													currentComponent = "tRESTClient_9";

// expected response body
													javax.ws.rs.core.Response responseDoc_tRESTClient_9 = null;

													try {
														// request body
														org.dom4j.Document requestDoc_tRESTClient_9 = null;
														String requestString_tRESTClient_9 = null;

														Object requestBody_tRESTClient_9 = requestDoc_tRESTClient_9 != null
																? requestDoc_tRESTClient_9
																: requestString_tRESTClient_9;

														// resposne class name
														Class<?> responseClass_tRESTClient_9 = org.dom4j.Document.class;

														// create web client instance
														org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_9 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

														boolean inOSGi = routines.system.BundleUtils.inOSGi();

														final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_9 = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

														String url = "https://slack.com/api/views.open";
														// {baseUri}tRESTClient
														factoryBean_tRESTClient_9.setServiceName(
																new javax.xml.namespace.QName(url, "tRESTClient"));
														factoryBean_tRESTClient_9.setAddress(url);

														factoryBean_tRESTClient_9.setFeatures(features_tRESTClient_9);

														java.util.List<Object> providers_tRESTClient_9 = new java.util.ArrayList<Object>();
														providers_tRESTClient_9.add(
																new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
																	// workaround for
																	// https://jira.talendforge.org/browse/TESB-7276
																	public org.dom4j.Document readFrom(
																			Class<org.dom4j.Document> cls,
																			java.lang.reflect.Type type,
																			java.lang.annotation.Annotation[] anns,
																			javax.ws.rs.core.MediaType mt,
																			javax.ws.rs.core.MultivaluedMap<String, String> headers,
																			java.io.InputStream is) throws IOException,
																			javax.ws.rs.WebApplicationException {
																		String contentLength = headers
																				.getFirst("Content-Length");
																		if (!org.apache.cxf.common.util.StringUtils
																				.isEmpty(contentLength)
																				&& Integer
																						.valueOf(contentLength) <= 0) {
																			try {
																				return org.dom4j.DocumentHelper
																						.parseText("<root/>");
																			} catch (org.dom4j.DocumentException e_tRESTClient_9) {
																				e_tRESTClient_9.printStackTrace();
																			}
																			return null;
																		}
																		return super.readFrom(cls, type, anns, mt,
																				headers, is);
																	}
																});
														org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_9 = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
														jsonProvider_tRESTClient_9.setIgnoreNamespaces(true);
														jsonProvider_tRESTClient_9.setAttributesToElements(true);

														jsonProvider_tRESTClient_9.setSupportUnwrapped(true);
														jsonProvider_tRESTClient_9.setWrapperName("root");

														jsonProvider_tRESTClient_9.setDropRootElement(false);
														jsonProvider_tRESTClient_9.setConvertTypesToStrings(false);
														providers_tRESTClient_9.add(jsonProvider_tRESTClient_9);
														factoryBean_tRESTClient_9.setProviders(providers_tRESTClient_9);
														factoryBean_tRESTClient_9.setTransportId(
																"http://cxf.apache.org/transports/http");

														boolean use_auth_tRESTClient_9 = false;
														if (use_auth_tRESTClient_9 && "SAML".equals("BASIC")) {
															if (!inOSGi) {
																throw new IllegalArgumentException(
																		"SAML based security scenarios are not supported in Studio (standalone)");
															}
															// set SAML Token authentication

															final String decryptedPassword_tRESTClient_9 = routines.system.PasswordEncryptUtil
																	.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

															org.apache.cxf.ws.security.trust.STSClient stsClient = org.talend.esb.security.saml.STSClientUtils
																	.createSTSClient(factoryBean_tRESTClient_9.getBus(),
																			"username",
																			decryptedPassword_tRESTClient_9);

															org.talend.esb.security.saml.SAMLRESTUtils.configureClient(
																	factoryBean_tRESTClient_9, stsClient);
														}

														org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_9 = factoryBean_tRESTClient_9
																.createWebClient();

														// set request path
														webClient_tRESTClient_9.path("");

														// set connection properties
														org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_9 = org.apache.cxf.jaxrs.client.WebClient
																.getConfig(webClient_tRESTClient_9);
														org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_9 = clientConfig_tRESTClient_9
																.getHttpConduit();

														if (clientConfig_tRESTClient_9.getEndpoint() != null
																&& clientConfig_tRESTClient_9.getEndpoint()
																		.getEndpointInfo() != null) {
															clientConfig_tRESTClient_9.getEndpoint().getEndpointInfo()
																	.setProperty("enable.webclient.operation.reporting",
																			true);
														}

														if (use_auth_tRESTClient_9 && "BASIC".equals("BASIC")) {
															// set BASIC auth

															final String decryptedPassword_tRESTClient_9 = routines.system.PasswordEncryptUtil
																	.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

															org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_9 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
															authPolicy_tRESTClient_9.setAuthorizationType("Basic");
															authPolicy_tRESTClient_9.setUserName("username");
															authPolicy_tRESTClient_9
																	.setPassword(decryptedPassword_tRESTClient_9);
															conduit_tRESTClient_9
																	.setAuthorization(authPolicy_tRESTClient_9);
														} else if (use_auth_tRESTClient_9
																&& "HTTP Digest".equals("BASIC")) {
															// set Digest auth

															final String decryptedPassword_tRESTClient_9 = routines.system.PasswordEncryptUtil
																	.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

															org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_9 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
															authPolicy_tRESTClient_9.setAuthorizationType("Digest");
															authPolicy_tRESTClient_9.setUserName("username");
															authPolicy_tRESTClient_9
																	.setPassword(decryptedPassword_tRESTClient_9);
															conduit_tRESTClient_9
																	.setAuthorization(authPolicy_tRESTClient_9);
														}

														if (!inOSGi) {
															conduit_tRESTClient_9.getClient()
																	.setReceiveTimeout((long) (60 * 1000L));
															conduit_tRESTClient_9.getClient()
																	.setConnectionTimeout((long) (30 * 1000L));
															boolean use_proxy_tRESTClient_9 = false;
															if (use_proxy_tRESTClient_9) {

																final String decryptedPassword_tRESTClient_9 = routines.system.PasswordEncryptUtil
																		.decryptPassword(
																				"ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");

																conduit_tRESTClient_9.getClient()
																		.setProxyServer("61.163.92.4");
																conduit_tRESTClient_9.getClient()
																		.setProxyServerPort(Integer.valueOf(8080));
																conduit_tRESTClient_9.getProxyAuthorization()
																		.setUserName("");
																conduit_tRESTClient_9.getProxyAuthorization()
																		.setPassword(decryptedPassword_tRESTClient_9);
															}
														}

														// set Content-Type
														webClient_tRESTClient_9
																.type("application/x-www-form-urlencoded");

														// set Accept-Type
														webClient_tRESTClient_9.accept("application/json");

														// set optional query and header properties if any

														webClient_tRESTClient_9.header("Authorization", "Bearer "
																+ this.globalMap.get("slack_user_token").toString());

														if (use_auth_tRESTClient_9 && "OAUTH2_BEARER".equals("BASIC")) {
															// set oAuth2 bearer token
															webClient_tRESTClient_9.header("Authorization",
																	"Bearer " + "");
														}

														if (use_auth_tRESTClient_9
																&& "OIDC_PASSWORD_GRANT".equals("BASIC")) {

															final String decryptedPassword_tRESTClient_9 = routines.system.PasswordEncryptUtil
																	.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

															String username_tRESTClient_9 = "username";
															String password_tRESTClient_9 = decryptedPassword_tRESTClient_9;

															String bearerHeader_tRESTClient_9 = null;

															try {
																if (!inOSGi) {
																	org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_9 = new org.springframework.context.support.ClassPathXmlApplicationContext(
																			"META-INF/tesb/oidc-context.xml");
																	org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_9 = context_tRESTClient_9
																			.getBean(
																					org.talend.esb.security.oidc.OidcConfiguration.class);
																	bearerHeader_tRESTClient_9 = org.talend.esb.security.oidc.OidcClientUtils
																			.oidcClientBearer(username_tRESTClient_9,
																					password_tRESTClient_9,
																					oidcConfiguration_tRESTClient_9);
																} else {
																	bearerHeader_tRESTClient_9 = org.talend.esb.security.oidc.OidcClientUtils
																			.oidcClientBearer(username_tRESTClient_9,
																					password_tRESTClient_9);
																}
															} catch (Exception ex) {
																throw new javax.ws.rs.WebApplicationException(
																		"Failed to get OIDC access token: ", ex);
															}

															webClient_tRESTClient_9.header("Authorization",
																	bearerHeader_tRESTClient_9);
														}

														// if FORM request then capture query parameters into Form,
														// otherwise set them as queries

														javax.ws.rs.core.Form form_tRESTClient_9 = new javax.ws.rs.core.Form();

														form_tRESTClient_9.param("view", tMap_5_res.view);

														form_tRESTClient_9.param("trigger_id", tMap_5_res.trigger_id);

														requestBody_tRESTClient_9 = form_tRESTClient_9;

														try {
															// start send request

															responseDoc_tRESTClient_9 = webClient_tRESTClient_9
																	.post(requestBody_tRESTClient_9);

															int webClientResponseStatus_tRESTClient_9 = webClient_tRESTClient_9
																	.getResponse().getStatus();
															if (webClientResponseStatus_tRESTClient_9 >= 300) {
																throw new javax.ws.rs.WebApplicationException(
																		webClient_tRESTClient_9.getResponse());
															}

														} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_9) {

															throw ex_tRESTClient_9;

														}

													} catch (Exception e_tRESTClient_9) {

														throw new TalendException(e_tRESTClient_9, currentComponent,
																globalMap);

													}

													tos_count_tRESTClient_9++;

													/**
													 * [tRESTClient_9 main ] stop
													 */

													/**
													 * [tRESTClient_9 process_data_begin ] start
													 */

													currentComponent = "tRESTClient_9";

													/**
													 * [tRESTClient_9 process_data_begin ] stop
													 */

													/**
													 * [tRESTClient_9 process_data_end ] start
													 */

													currentComponent = "tRESTClient_9";

													/**
													 * [tRESTClient_9 process_data_end ] stop
													 */

												} // End of branch "tMap_5_res"

											} // close loop of lookup 'trash_file' // G_TM_M_043

											/**
											 * [tMap_5 process_data_end ] start
											 */

											currentComponent = "tMap_5";

											/**
											 * [tMap_5 process_data_end ] stop
											 */

										} // End of branch "row28"

										/**
										 * [tFilterRow_5 process_data_end ] start
										 */

										currentComponent = "tFilterRow_5";

										/**
										 * [tFilterRow_5 process_data_end ] stop
										 */

									} // End of branch "trash"

// Start of branch "untrash"
									if (untrash != null) {

										/**
										 * [tFilterRow_8 main ] start
										 */

										currentComponent = "tFilterRow_8";

										row34 = null;
										Operator_tFilterRow_8 ope_tFilterRow_8 = new Operator_tFilterRow_8("&&");
										ope_tFilterRow_8.matches(
												(untrash.text_command == null ? false
														: untrash.text_command.compareTo("untrash") == 0),
												"text_command.compareTo(\"untrash\") == 0 failed");

										if (ope_tFilterRow_8.getMatchFlag()) {
											if (row34 == null) {
												row34 = new row34Struct();
											}
											row34.text_command = untrash.text_command;
											row34.trigger_id = untrash.trigger_id;
											nb_line_ok_tFilterRow_8++;
										} else {
											nb_line_reject_tFilterRow_8++;
										}

										nb_line_tFilterRow_8++;

										tos_count_tFilterRow_8++;

										/**
										 * [tFilterRow_8 main ] stop
										 */

										/**
										 * [tFilterRow_8 process_data_begin ] start
										 */

										currentComponent = "tFilterRow_8";

										/**
										 * [tFilterRow_8 process_data_begin ] stop
										 */
// Start of branch "row34"
										if (row34 != null) {

											/**
											 * [tMap_7 main ] start
											 */

											currentComponent = "tMap_7";

											boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

											// ###############################
											// # Input tables (lookups)
											boolean rejectedInnerJoin_tMap_7 = false;
											boolean mainRowRejected_tMap_7 = false;

											///////////////////////////////////////////////
											// Starting Lookup Table "view_untrash"
											///////////////////////////////////////////////

											boolean forceLoopview_untrash = false;

											view_untrashStruct view_untrashObjectFromLookup = null;

											if (!rejectedInnerJoin_tMap_7) { // G_TM_M_020

												tHash_Lookup_view_untrash.lookup(view_untrashHashKey);

												if (!tHash_Lookup_view_untrash.hasNext()) { // G_TM_M_090

													forceLoopview_untrash = true;

												} // G_TM_M_090

											} // G_TM_M_020

											else { // G 20 - G 21
												forceLoopview_untrash = true;
											} // G 21

											view_untrashStruct view_untrash = null;

											while ((tHash_Lookup_view_untrash != null
													&& tHash_Lookup_view_untrash.hasNext()) || forceLoopview_untrash) { // G_TM_M_043

												// CALL close loop of lookup 'view_untrash'

												view_untrashStruct fromLookup_view_untrash = null;
												view_untrash = view_untrashDefault;

												if (!forceLoopview_untrash) { // G 46

													fromLookup_view_untrash = tHash_Lookup_view_untrash.next();

													if (fromLookup_view_untrash != null) {
														view_untrash = fromLookup_view_untrash;
													}

												} // G 46

												forceLoopview_untrash = false;

												// ###############################
												{ // start of Var scope

													// ###############################
													// # Vars tables

													Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
													// ###############################
													// # Output tables

													tMap_7_res = null;

// # Output table : 'tMap_7_res'
													tMap_7_res_tmp.trigger_id = row34.trigger_id;
													tMap_7_res_tmp.view = view_untrash.data;
													tMap_7_res = tMap_7_res_tmp;
// ###############################

												} // end of Var scope

												rejectedInnerJoin_tMap_7 = false;

												tos_count_tMap_7++;

												/**
												 * [tMap_7 main ] stop
												 */

												/**
												 * [tMap_7 process_data_begin ] start
												 */

												currentComponent = "tMap_7";

												/**
												 * [tMap_7 process_data_begin ] stop
												 */
// Start of branch "tMap_7_res"
												if (tMap_7_res != null) {

													/**
													 * [tRESTClient_12 main ] start
													 */

													currentComponent = "tRESTClient_12";

// expected response body
													javax.ws.rs.core.Response responseDoc_tRESTClient_12 = null;

													try {
														// request body
														org.dom4j.Document requestDoc_tRESTClient_12 = null;
														String requestString_tRESTClient_12 = null;

														Object requestBody_tRESTClient_12 = requestDoc_tRESTClient_12 != null
																? requestDoc_tRESTClient_12
																: requestString_tRESTClient_12;

														// resposne class name
														Class<?> responseClass_tRESTClient_12 = org.dom4j.Document.class;

														// create web client instance
														org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_12 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

														boolean inOSGi = routines.system.BundleUtils.inOSGi();

														final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_12 = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

														String url = "https://slack.com/api/views.open";
														// {baseUri}tRESTClient
														factoryBean_tRESTClient_12.setServiceName(
																new javax.xml.namespace.QName(url, "tRESTClient"));
														factoryBean_tRESTClient_12.setAddress(url);

														factoryBean_tRESTClient_12.setFeatures(features_tRESTClient_12);

														java.util.List<Object> providers_tRESTClient_12 = new java.util.ArrayList<Object>();
														providers_tRESTClient_12.add(
																new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
																	// workaround for
																	// https://jira.talendforge.org/browse/TESB-7276
																	public org.dom4j.Document readFrom(
																			Class<org.dom4j.Document> cls,
																			java.lang.reflect.Type type,
																			java.lang.annotation.Annotation[] anns,
																			javax.ws.rs.core.MediaType mt,
																			javax.ws.rs.core.MultivaluedMap<String, String> headers,
																			java.io.InputStream is) throws IOException,
																			javax.ws.rs.WebApplicationException {
																		String contentLength = headers
																				.getFirst("Content-Length");
																		if (!org.apache.cxf.common.util.StringUtils
																				.isEmpty(contentLength)
																				&& Integer
																						.valueOf(contentLength) <= 0) {
																			try {
																				return org.dom4j.DocumentHelper
																						.parseText("<root/>");
																			} catch (org.dom4j.DocumentException e_tRESTClient_12) {
																				e_tRESTClient_12.printStackTrace();
																			}
																			return null;
																		}
																		return super.readFrom(cls, type, anns, mt,
																				headers, is);
																	}
																});
														org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_12 = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
														jsonProvider_tRESTClient_12.setIgnoreNamespaces(true);
														jsonProvider_tRESTClient_12.setAttributesToElements(true);

														jsonProvider_tRESTClient_12.setSupportUnwrapped(true);
														jsonProvider_tRESTClient_12.setWrapperName("root");

														jsonProvider_tRESTClient_12.setDropRootElement(false);
														jsonProvider_tRESTClient_12.setConvertTypesToStrings(false);
														providers_tRESTClient_12.add(jsonProvider_tRESTClient_12);
														factoryBean_tRESTClient_12
																.setProviders(providers_tRESTClient_12);
														factoryBean_tRESTClient_12.setTransportId(
																"http://cxf.apache.org/transports/http");

														boolean use_auth_tRESTClient_12 = false;
														if (use_auth_tRESTClient_12 && "SAML".equals("BASIC")) {
															if (!inOSGi) {
																throw new IllegalArgumentException(
																		"SAML based security scenarios are not supported in Studio (standalone)");
															}
															// set SAML Token authentication

															final String decryptedPassword_tRESTClient_12 = routines.system.PasswordEncryptUtil
																	.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

															org.apache.cxf.ws.security.trust.STSClient stsClient = org.talend.esb.security.saml.STSClientUtils
																	.createSTSClient(
																			factoryBean_tRESTClient_12.getBus(),
																			"username",
																			decryptedPassword_tRESTClient_12);

															org.talend.esb.security.saml.SAMLRESTUtils.configureClient(
																	factoryBean_tRESTClient_12, stsClient);
														}

														org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_12 = factoryBean_tRESTClient_12
																.createWebClient();

														// set request path
														webClient_tRESTClient_12.path("");

														// set connection properties
														org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_12 = org.apache.cxf.jaxrs.client.WebClient
																.getConfig(webClient_tRESTClient_12);
														org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_12 = clientConfig_tRESTClient_12
																.getHttpConduit();

														if (clientConfig_tRESTClient_12.getEndpoint() != null
																&& clientConfig_tRESTClient_12.getEndpoint()
																		.getEndpointInfo() != null) {
															clientConfig_tRESTClient_12.getEndpoint().getEndpointInfo()
																	.setProperty("enable.webclient.operation.reporting",
																			true);
														}

														if (use_auth_tRESTClient_12 && "BASIC".equals("BASIC")) {
															// set BASIC auth

															final String decryptedPassword_tRESTClient_12 = routines.system.PasswordEncryptUtil
																	.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

															org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_12 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
															authPolicy_tRESTClient_12.setAuthorizationType("Basic");
															authPolicy_tRESTClient_12.setUserName("username");
															authPolicy_tRESTClient_12
																	.setPassword(decryptedPassword_tRESTClient_12);
															conduit_tRESTClient_12
																	.setAuthorization(authPolicy_tRESTClient_12);
														} else if (use_auth_tRESTClient_12
																&& "HTTP Digest".equals("BASIC")) {
															// set Digest auth

															final String decryptedPassword_tRESTClient_12 = routines.system.PasswordEncryptUtil
																	.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

															org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_12 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
															authPolicy_tRESTClient_12.setAuthorizationType("Digest");
															authPolicy_tRESTClient_12.setUserName("username");
															authPolicy_tRESTClient_12
																	.setPassword(decryptedPassword_tRESTClient_12);
															conduit_tRESTClient_12
																	.setAuthorization(authPolicy_tRESTClient_12);
														}

														if (!inOSGi) {
															conduit_tRESTClient_12.getClient()
																	.setReceiveTimeout((long) (60 * 1000L));
															conduit_tRESTClient_12.getClient()
																	.setConnectionTimeout((long) (30 * 1000L));
															boolean use_proxy_tRESTClient_12 = false;
															if (use_proxy_tRESTClient_12) {

																final String decryptedPassword_tRESTClient_12 = routines.system.PasswordEncryptUtil
																		.decryptPassword(
																				"ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");

																conduit_tRESTClient_12.getClient()
																		.setProxyServer("61.163.92.4");
																conduit_tRESTClient_12.getClient()
																		.setProxyServerPort(Integer.valueOf(8080));
																conduit_tRESTClient_12.getProxyAuthorization()
																		.setUserName("");
																conduit_tRESTClient_12.getProxyAuthorization()
																		.setPassword(decryptedPassword_tRESTClient_12);
															}
														}

														// set Content-Type
														webClient_tRESTClient_12
																.type("application/x-www-form-urlencoded");

														// set Accept-Type
														webClient_tRESTClient_12.accept("application/json");

														// set optional query and header properties if any

														webClient_tRESTClient_12.header("Authorization", "Bearer "
																+ this.globalMap.get("slack_user_token").toString());

														if (use_auth_tRESTClient_12
																&& "OAUTH2_BEARER".equals("BASIC")) {
															// set oAuth2 bearer token
															webClient_tRESTClient_12.header("Authorization",
																	"Bearer " + "");
														}

														if (use_auth_tRESTClient_12
																&& "OIDC_PASSWORD_GRANT".equals("BASIC")) {

															final String decryptedPassword_tRESTClient_12 = routines.system.PasswordEncryptUtil
																	.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

															String username_tRESTClient_12 = "username";
															String password_tRESTClient_12 = decryptedPassword_tRESTClient_12;

															String bearerHeader_tRESTClient_12 = null;

															try {
																if (!inOSGi) {
																	org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_12 = new org.springframework.context.support.ClassPathXmlApplicationContext(
																			"META-INF/tesb/oidc-context.xml");
																	org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_12 = context_tRESTClient_12
																			.getBean(
																					org.talend.esb.security.oidc.OidcConfiguration.class);
																	bearerHeader_tRESTClient_12 = org.talend.esb.security.oidc.OidcClientUtils
																			.oidcClientBearer(username_tRESTClient_12,
																					password_tRESTClient_12,
																					oidcConfiguration_tRESTClient_12);
																} else {
																	bearerHeader_tRESTClient_12 = org.talend.esb.security.oidc.OidcClientUtils
																			.oidcClientBearer(username_tRESTClient_12,
																					password_tRESTClient_12);
																}
															} catch (Exception ex) {
																throw new javax.ws.rs.WebApplicationException(
																		"Failed to get OIDC access token: ", ex);
															}

															webClient_tRESTClient_12.header("Authorization",
																	bearerHeader_tRESTClient_12);
														}

														// if FORM request then capture query parameters into Form,
														// otherwise set them as queries

														javax.ws.rs.core.Form form_tRESTClient_12 = new javax.ws.rs.core.Form();

														form_tRESTClient_12.param("view", tMap_7_res.view);

														form_tRESTClient_12.param("trigger_id", tMap_7_res.trigger_id);

														requestBody_tRESTClient_12 = form_tRESTClient_12;

														try {
															// start send request

															responseDoc_tRESTClient_12 = webClient_tRESTClient_12
																	.post(requestBody_tRESTClient_12);

															int webClientResponseStatus_tRESTClient_12 = webClient_tRESTClient_12
																	.getResponse().getStatus();
															if (webClientResponseStatus_tRESTClient_12 >= 300) {
																throw new javax.ws.rs.WebApplicationException(
																		webClient_tRESTClient_12.getResponse());
															}

														} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_12) {

															throw ex_tRESTClient_12;

														}

													} catch (Exception e_tRESTClient_12) {

														throw new TalendException(e_tRESTClient_12, currentComponent,
																globalMap);

													}

													tos_count_tRESTClient_12++;

													/**
													 * [tRESTClient_12 main ] stop
													 */

													/**
													 * [tRESTClient_12 process_data_begin ] start
													 */

													currentComponent = "tRESTClient_12";

													/**
													 * [tRESTClient_12 process_data_begin ] stop
													 */

													/**
													 * [tRESTClient_12 process_data_end ] start
													 */

													currentComponent = "tRESTClient_12";

													/**
													 * [tRESTClient_12 process_data_end ] stop
													 */

												} // End of branch "tMap_7_res"

											} // close loop of lookup 'view_untrash' // G_TM_M_043

											/**
											 * [tMap_7 process_data_end ] start
											 */

											currentComponent = "tMap_7";

											/**
											 * [tMap_7 process_data_end ] stop
											 */

										} // End of branch "row34"

										/**
										 * [tFilterRow_8 process_data_end ] start
										 */

										currentComponent = "tFilterRow_8";

										/**
										 * [tFilterRow_8 process_data_end ] stop
										 */

									} // End of branch "untrash"

									/**
									 * [tMap_3 process_data_end ] start
									 */

									currentComponent = "tMap_3";

									/**
									 * [tMap_3 process_data_end ] stop
									 */

								} // End of branch "row5"

								// end for
							}

						} // C_01

						/**
						 * [tExtractJSONFields_2 process_data_end ] start
						 */

						currentComponent = "tExtractJSONFields_2";

						/**
						 * [tExtractJSONFields_2 process_data_end ] stop
						 */

					} // End of branch "slack_comment_drive"

// Start of branch "drive_webhook_subcribe"
					if (drive_webhook_subcribe != null) {

						/**
						 * [tLogRow_6 main ] start
						 */

						currentComponent = "tLogRow_6";

///////////////////////		

						strBuffer_tLogRow_6 = new StringBuilder();

						if (drive_webhook_subcribe.body != null) { //

							strBuffer_tLogRow_6.append(String.valueOf(drive_webhook_subcribe.body));

						} //

						String[] row_tLogRow_6 = new String[1];

						if (drive_webhook_subcribe.body != null) { //
							row_tLogRow_6[0] = String.valueOf(drive_webhook_subcribe.body);

						} //

						nb_line_tLogRow_6++;
						consoleOut_tLogRow_6.println(util_tLogRow_6.print(row_tLogRow_6, nb_line_tLogRow_6));
						consoleOut_tLogRow_6.flush();
//////

//////                    

///////////////////////    			

						row27 = drive_webhook_subcribe;

						tos_count_tLogRow_6++;

						/**
						 * [tLogRow_6 main ] stop
						 */

						/**
						 * [tLogRow_6 process_data_begin ] start
						 */

						currentComponent = "tLogRow_6";

						/**
						 * [tLogRow_6 process_data_begin ] stop
						 */

						/**
						 * [tExtractJSONFields_6 main ] start
						 */

						currentComponent = "tExtractJSONFields_6";

						if (row27.body != null) {// C_01
							jsonStr_tExtractJSONFields_6 = row27.body.toString();

							row15 = null;

							String loopPath_tExtractJSONFields_6 = "$";
							java.util.List<Object> resultset_tExtractJSONFields_6 = new java.util.ArrayList<Object>();

							boolean isStructError_tExtractJSONFields_6 = true;
							com.jayway.jsonpath.ReadContext document_tExtractJSONFields_6 = null;
							try {
								document_tExtractJSONFields_6 = com.jayway.jsonpath.JsonPath
										.parse(jsonStr_tExtractJSONFields_6);
								com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(loopPath_tExtractJSONFields_6);
								Object result_tExtractJSONFields_6 = document_tExtractJSONFields_6
										.read(compiledLoopPath_tExtractJSONFields_6, net.minidev.json.JSONObject.class);
								if (result_tExtractJSONFields_6 instanceof net.minidev.json.JSONArray) {
									resultset_tExtractJSONFields_6 = (net.minidev.json.JSONArray) result_tExtractJSONFields_6;
								} else {
									resultset_tExtractJSONFields_6.add(result_tExtractJSONFields_6);
								}

								isStructError_tExtractJSONFields_6 = false;
							} catch (java.lang.Exception ex_tExtractJSONFields_6) {
								System.err.println(ex_tExtractJSONFields_6.getMessage());
							}

							String jsonPath_tExtractJSONFields_6 = null;
							com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_6 = null;

							Object value_tExtractJSONFields_6 = null;

							Object root_tExtractJSONFields_6 = null;
							for (int i_tExtractJSONFields_6 = 0; isStructError_tExtractJSONFields_6
									|| (i_tExtractJSONFields_6 < resultset_tExtractJSONFields_6
											.size()); i_tExtractJSONFields_6++) {
								if (!isStructError_tExtractJSONFields_6) {
									Object row_tExtractJSONFields_6 = resultset_tExtractJSONFields_6
											.get(i_tExtractJSONFields_6);
									row15 = null;
									row15 = new row15Struct();
									nb_line_tExtractJSONFields_6++;
									try {
										jsonPath_tExtractJSONFields_6 = "@.file.fileId";
										compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
												.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

										try {

											value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
													.read(row_tExtractJSONFields_6);

											row15.fileId = value_tExtractJSONFields_6 == null ?

													null

													: value_tExtractJSONFields_6.toString();
										} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
											row15.fileId =

													null

											;
										}
										jsonPath_tExtractJSONFields_6 = "@.file.removed";
										compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
												.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

										try {

											value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
													.read(row_tExtractJSONFields_6);

											row15.removed = value_tExtractJSONFields_6 == null ?

													null

													: value_tExtractJSONFields_6.toString();
										} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
											row15.removed =

													null

											;
										}
										jsonPath_tExtractJSONFields_6 = "@.file.file.name";
										compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
												.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

										try {

											value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
													.read(row_tExtractJSONFields_6);

											row15.fileName = value_tExtractJSONFields_6 == null ?

													null

													: value_tExtractJSONFields_6.toString();
										} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
											row15.fileName =

													null

											;
										}
									} catch (java.lang.Exception ex_tExtractJSONFields_6) {
										System.err.println(ex_tExtractJSONFields_6.getMessage());
										row15 = null;
									}

								}

								isStructError_tExtractJSONFields_6 = false;

//}

								tos_count_tExtractJSONFields_6++;

								/**
								 * [tExtractJSONFields_6 main ] stop
								 */

								/**
								 * [tExtractJSONFields_6 process_data_begin ] start
								 */

								currentComponent = "tExtractJSONFields_6";

								/**
								 * [tExtractJSONFields_6 process_data_begin ] stop
								 */
// Start of branch "row15"
								if (row15 != null) {

									/**
									 * [tMap_1 main ] start
									 */

									currentComponent = "tMap_1";

									boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_1 = false;
									boolean mainRowRejected_tMap_1 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
										// ###############################
										// # Output tables

										file_removed_to_trach = null;
										file_change = null;
										response = null;

// # Output table : 'file_removed_to_trach'
										file_removed_to_trach_tmp.fileId = row15.fileId;
										file_removed_to_trach_tmp.removed = row15.removed;
										file_removed_to_trach_tmp.fileName = row15.fileName;
										file_removed_to_trach = file_removed_to_trach_tmp;

// # Output table : 'file_change'
										file_change_tmp.fileId = row15.fileId;
										file_change_tmp.removed = row15.removed;
										file_change_tmp.fileName = row15.fileName;
										file_change = file_change_tmp;

// # Output table : 'response'
										response_tmp.body = null;
										response = response_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_1 = false;

									tos_count_tMap_1++;

									/**
									 * [tMap_1 main ] stop
									 */

									/**
									 * [tMap_1 process_data_begin ] start
									 */

									currentComponent = "tMap_1";

									/**
									 * [tMap_1 process_data_begin ] stop
									 */
// Start of branch "file_removed_to_trach"
									if (file_removed_to_trach != null) {

										/**
										 * [tFilterRow_4 main ] start
										 */

										currentComponent = "tFilterRow_4";

										row17 = null;
										Operator_tFilterRow_4 ope_tFilterRow_4 = new Operator_tFilterRow_4("&&");
										ope_tFilterRow_4.matches(
												(file_removed_to_trach.removed == null ? false
														: file_removed_to_trach.removed.compareTo("true") == 0),
												"removed.compareTo(\"true\") == 0 failed");

										if (ope_tFilterRow_4.getMatchFlag()) {
											if (row17 == null) {
												row17 = new row17Struct();
											}
											row17.fileId = file_removed_to_trach.fileId;
											row17.removed = file_removed_to_trach.removed;
											row17.fileName = file_removed_to_trach.fileName;
											nb_line_ok_tFilterRow_4++;
										} else {
											nb_line_reject_tFilterRow_4++;
										}

										nb_line_tFilterRow_4++;

										tos_count_tFilterRow_4++;

										/**
										 * [tFilterRow_4 main ] stop
										 */

										/**
										 * [tFilterRow_4 process_data_begin ] start
										 */

										currentComponent = "tFilterRow_4";

										/**
										 * [tFilterRow_4 process_data_begin ] stop
										 */
// Start of branch "row17"
										if (row17 != null) {

											/**
											 * [tJavaRow_2 main ] start
											 */

											currentComponent = "tJavaRow_2";

											// code sample:
//
// multiply by 2 the row identifier
// row18.id = row17.id * 2;
//
// lowercase the name
// row18.name = row17.name.toLowerCase();

											row18.string = "{\"text\": \"" + row17.fileId + " deleted from trash \"}";
											nb_line_tJavaRow_2++;

											tos_count_tJavaRow_2++;

											/**
											 * [tJavaRow_2 main ] stop
											 */

											/**
											 * [tJavaRow_2 process_data_begin ] start
											 */

											currentComponent = "tJavaRow_2";

											/**
											 * [tJavaRow_2 process_data_begin ] stop
											 */

											/**
											 * [tRESTClient_5 main ] start
											 */

											currentComponent = "tRESTClient_5";

// expected response body
											javax.ws.rs.core.Response responseDoc_tRESTClient_5 = null;

											try {
												// request body
												org.dom4j.Document requestDoc_tRESTClient_5 = null;
												String requestString_tRESTClient_5 = null;
												requestString_tRESTClient_5 = row18.string;

												Object requestBody_tRESTClient_5 = requestDoc_tRESTClient_5 != null
														? requestDoc_tRESTClient_5
														: requestString_tRESTClient_5;

												// resposne class name
												Class<?> responseClass_tRESTClient_5 = String.class;

												// create web client instance
												org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_5 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

												boolean inOSGi = routines.system.BundleUtils.inOSGi();

												final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_5 = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

												String url = "https://hooks.slack.com/services/"
														+ this.globalMap.get("slack_token").toString();
												// {baseUri}tRESTClient
												factoryBean_tRESTClient_5.setServiceName(
														new javax.xml.namespace.QName(url, "tRESTClient"));
												factoryBean_tRESTClient_5.setAddress(url);

												factoryBean_tRESTClient_5.setFeatures(features_tRESTClient_5);

												java.util.List<Object> providers_tRESTClient_5 = new java.util.ArrayList<Object>();
												providers_tRESTClient_5
														.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
															// workaround for
															// https://jira.talendforge.org/browse/TESB-7276
															public org.dom4j.Document readFrom(
																	Class<org.dom4j.Document> cls,
																	java.lang.reflect.Type type,
																	java.lang.annotation.Annotation[] anns,
																	javax.ws.rs.core.MediaType mt,
																	javax.ws.rs.core.MultivaluedMap<String, String> headers,
																	java.io.InputStream is) throws IOException,
																	javax.ws.rs.WebApplicationException {
																String contentLength = headers
																		.getFirst("Content-Length");
																if (!org.apache.cxf.common.util.StringUtils
																		.isEmpty(contentLength)
																		&& Integer.valueOf(contentLength) <= 0) {
																	try {
																		return org.dom4j.DocumentHelper
																				.parseText("<root/>");
																	} catch (org.dom4j.DocumentException e_tRESTClient_5) {
																		e_tRESTClient_5.printStackTrace();
																	}
																	return null;
																}
																return super.readFrom(cls, type, anns, mt, headers, is);
															}
														});
												org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_5 = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
												jsonProvider_tRESTClient_5.setIgnoreNamespaces(true);
												jsonProvider_tRESTClient_5.setAttributesToElements(true);

												jsonProvider_tRESTClient_5.setSupportUnwrapped(true);
												jsonProvider_tRESTClient_5.setWrapperName("root");

												jsonProvider_tRESTClient_5.setDropRootElement(false);
												jsonProvider_tRESTClient_5.setConvertTypesToStrings(false);
												providers_tRESTClient_5.add(jsonProvider_tRESTClient_5);
												factoryBean_tRESTClient_5.setProviders(providers_tRESTClient_5);
												factoryBean_tRESTClient_5
														.setTransportId("http://cxf.apache.org/transports/http");

												boolean use_auth_tRESTClient_5 = false;
												if (use_auth_tRESTClient_5 && "SAML".equals("BASIC")) {
													if (!inOSGi) {
														throw new IllegalArgumentException(
																"SAML based security scenarios are not supported in Studio (standalone)");
													}
													// set SAML Token authentication

													final String decryptedPassword_tRESTClient_5 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													org.apache.cxf.ws.security.trust.STSClient stsClient = org.talend.esb.security.saml.STSClientUtils
															.createSTSClient(factoryBean_tRESTClient_5.getBus(),
																	"username", decryptedPassword_tRESTClient_5);

													org.talend.esb.security.saml.SAMLRESTUtils
															.configureClient(factoryBean_tRESTClient_5, stsClient);
												}

												org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_5 = factoryBean_tRESTClient_5
														.createWebClient();

												// set request path
												webClient_tRESTClient_5.path("");

												// set connection properties
												org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_5 = org.apache.cxf.jaxrs.client.WebClient
														.getConfig(webClient_tRESTClient_5);
												org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_5 = clientConfig_tRESTClient_5
														.getHttpConduit();

												if (clientConfig_tRESTClient_5.getEndpoint() != null
														&& clientConfig_tRESTClient_5.getEndpoint()
																.getEndpointInfo() != null) {
													clientConfig_tRESTClient_5.getEndpoint().getEndpointInfo()
															.setProperty("enable.webclient.operation.reporting", true);
												}

												if (use_auth_tRESTClient_5 && "BASIC".equals("BASIC")) {
													// set BASIC auth

													final String decryptedPassword_tRESTClient_5 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_5 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
													authPolicy_tRESTClient_5.setAuthorizationType("Basic");
													authPolicy_tRESTClient_5.setUserName("username");
													authPolicy_tRESTClient_5
															.setPassword(decryptedPassword_tRESTClient_5);
													conduit_tRESTClient_5.setAuthorization(authPolicy_tRESTClient_5);
												} else if (use_auth_tRESTClient_5 && "HTTP Digest".equals("BASIC")) {
													// set Digest auth

													final String decryptedPassword_tRESTClient_5 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_5 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
													authPolicy_tRESTClient_5.setAuthorizationType("Digest");
													authPolicy_tRESTClient_5.setUserName("username");
													authPolicy_tRESTClient_5
															.setPassword(decryptedPassword_tRESTClient_5);
													conduit_tRESTClient_5.setAuthorization(authPolicy_tRESTClient_5);
												}

												if (!inOSGi) {
													conduit_tRESTClient_5.getClient()
															.setReceiveTimeout((long) (60 * 1000L));
													conduit_tRESTClient_5.getClient()
															.setConnectionTimeout((long) (30 * 1000L));
													boolean use_proxy_tRESTClient_5 = false;
													if (use_proxy_tRESTClient_5) {

														final String decryptedPassword_tRESTClient_5 = routines.system.PasswordEncryptUtil
																.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");

														conduit_tRESTClient_5.getClient().setProxyServer("61.163.92.4");
														conduit_tRESTClient_5.getClient()
																.setProxyServerPort(Integer.valueOf(8080));
														conduit_tRESTClient_5.getProxyAuthorization().setUserName("");
														conduit_tRESTClient_5.getProxyAuthorization()
																.setPassword(decryptedPassword_tRESTClient_5);
													}
												}

												// set Content-Type
												webClient_tRESTClient_5.type("application/json");

												// set Accept-Type
												webClient_tRESTClient_5.accept("*/*");

												// set optional query and header properties if any

												if (use_auth_tRESTClient_5 && "OAUTH2_BEARER".equals("BASIC")) {
													// set oAuth2 bearer token
													webClient_tRESTClient_5.header("Authorization", "Bearer " + "");
												}

												if (use_auth_tRESTClient_5 && "OIDC_PASSWORD_GRANT".equals("BASIC")) {

													final String decryptedPassword_tRESTClient_5 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													String username_tRESTClient_5 = "username";
													String password_tRESTClient_5 = decryptedPassword_tRESTClient_5;

													String bearerHeader_tRESTClient_5 = null;

													try {
														if (!inOSGi) {
															org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_5 = new org.springframework.context.support.ClassPathXmlApplicationContext(
																	"META-INF/tesb/oidc-context.xml");
															org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_5 = context_tRESTClient_5
																	.getBean(
																			org.talend.esb.security.oidc.OidcConfiguration.class);
															bearerHeader_tRESTClient_5 = org.talend.esb.security.oidc.OidcClientUtils
																	.oidcClientBearer(username_tRESTClient_5,
																			password_tRESTClient_5,
																			oidcConfiguration_tRESTClient_5);
														} else {
															bearerHeader_tRESTClient_5 = org.talend.esb.security.oidc.OidcClientUtils
																	.oidcClientBearer(username_tRESTClient_5,
																			password_tRESTClient_5);
														}
													} catch (Exception ex) {
														throw new javax.ws.rs.WebApplicationException(
																"Failed to get OIDC access token: ", ex);
													}

													webClient_tRESTClient_5.header("Authorization",
															bearerHeader_tRESTClient_5);
												}

												// if FORM request then capture query parameters into Form, otherwise
												// set them as queries

												try {
													// start send request

													responseDoc_tRESTClient_5 = webClient_tRESTClient_5
															.post(requestBody_tRESTClient_5);

													int webClientResponseStatus_tRESTClient_5 = webClient_tRESTClient_5
															.getResponse().getStatus();
													if (webClientResponseStatus_tRESTClient_5 >= 300) {
														throw new javax.ws.rs.WebApplicationException(
																webClient_tRESTClient_5.getResponse());
													}

												} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_5) {

													throw ex_tRESTClient_5;

												}

											} catch (Exception e_tRESTClient_5) {

												throw new TalendException(e_tRESTClient_5, currentComponent, globalMap);

											}

											tos_count_tRESTClient_5++;

											/**
											 * [tRESTClient_5 main ] stop
											 */

											/**
											 * [tRESTClient_5 process_data_begin ] start
											 */

											currentComponent = "tRESTClient_5";

											/**
											 * [tRESTClient_5 process_data_begin ] stop
											 */

											/**
											 * [tRESTClient_5 process_data_end ] start
											 */

											currentComponent = "tRESTClient_5";

											/**
											 * [tRESTClient_5 process_data_end ] stop
											 */

											/**
											 * [tJavaRow_2 process_data_end ] start
											 */

											currentComponent = "tJavaRow_2";

											/**
											 * [tJavaRow_2 process_data_end ] stop
											 */

										} // End of branch "row17"

										/**
										 * [tFilterRow_4 process_data_end ] start
										 */

										currentComponent = "tFilterRow_4";

										/**
										 * [tFilterRow_4 process_data_end ] stop
										 */

									} // End of branch "file_removed_to_trach"

// Start of branch "file_change"
									if (file_change != null) {

										/**
										 * [tFilterRow_3 main ] start
										 */

										currentComponent = "tFilterRow_3";

										row19 = null;
										Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("&&");
										ope_tFilterRow_3.matches(
												(file_change.removed == null ? false
														: file_change.removed.compareTo("false") == 0),
												"removed.compareTo(\"false\") == 0 failed");

										if (ope_tFilterRow_3.getMatchFlag()) {
											if (row19 == null) {
												row19 = new row19Struct();
											}
											row19.fileId = file_change.fileId;
											row19.removed = file_change.removed;
											row19.fileName = file_change.fileName;
											nb_line_ok_tFilterRow_3++;
										} else {
											nb_line_reject_tFilterRow_3++;
										}

										nb_line_tFilterRow_3++;

										tos_count_tFilterRow_3++;

										/**
										 * [tFilterRow_3 main ] stop
										 */

										/**
										 * [tFilterRow_3 process_data_begin ] start
										 */

										currentComponent = "tFilterRow_3";

										/**
										 * [tFilterRow_3 process_data_begin ] stop
										 */
// Start of branch "row19"
										if (row19 != null) {

											/**
											 * [tRESTClient_4 main ] start
											 */

											currentComponent = "tRESTClient_4";

											row16 = null;

// expected response body
											Object responseDoc_tRESTClient_4 = null;

											try {
												// request body
												org.dom4j.Document requestDoc_tRESTClient_4 = null;
												String requestString_tRESTClient_4 = null;

												Object requestBody_tRESTClient_4 = requestDoc_tRESTClient_4 != null
														? requestDoc_tRESTClient_4
														: requestString_tRESTClient_4;

												// resposne class name
												Class<?> responseClass_tRESTClient_4 = String.class;

												// create web client instance
												org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_4 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

												boolean inOSGi = routines.system.BundleUtils.inOSGi();

												final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_4 = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

												String url = "https://www.googleapis.com/drive/v3/files/" + row15.fileId
														+ "?fields=*";
												// {baseUri}tRESTClient
												factoryBean_tRESTClient_4.setServiceName(
														new javax.xml.namespace.QName(url, "tRESTClient"));
												factoryBean_tRESTClient_4.setAddress(url);

												factoryBean_tRESTClient_4.setFeatures(features_tRESTClient_4);

												java.util.List<Object> providers_tRESTClient_4 = new java.util.ArrayList<Object>();
												providers_tRESTClient_4
														.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
															// workaround for
															// https://jira.talendforge.org/browse/TESB-7276
															public org.dom4j.Document readFrom(
																	Class<org.dom4j.Document> cls,
																	java.lang.reflect.Type type,
																	java.lang.annotation.Annotation[] anns,
																	javax.ws.rs.core.MediaType mt,
																	javax.ws.rs.core.MultivaluedMap<String, String> headers,
																	java.io.InputStream is) throws IOException,
																	javax.ws.rs.WebApplicationException {
																String contentLength = headers
																		.getFirst("Content-Length");
																if (!org.apache.cxf.common.util.StringUtils
																		.isEmpty(contentLength)
																		&& Integer.valueOf(contentLength) <= 0) {
																	try {
																		return org.dom4j.DocumentHelper
																				.parseText("<root/>");
																	} catch (org.dom4j.DocumentException e_tRESTClient_4) {
																		e_tRESTClient_4.printStackTrace();
																	}
																	return null;
																}
																return super.readFrom(cls, type, anns, mt, headers, is);
															}
														});
												org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_4 = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
												jsonProvider_tRESTClient_4.setIgnoreNamespaces(true);
												jsonProvider_tRESTClient_4.setAttributesToElements(true);

												jsonProvider_tRESTClient_4.setSupportUnwrapped(true);
												jsonProvider_tRESTClient_4.setWrapperName("root");

												jsonProvider_tRESTClient_4.setDropRootElement(false);
												jsonProvider_tRESTClient_4.setConvertTypesToStrings(false);
												providers_tRESTClient_4.add(jsonProvider_tRESTClient_4);
												factoryBean_tRESTClient_4.setProviders(providers_tRESTClient_4);
												factoryBean_tRESTClient_4
														.setTransportId("http://cxf.apache.org/transports/http");

												boolean use_auth_tRESTClient_4 = false;
												if (use_auth_tRESTClient_4 && "SAML".equals("BASIC")) {
													if (!inOSGi) {
														throw new IllegalArgumentException(
																"SAML based security scenarios are not supported in Studio (standalone)");
													}
													// set SAML Token authentication

													final String decryptedPassword_tRESTClient_4 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													org.apache.cxf.ws.security.trust.STSClient stsClient = org.talend.esb.security.saml.STSClientUtils
															.createSTSClient(factoryBean_tRESTClient_4.getBus(),
																	"username", decryptedPassword_tRESTClient_4);

													org.talend.esb.security.saml.SAMLRESTUtils
															.configureClient(factoryBean_tRESTClient_4, stsClient);
												}

												org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_4 = factoryBean_tRESTClient_4
														.createWebClient();

												// set request path
												webClient_tRESTClient_4.path("");

												// set connection properties
												org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_4 = org.apache.cxf.jaxrs.client.WebClient
														.getConfig(webClient_tRESTClient_4);
												org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_4 = clientConfig_tRESTClient_4
														.getHttpConduit();

												if (clientConfig_tRESTClient_4.getEndpoint() != null
														&& clientConfig_tRESTClient_4.getEndpoint()
																.getEndpointInfo() != null) {
													clientConfig_tRESTClient_4.getEndpoint().getEndpointInfo()
															.setProperty("enable.webclient.operation.reporting", true);
												}

												if (use_auth_tRESTClient_4 && "BASIC".equals("BASIC")) {
													// set BASIC auth

													final String decryptedPassword_tRESTClient_4 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_4 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
													authPolicy_tRESTClient_4.setAuthorizationType("Basic");
													authPolicy_tRESTClient_4.setUserName("username");
													authPolicy_tRESTClient_4
															.setPassword(decryptedPassword_tRESTClient_4);
													conduit_tRESTClient_4.setAuthorization(authPolicy_tRESTClient_4);
												} else if (use_auth_tRESTClient_4 && "HTTP Digest".equals("BASIC")) {
													// set Digest auth

													final String decryptedPassword_tRESTClient_4 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_4 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
													authPolicy_tRESTClient_4.setAuthorizationType("Digest");
													authPolicy_tRESTClient_4.setUserName("username");
													authPolicy_tRESTClient_4
															.setPassword(decryptedPassword_tRESTClient_4);
													conduit_tRESTClient_4.setAuthorization(authPolicy_tRESTClient_4);
												}

												if (!inOSGi) {
													conduit_tRESTClient_4.getClient()
															.setReceiveTimeout((long) (60 * 1000L));
													conduit_tRESTClient_4.getClient()
															.setConnectionTimeout((long) (30 * 1000L));
													boolean use_proxy_tRESTClient_4 = false;
													if (use_proxy_tRESTClient_4) {

														final String decryptedPassword_tRESTClient_4 = routines.system.PasswordEncryptUtil
																.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");

														conduit_tRESTClient_4.getClient().setProxyServer("61.163.92.4");
														conduit_tRESTClient_4.getClient()
																.setProxyServerPort(Integer.valueOf(8080));
														conduit_tRESTClient_4.getProxyAuthorization().setUserName("");
														conduit_tRESTClient_4.getProxyAuthorization()
																.setPassword(decryptedPassword_tRESTClient_4);
													}
												}

												// set Accept-Type
												webClient_tRESTClient_4.accept("*/*");

												// set optional query and header properties if any

												webClient_tRESTClient_4.header("Authorization",
														"Bearer " + this.globalMap.get("drive_access_token"));

												if (use_auth_tRESTClient_4 && "OAUTH2_BEARER".equals("BASIC")) {
													// set oAuth2 bearer token
													webClient_tRESTClient_4.header("Authorization", "Bearer " + "");
												}

												if (use_auth_tRESTClient_4 && "OIDC_PASSWORD_GRANT".equals("BASIC")) {

													final String decryptedPassword_tRESTClient_4 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													String username_tRESTClient_4 = "username";
													String password_tRESTClient_4 = decryptedPassword_tRESTClient_4;

													String bearerHeader_tRESTClient_4 = null;

													try {
														if (!inOSGi) {
															org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_4 = new org.springframework.context.support.ClassPathXmlApplicationContext(
																	"META-INF/tesb/oidc-context.xml");
															org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_4 = context_tRESTClient_4
																	.getBean(
																			org.talend.esb.security.oidc.OidcConfiguration.class);
															bearerHeader_tRESTClient_4 = org.talend.esb.security.oidc.OidcClientUtils
																	.oidcClientBearer(username_tRESTClient_4,
																			password_tRESTClient_4,
																			oidcConfiguration_tRESTClient_4);
														} else {
															bearerHeader_tRESTClient_4 = org.talend.esb.security.oidc.OidcClientUtils
																	.oidcClientBearer(username_tRESTClient_4,
																			password_tRESTClient_4);
														}
													} catch (Exception ex) {
														throw new javax.ws.rs.WebApplicationException(
																"Failed to get OIDC access token: ", ex);
													}

													webClient_tRESTClient_4.header("Authorization",
															bearerHeader_tRESTClient_4);
												}

												// if FORM request then capture query parameters into Form, otherwise
												// set them as queries

												try {
													// start send request

													responseDoc_tRESTClient_4 = webClient_tRESTClient_4
															.get(responseClass_tRESTClient_4);

													int webClientResponseStatus_tRESTClient_4 = webClient_tRESTClient_4
															.getResponse().getStatus();
													if (webClientResponseStatus_tRESTClient_4 >= 300) {
														throw new javax.ws.rs.WebApplicationException(
																webClient_tRESTClient_4.getResponse());
													}

													if (row16 == null) {
														row16 = new row16Struct();
													}

													row16.statusCode = webClientResponseStatus_tRESTClient_4;

													{
														Object responseObj_tRESTClient_4 = responseDoc_tRESTClient_4;

														if (responseObj_tRESTClient_4 != null) {
															if (responseClass_tRESTClient_4 == String.class) {
																row16.string = (String) responseObj_tRESTClient_4;
															} else {
																routines.system.Document responseTalendDoc_tRESTClient_4 = null;
																if (null != responseObj_tRESTClient_4) {
																	responseTalendDoc_tRESTClient_4 = new routines.system.Document();
																	responseTalendDoc_tRESTClient_4.setDocument(
																			(org.dom4j.Document) responseObj_tRESTClient_4);
																}
																row16.body = responseTalendDoc_tRESTClient_4;
															}
														}
													}

													globalMap.put("tRESTClient_4_HEADERS",
															webClient_tRESTClient_4.getResponse().getHeaders());

												} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_4) {

													throw ex_tRESTClient_4;

												}

											} catch (Exception e_tRESTClient_4) {

												throw new TalendException(e_tRESTClient_4, currentComponent, globalMap);

											}

											tos_count_tRESTClient_4++;

											/**
											 * [tRESTClient_4 main ] stop
											 */

											/**
											 * [tRESTClient_4 process_data_begin ] start
											 */

											currentComponent = "tRESTClient_4";

											/**
											 * [tRESTClient_4 process_data_begin ] stop
											 */
// Start of branch "row16"
											if (row16 != null) {

												/**
												 * [tExtractJSONFields_7 main ] start
												 */

												currentComponent = "tExtractJSONFields_7";

												if (row16.string != null) {// C_01
													jsonStr_tExtractJSONFields_7 = row16.string.toString();

													row20 = null;

													String loopPath_tExtractJSONFields_7 = "$";
													java.util.List<Object> resultset_tExtractJSONFields_7 = new java.util.ArrayList<Object>();

													boolean isStructError_tExtractJSONFields_7 = true;
													com.jayway.jsonpath.ReadContext document_tExtractJSONFields_7 = null;
													try {
														document_tExtractJSONFields_7 = com.jayway.jsonpath.JsonPath
																.parse(jsonStr_tExtractJSONFields_7);
														com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
																.getCompiledJsonPath(loopPath_tExtractJSONFields_7);
														Object result_tExtractJSONFields_7 = document_tExtractJSONFields_7
																.read(compiledLoopPath_tExtractJSONFields_7,
																		net.minidev.json.JSONObject.class);
														if (result_tExtractJSONFields_7 instanceof net.minidev.json.JSONArray) {
															resultset_tExtractJSONFields_7 = (net.minidev.json.JSONArray) result_tExtractJSONFields_7;
														} else {
															resultset_tExtractJSONFields_7
																	.add(result_tExtractJSONFields_7);
														}

														isStructError_tExtractJSONFields_7 = false;
													} catch (java.lang.Exception ex_tExtractJSONFields_7) {
														System.err.println(ex_tExtractJSONFields_7.getMessage());
													}

													String jsonPath_tExtractJSONFields_7 = null;
													com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_7 = null;

													Object value_tExtractJSONFields_7 = null;

													Object root_tExtractJSONFields_7 = null;
													for (int i_tExtractJSONFields_7 = 0; isStructError_tExtractJSONFields_7
															|| (i_tExtractJSONFields_7 < resultset_tExtractJSONFields_7
																	.size()); i_tExtractJSONFields_7++) {
														if (!isStructError_tExtractJSONFields_7) {
															Object row_tExtractJSONFields_7 = resultset_tExtractJSONFields_7
																	.get(i_tExtractJSONFields_7);
															row20 = null;
															row20 = new row20Struct();
															nb_line_tExtractJSONFields_7++;
															try {
																jsonPath_tExtractJSONFields_7 = "@.mimeType";
																compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
																		.getCompiledJsonPath(
																				jsonPath_tExtractJSONFields_7);

																try {

																	value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
																			.read(row_tExtractJSONFields_7);

																	row20.mimeType = value_tExtractJSONFields_7 == null
																			?

																			null

																			: value_tExtractJSONFields_7.toString();
																} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
																	row20.mimeType =

																			null

																	;
																}
																jsonPath_tExtractJSONFields_7 = "@.parents[0]";
																compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
																		.getCompiledJsonPath(
																				jsonPath_tExtractJSONFields_7);

																try {

																	value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
																			.read(row_tExtractJSONFields_7);

																	row20.parentId = value_tExtractJSONFields_7 == null
																			?

																			null

																			: value_tExtractJSONFields_7.toString();
																} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
																	row20.parentId =

																			null

																	;
																}
																jsonPath_tExtractJSONFields_7 = "@.webViewLink";
																compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
																		.getCompiledJsonPath(
																				jsonPath_tExtractJSONFields_7);

																try {

																	value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
																			.read(row_tExtractJSONFields_7);

																	row20.webViewLink = value_tExtractJSONFields_7 == null
																			?

																			null

																			: value_tExtractJSONFields_7.toString();
																} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
																	row20.webViewLink =

																			null

																	;
																}
																jsonPath_tExtractJSONFields_7 = "@.id";
																compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
																		.getCompiledJsonPath(
																				jsonPath_tExtractJSONFields_7);

																try {

																	value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
																			.read(row_tExtractJSONFields_7);

																	row20.id = value_tExtractJSONFields_7 == null ?

																			null

																			: value_tExtractJSONFields_7.toString();
																} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
																	row20.id =

																			null

																	;
																}
																jsonPath_tExtractJSONFields_7 = "@.name";
																compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
																		.getCompiledJsonPath(
																				jsonPath_tExtractJSONFields_7);

																try {

																	value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
																			.read(row_tExtractJSONFields_7);

																	row20.name = value_tExtractJSONFields_7 == null ?

																			null

																			: value_tExtractJSONFields_7.toString();
																} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
																	row20.name =

																			null

																	;
																}
																jsonPath_tExtractJSONFields_7 = "@.trashed";
																compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
																		.getCompiledJsonPath(
																				jsonPath_tExtractJSONFields_7);

																try {

																	value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
																			.read(row_tExtractJSONFields_7);

																	row20.trashed = value_tExtractJSONFields_7 == null ?

																			null

																			: value_tExtractJSONFields_7.toString();
																} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
																	row20.trashed =

																			null

																	;
																}
															} catch (java.lang.Exception ex_tExtractJSONFields_7) {
																System.err
																		.println(ex_tExtractJSONFields_7.getMessage());
																row20 = null;
															}

														}

														isStructError_tExtractJSONFields_7 = false;

//}

														tos_count_tExtractJSONFields_7++;

														/**
														 * [tExtractJSONFields_7 main ] stop
														 */

														/**
														 * [tExtractJSONFields_7 process_data_begin ] start
														 */

														currentComponent = "tExtractJSONFields_7";

														/**
														 * [tExtractJSONFields_7 process_data_begin ] stop
														 */
// Start of branch "row20"
														if (row20 != null) {

															/**
															 * [tJavaRow_3 main ] start
															 */

															currentComponent = "tJavaRow_3";

															// code sample:
//
// multiply by 2 the row identifier
// row21.id = row20.id * 2;
//
// lowercase the name
// row21.name = row20.name.toLowerCase();

															String text = "";
															String trashed = row20.trashed;
															if (trashed.equals("true") == true) {
																text = "<" + row20.webViewLink + "|*Link*> "
																		+ row20.name + " - id: " + row20.id
																		+ " *moved to trash* at folder: ";
															} else {
																text = "<" + row20.webViewLink + "|*Link*> "
																		+ row20.name + " - id: " + row20.id
																		+ " *added* at folder: ";
															}
															row21.parentId = row20.parentId;

															this.globalMap.put("text_drive_change", text);
															nb_line_tJavaRow_3++;

															tos_count_tJavaRow_3++;

															/**
															 * [tJavaRow_3 main ] stop
															 */

															/**
															 * [tJavaRow_3 process_data_begin ] start
															 */

															currentComponent = "tJavaRow_3";

															/**
															 * [tJavaRow_3 process_data_begin ] stop
															 */

															/**
															 * [tRESTClient_6 main ] start
															 */

															currentComponent = "tRESTClient_6";

															row22 = null;

// expected response body
															Object responseDoc_tRESTClient_6 = null;

															try {
																// request body
																org.dom4j.Document requestDoc_tRESTClient_6 = null;
																String requestString_tRESTClient_6 = null;

																Object requestBody_tRESTClient_6 = requestDoc_tRESTClient_6 != null
																		? requestDoc_tRESTClient_6
																		: requestString_tRESTClient_6;

																// resposne class name
																Class<?> responseClass_tRESTClient_6 = String.class;

																// create web client instance
																org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_6 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

																boolean inOSGi = routines.system.BundleUtils.inOSGi();

																final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_6 = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

																String url = "https://www.googleapis.com/drive/v3/files/"
																		+ row21.parentId + "?fields=*";
																// {baseUri}tRESTClient
																factoryBean_tRESTClient_6.setServiceName(
																		new javax.xml.namespace.QName(url,
																				"tRESTClient"));
																factoryBean_tRESTClient_6.setAddress(url);

																factoryBean_tRESTClient_6
																		.setFeatures(features_tRESTClient_6);

																java.util.List<Object> providers_tRESTClient_6 = new java.util.ArrayList<Object>();
																providers_tRESTClient_6.add(
																		new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
																			// workaround for
																			// https://jira.talendforge.org/browse/TESB-7276
																			public org.dom4j.Document readFrom(
																					Class<org.dom4j.Document> cls,
																					java.lang.reflect.Type type,
																					java.lang.annotation.Annotation[] anns,
																					javax.ws.rs.core.MediaType mt,
																					javax.ws.rs.core.MultivaluedMap<String, String> headers,
																					java.io.InputStream is)
																					throws IOException,
																					javax.ws.rs.WebApplicationException {
																				String contentLength = headers
																						.getFirst("Content-Length");
																				if (!org.apache.cxf.common.util.StringUtils
																						.isEmpty(contentLength)
																						&& Integer.valueOf(
																								contentLength) <= 0) {
																					try {
																						return org.dom4j.DocumentHelper
																								.parseText("<root/>");
																					} catch (org.dom4j.DocumentException e_tRESTClient_6) {
																						e_tRESTClient_6
																								.printStackTrace();
																					}
																					return null;
																				}
																				return super.readFrom(cls, type, anns,
																						mt, headers, is);
																			}
																		});
																org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_6 = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
																jsonProvider_tRESTClient_6.setIgnoreNamespaces(true);
																jsonProvider_tRESTClient_6
																		.setAttributesToElements(true);

																jsonProvider_tRESTClient_6.setSupportUnwrapped(true);
																jsonProvider_tRESTClient_6.setWrapperName("root");

																jsonProvider_tRESTClient_6.setDropRootElement(false);
																jsonProvider_tRESTClient_6
																		.setConvertTypesToStrings(false);
																providers_tRESTClient_6.add(jsonProvider_tRESTClient_6);
																factoryBean_tRESTClient_6
																		.setProviders(providers_tRESTClient_6);
																factoryBean_tRESTClient_6.setTransportId(
																		"http://cxf.apache.org/transports/http");

																boolean use_auth_tRESTClient_6 = false;
																if (use_auth_tRESTClient_6 && "SAML".equals("BASIC")) {
																	if (!inOSGi) {
																		throw new IllegalArgumentException(
																				"SAML based security scenarios are not supported in Studio (standalone)");
																	}
																	// set SAML Token authentication

																	final String decryptedPassword_tRESTClient_6 = routines.system.PasswordEncryptUtil
																			.decryptPassword(
																					"ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

																	org.apache.cxf.ws.security.trust.STSClient stsClient = org.talend.esb.security.saml.STSClientUtils
																			.createSTSClient(
																					factoryBean_tRESTClient_6.getBus(),
																					"username",
																					decryptedPassword_tRESTClient_6);

																	org.talend.esb.security.saml.SAMLRESTUtils
																			.configureClient(factoryBean_tRESTClient_6,
																					stsClient);
																}

																org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_6 = factoryBean_tRESTClient_6
																		.createWebClient();

																// set request path
																webClient_tRESTClient_6.path("");

																// set connection properties
																org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_6 = org.apache.cxf.jaxrs.client.WebClient
																		.getConfig(webClient_tRESTClient_6);
																org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_6 = clientConfig_tRESTClient_6
																		.getHttpConduit();

																if (clientConfig_tRESTClient_6.getEndpoint() != null
																		&& clientConfig_tRESTClient_6.getEndpoint()
																				.getEndpointInfo() != null) {
																	clientConfig_tRESTClient_6.getEndpoint()
																			.getEndpointInfo().setProperty(
																					"enable.webclient.operation.reporting",
																					true);
																}

																if (use_auth_tRESTClient_6 && "BASIC".equals("BASIC")) {
																	// set BASIC auth

																	final String decryptedPassword_tRESTClient_6 = routines.system.PasswordEncryptUtil
																			.decryptPassword(
																					"ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

																	org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_6 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
																	authPolicy_tRESTClient_6
																			.setAuthorizationType("Basic");
																	authPolicy_tRESTClient_6.setUserName("username");
																	authPolicy_tRESTClient_6.setPassword(
																			decryptedPassword_tRESTClient_6);
																	conduit_tRESTClient_6
																			.setAuthorization(authPolicy_tRESTClient_6);
																} else if (use_auth_tRESTClient_6
																		&& "HTTP Digest".equals("BASIC")) {
																	// set Digest auth

																	final String decryptedPassword_tRESTClient_6 = routines.system.PasswordEncryptUtil
																			.decryptPassword(
																					"ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

																	org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_6 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
																	authPolicy_tRESTClient_6
																			.setAuthorizationType("Digest");
																	authPolicy_tRESTClient_6.setUserName("username");
																	authPolicy_tRESTClient_6.setPassword(
																			decryptedPassword_tRESTClient_6);
																	conduit_tRESTClient_6
																			.setAuthorization(authPolicy_tRESTClient_6);
																}

																if (!inOSGi) {
																	conduit_tRESTClient_6.getClient()
																			.setReceiveTimeout((long) (60 * 1000L));
																	conduit_tRESTClient_6.getClient()
																			.setConnectionTimeout((long) (30 * 1000L));
																	boolean use_proxy_tRESTClient_6 = false;
																	if (use_proxy_tRESTClient_6) {

																		final String decryptedPassword_tRESTClient_6 = routines.system.PasswordEncryptUtil
																				.decryptPassword(
																						"ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");

																		conduit_tRESTClient_6.getClient()
																				.setProxyServer("61.163.92.4");
																		conduit_tRESTClient_6.getClient()
																				.setProxyServerPort(
																						Integer.valueOf(8080));
																		conduit_tRESTClient_6.getProxyAuthorization()
																				.setUserName("");
																		conduit_tRESTClient_6.getProxyAuthorization()
																				.setPassword(
																						decryptedPassword_tRESTClient_6);
																	}
																}

																// set Accept-Type
																webClient_tRESTClient_6.accept("*/*");

																// set optional query and header properties if any

																webClient_tRESTClient_6.header("Authorization",
																		"Bearer " + this.globalMap
																				.get("drive_access_token"));

																if (use_auth_tRESTClient_6
																		&& "OAUTH2_BEARER".equals("BASIC")) {
																	// set oAuth2 bearer token
																	webClient_tRESTClient_6.header("Authorization",
																			"Bearer " + "");
																}

																if (use_auth_tRESTClient_6
																		&& "OIDC_PASSWORD_GRANT".equals("BASIC")) {

																	final String decryptedPassword_tRESTClient_6 = routines.system.PasswordEncryptUtil
																			.decryptPassword(
																					"ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

																	String username_tRESTClient_6 = "username";
																	String password_tRESTClient_6 = decryptedPassword_tRESTClient_6;

																	String bearerHeader_tRESTClient_6 = null;

																	try {
																		if (!inOSGi) {
																			org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_6 = new org.springframework.context.support.ClassPathXmlApplicationContext(
																					"META-INF/tesb/oidc-context.xml");
																			org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_6 = context_tRESTClient_6
																					.getBean(
																							org.talend.esb.security.oidc.OidcConfiguration.class);
																			bearerHeader_tRESTClient_6 = org.talend.esb.security.oidc.OidcClientUtils
																					.oidcClientBearer(
																							username_tRESTClient_6,
																							password_tRESTClient_6,
																							oidcConfiguration_tRESTClient_6);
																		} else {
																			bearerHeader_tRESTClient_6 = org.talend.esb.security.oidc.OidcClientUtils
																					.oidcClientBearer(
																							username_tRESTClient_6,
																							password_tRESTClient_6);
																		}
																	} catch (Exception ex) {
																		throw new javax.ws.rs.WebApplicationException(
																				"Failed to get OIDC access token: ",
																				ex);
																	}

																	webClient_tRESTClient_6.header("Authorization",
																			bearerHeader_tRESTClient_6);
																}

																// if FORM request then capture query parameters into
																// Form, otherwise set them as queries

																try {
																	// start send request

																	responseDoc_tRESTClient_6 = webClient_tRESTClient_6
																			.get(responseClass_tRESTClient_6);

																	int webClientResponseStatus_tRESTClient_6 = webClient_tRESTClient_6
																			.getResponse().getStatus();
																	if (webClientResponseStatus_tRESTClient_6 >= 300) {
																		throw new javax.ws.rs.WebApplicationException(
																				webClient_tRESTClient_6.getResponse());
																	}

																	if (row22 == null) {
																		row22 = new row22Struct();
																	}

																	row22.statusCode = webClientResponseStatus_tRESTClient_6;

																	{
																		Object responseObj_tRESTClient_6 = responseDoc_tRESTClient_6;

																		if (responseObj_tRESTClient_6 != null) {
																			if (responseClass_tRESTClient_6 == String.class) {
																				row22.string = (String) responseObj_tRESTClient_6;
																			} else {
																				routines.system.Document responseTalendDoc_tRESTClient_6 = null;
																				if (null != responseObj_tRESTClient_6) {
																					responseTalendDoc_tRESTClient_6 = new routines.system.Document();
																					responseTalendDoc_tRESTClient_6
																							.setDocument(
																									(org.dom4j.Document) responseObj_tRESTClient_6);
																				}
																				row22.body = responseTalendDoc_tRESTClient_6;
																			}
																		}
																	}

																	globalMap.put("tRESTClient_6_HEADERS",
																			webClient_tRESTClient_6.getResponse()
																					.getHeaders());

																} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_6) {

																	throw ex_tRESTClient_6;

																}

															} catch (Exception e_tRESTClient_6) {

																throw new TalendException(e_tRESTClient_6,
																		currentComponent, globalMap);

															}

															tos_count_tRESTClient_6++;

															/**
															 * [tRESTClient_6 main ] stop
															 */

															/**
															 * [tRESTClient_6 process_data_begin ] start
															 */

															currentComponent = "tRESTClient_6";

															/**
															 * [tRESTClient_6 process_data_begin ] stop
															 */
// Start of branch "row22"
															if (row22 != null) {

																/**
																 * [tExtractJSONFields_8 main ] start
																 */

																currentComponent = "tExtractJSONFields_8";

																if (row22.string != null) {// C_01
																	jsonStr_tExtractJSONFields_8 = row22.string
																			.toString();

																	row23 = null;

																	String loopPath_tExtractJSONFields_8 = "$";
																	java.util.List<Object> resultset_tExtractJSONFields_8 = new java.util.ArrayList<Object>();

																	boolean isStructError_tExtractJSONFields_8 = true;
																	com.jayway.jsonpath.ReadContext document_tExtractJSONFields_8 = null;
																	try {
																		document_tExtractJSONFields_8 = com.jayway.jsonpath.JsonPath
																				.parse(jsonStr_tExtractJSONFields_8);
																		com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
																				.getCompiledJsonPath(
																						loopPath_tExtractJSONFields_8);
																		Object result_tExtractJSONFields_8 = document_tExtractJSONFields_8
																				.read(compiledLoopPath_tExtractJSONFields_8,
																						net.minidev.json.JSONObject.class);
																		if (result_tExtractJSONFields_8 instanceof net.minidev.json.JSONArray) {
																			resultset_tExtractJSONFields_8 = (net.minidev.json.JSONArray) result_tExtractJSONFields_8;
																		} else {
																			resultset_tExtractJSONFields_8
																					.add(result_tExtractJSONFields_8);
																		}

																		isStructError_tExtractJSONFields_8 = false;
																	} catch (java.lang.Exception ex_tExtractJSONFields_8) {
																		System.err.println(
																				ex_tExtractJSONFields_8.getMessage());
																	}

																	String jsonPath_tExtractJSONFields_8 = null;
																	com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_8 = null;

																	Object value_tExtractJSONFields_8 = null;

																	Object root_tExtractJSONFields_8 = null;
																	for (int i_tExtractJSONFields_8 = 0; isStructError_tExtractJSONFields_8
																			|| (i_tExtractJSONFields_8 < resultset_tExtractJSONFields_8
																					.size()); i_tExtractJSONFields_8++) {
																		if (!isStructError_tExtractJSONFields_8) {
																			Object row_tExtractJSONFields_8 = resultset_tExtractJSONFields_8
																					.get(i_tExtractJSONFields_8);
																			row23 = null;
																			row23 = new row23Struct();
																			nb_line_tExtractJSONFields_8++;
																			try {
																				jsonPath_tExtractJSONFields_8 = "@.name";
																				compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
																						.getCompiledJsonPath(
																								jsonPath_tExtractJSONFields_8);

																				try {

																					value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
																							.read(row_tExtractJSONFields_8);

																					row23.name = value_tExtractJSONFields_8 == null
																							?

																							null

																							: value_tExtractJSONFields_8
																									.toString();
																				} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
																					row23.name =

																							null

																					;
																				}
																			} catch (java.lang.Exception ex_tExtractJSONFields_8) {
																				System.err
																						.println(ex_tExtractJSONFields_8
																								.getMessage());
																				row23 = null;
																			}

																		}

																		isStructError_tExtractJSONFields_8 = false;

//}

																		tos_count_tExtractJSONFields_8++;

																		/**
																		 * [tExtractJSONFields_8 main ] stop
																		 */

																		/**
																		 * [tExtractJSONFields_8 process_data_begin ]
																		 * start
																		 */

																		currentComponent = "tExtractJSONFields_8";

																		/**
																		 * [tExtractJSONFields_8 process_data_begin ]
																		 * stop
																		 */
// Start of branch "row23"
																		if (row23 != null) {

																			/**
																			 * [tJavaRow_6 main ] start
																			 */

																			currentComponent = "tJavaRow_6";

																			// code sample:
//
// multiply by 2 the row identifier
// row24.id = row23.id * 2;
//
// lowercase the name
// row24.name = row23.name.toLowerCase();

																			;

																			row24.string = "{\"text\": \""
																					+ this.globalMap
																							.get("text_drive_change")
																							.toString()
																					+ row23.name + "\"}";
																			nb_line_tJavaRow_6++;

																			tos_count_tJavaRow_6++;

																			/**
																			 * [tJavaRow_6 main ] stop
																			 */

																			/**
																			 * [tJavaRow_6 process_data_begin ] start
																			 */

																			currentComponent = "tJavaRow_6";

																			/**
																			 * [tJavaRow_6 process_data_begin ] stop
																			 */

																			/**
																			 * [tRESTClient_7 main ] start
																			 */

																			currentComponent = "tRESTClient_7";

// expected response body
																			javax.ws.rs.core.Response responseDoc_tRESTClient_7 = null;

																			try {
																				// request body
																				org.dom4j.Document requestDoc_tRESTClient_7 = null;
																				String requestString_tRESTClient_7 = null;
																				requestString_tRESTClient_7 = row24.string;

																				Object requestBody_tRESTClient_7 = requestDoc_tRESTClient_7 != null
																						? requestDoc_tRESTClient_7
																						: requestString_tRESTClient_7;

																				// resposne class name
																				Class<?> responseClass_tRESTClient_7 = String.class;

																				// create web client instance
																				org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_7 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

																				boolean inOSGi = routines.system.BundleUtils
																						.inOSGi();

																				final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_7 = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

																				String url = "https://hooks.slack.com/services/"
																						+ this.globalMap
																								.get("slack_token")
																								.toString();
																				// {baseUri}tRESTClient
																				factoryBean_tRESTClient_7
																						.setServiceName(
																								new javax.xml.namespace.QName(
																										url,
																										"tRESTClient"));
																				factoryBean_tRESTClient_7
																						.setAddress(url);

																				factoryBean_tRESTClient_7.setFeatures(
																						features_tRESTClient_7);

																				java.util.List<Object> providers_tRESTClient_7 = new java.util.ArrayList<Object>();
																				providers_tRESTClient_7.add(
																						new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
																							// workaround for
																							// https://jira.talendforge.org/browse/TESB-7276
																							public org.dom4j.Document readFrom(
																									Class<org.dom4j.Document> cls,
																									java.lang.reflect.Type type,
																									java.lang.annotation.Annotation[] anns,
																									javax.ws.rs.core.MediaType mt,
																									javax.ws.rs.core.MultivaluedMap<String, String> headers,
																									java.io.InputStream is)
																									throws IOException,
																									javax.ws.rs.WebApplicationException {
																								String contentLength = headers
																										.getFirst(
																												"Content-Length");
																								if (!org.apache.cxf.common.util.StringUtils
																										.isEmpty(
																												contentLength)
																										&& Integer
																												.valueOf(
																														contentLength) <= 0) {
																									try {
																										return org.dom4j.DocumentHelper
																												.parseText(
																														"<root/>");
																									} catch (org.dom4j.DocumentException e_tRESTClient_7) {
																										e_tRESTClient_7
																												.printStackTrace();
																									}
																									return null;
																								}
																								return super.readFrom(
																										cls, type, anns,
																										mt, headers,
																										is);
																							}
																						});
																				org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_7 = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
																				jsonProvider_tRESTClient_7
																						.setIgnoreNamespaces(true);
																				jsonProvider_tRESTClient_7
																						.setAttributesToElements(true);

																				jsonProvider_tRESTClient_7
																						.setSupportUnwrapped(true);
																				jsonProvider_tRESTClient_7
																						.setWrapperName("root");

																				jsonProvider_tRESTClient_7
																						.setDropRootElement(false);
																				jsonProvider_tRESTClient_7
																						.setConvertTypesToStrings(
																								false);
																				providers_tRESTClient_7.add(
																						jsonProvider_tRESTClient_7);
																				factoryBean_tRESTClient_7.setProviders(
																						providers_tRESTClient_7);
																				factoryBean_tRESTClient_7
																						.setTransportId(
																								"http://cxf.apache.org/transports/http");

																				boolean use_auth_tRESTClient_7 = false;
																				if (use_auth_tRESTClient_7
																						&& "SAML".equals("BASIC")) {
																					if (!inOSGi) {
																						throw new IllegalArgumentException(
																								"SAML based security scenarios are not supported in Studio (standalone)");
																					}
																					// set SAML Token authentication

																					final String decryptedPassword_tRESTClient_7 = routines.system.PasswordEncryptUtil
																							.decryptPassword(
																									"ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

																					org.apache.cxf.ws.security.trust.STSClient stsClient = org.talend.esb.security.saml.STSClientUtils
																							.createSTSClient(
																									factoryBean_tRESTClient_7
																											.getBus(),
																									"username",
																									decryptedPassword_tRESTClient_7);

																					org.talend.esb.security.saml.SAMLRESTUtils
																							.configureClient(
																									factoryBean_tRESTClient_7,
																									stsClient);
																				}

																				org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_7 = factoryBean_tRESTClient_7
																						.createWebClient();

																				// set request path
																				webClient_tRESTClient_7.path("");

																				// set connection properties
																				org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_7 = org.apache.cxf.jaxrs.client.WebClient
																						.getConfig(
																								webClient_tRESTClient_7);
																				org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_7 = clientConfig_tRESTClient_7
																						.getHttpConduit();

																				if (clientConfig_tRESTClient_7
																						.getEndpoint() != null
																						&& clientConfig_tRESTClient_7
																								.getEndpoint()
																								.getEndpointInfo() != null) {
																					clientConfig_tRESTClient_7
																							.getEndpoint()
																							.getEndpointInfo()
																							.setProperty(
																									"enable.webclient.operation.reporting",
																									true);
																				}

																				if (use_auth_tRESTClient_7
																						&& "BASIC".equals("BASIC")) {
																					// set BASIC auth

																					final String decryptedPassword_tRESTClient_7 = routines.system.PasswordEncryptUtil
																							.decryptPassword(
																									"ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

																					org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_7 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
																					authPolicy_tRESTClient_7
																							.setAuthorizationType(
																									"Basic");
																					authPolicy_tRESTClient_7
																							.setUserName("username");
																					authPolicy_tRESTClient_7
																							.setPassword(
																									decryptedPassword_tRESTClient_7);
																					conduit_tRESTClient_7
																							.setAuthorization(
																									authPolicy_tRESTClient_7);
																				} else if (use_auth_tRESTClient_7
																						&& "HTTP Digest"
																								.equals("BASIC")) {
																					// set Digest auth

																					final String decryptedPassword_tRESTClient_7 = routines.system.PasswordEncryptUtil
																							.decryptPassword(
																									"ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

																					org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_7 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
																					authPolicy_tRESTClient_7
																							.setAuthorizationType(
																									"Digest");
																					authPolicy_tRESTClient_7
																							.setUserName("username");
																					authPolicy_tRESTClient_7
																							.setPassword(
																									decryptedPassword_tRESTClient_7);
																					conduit_tRESTClient_7
																							.setAuthorization(
																									authPolicy_tRESTClient_7);
																				}

																				if (!inOSGi) {
																					conduit_tRESTClient_7.getClient()
																							.setReceiveTimeout(
																									(long) (60
																											* 1000L));
																					conduit_tRESTClient_7.getClient()
																							.setConnectionTimeout(
																									(long) (30
																											* 1000L));
																					boolean use_proxy_tRESTClient_7 = false;
																					if (use_proxy_tRESTClient_7) {

																						final String decryptedPassword_tRESTClient_7 = routines.system.PasswordEncryptUtil
																								.decryptPassword(
																										"ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");

																						conduit_tRESTClient_7
																								.getClient()
																								.setProxyServer(
																										"61.163.92.4");
																						conduit_tRESTClient_7
																								.getClient()
																								.setProxyServerPort(
																										Integer.valueOf(
																												8080));
																						conduit_tRESTClient_7
																								.getProxyAuthorization()
																								.setUserName("");
																						conduit_tRESTClient_7
																								.getProxyAuthorization()
																								.setPassword(
																										decryptedPassword_tRESTClient_7);
																					}
																				}

																				// set Content-Type
																				webClient_tRESTClient_7
																						.type("application/json");

																				// set Accept-Type
																				webClient_tRESTClient_7.accept("*/*");

																				// set optional query and header
																				// properties if any

																				if (use_auth_tRESTClient_7
																						&& "OAUTH2_BEARER"
																								.equals("BASIC")) {
																					// set oAuth2 bearer token
																					webClient_tRESTClient_7.header(
																							"Authorization",
																							"Bearer " + "");
																				}

																				if (use_auth_tRESTClient_7
																						&& "OIDC_PASSWORD_GRANT"
																								.equals("BASIC")) {

																					final String decryptedPassword_tRESTClient_7 = routines.system.PasswordEncryptUtil
																							.decryptPassword(
																									"ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

																					String username_tRESTClient_7 = "username";
																					String password_tRESTClient_7 = decryptedPassword_tRESTClient_7;

																					String bearerHeader_tRESTClient_7 = null;

																					try {
																						if (!inOSGi) {
																							org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_7 = new org.springframework.context.support.ClassPathXmlApplicationContext(
																									"META-INF/tesb/oidc-context.xml");
																							org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_7 = context_tRESTClient_7
																									.getBean(
																											org.talend.esb.security.oidc.OidcConfiguration.class);
																							bearerHeader_tRESTClient_7 = org.talend.esb.security.oidc.OidcClientUtils
																									.oidcClientBearer(
																											username_tRESTClient_7,
																											password_tRESTClient_7,
																											oidcConfiguration_tRESTClient_7);
																						} else {
																							bearerHeader_tRESTClient_7 = org.talend.esb.security.oidc.OidcClientUtils
																									.oidcClientBearer(
																											username_tRESTClient_7,
																											password_tRESTClient_7);
																						}
																					} catch (Exception ex) {
																						throw new javax.ws.rs.WebApplicationException(
																								"Failed to get OIDC access token: ",
																								ex);
																					}

																					webClient_tRESTClient_7.header(
																							"Authorization",
																							bearerHeader_tRESTClient_7);
																				}

																				// if FORM request then capture query
																				// parameters into Form, otherwise set
																				// them as queries

																				try {
																					// start send request

																					responseDoc_tRESTClient_7 = webClient_tRESTClient_7
																							.post(requestBody_tRESTClient_7);

																					int webClientResponseStatus_tRESTClient_7 = webClient_tRESTClient_7
																							.getResponse().getStatus();
																					if (webClientResponseStatus_tRESTClient_7 >= 300) {
																						throw new javax.ws.rs.WebApplicationException(
																								webClient_tRESTClient_7
																										.getResponse());
																					}

																				} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_7) {

																					throw ex_tRESTClient_7;

																				}

																			} catch (Exception e_tRESTClient_7) {

																				throw new TalendException(
																						e_tRESTClient_7,
																						currentComponent, globalMap);

																			}

																			tos_count_tRESTClient_7++;

																			/**
																			 * [tRESTClient_7 main ] stop
																			 */

																			/**
																			 * [tRESTClient_7 process_data_begin ] start
																			 */

																			currentComponent = "tRESTClient_7";

																			/**
																			 * [tRESTClient_7 process_data_begin ] stop
																			 */

																			/**
																			 * [tRESTClient_7 process_data_end ] start
																			 */

																			currentComponent = "tRESTClient_7";

																			/**
																			 * [tRESTClient_7 process_data_end ] stop
																			 */

																			/**
																			 * [tJavaRow_6 process_data_end ] start
																			 */

																			currentComponent = "tJavaRow_6";

																			/**
																			 * [tJavaRow_6 process_data_end ] stop
																			 */

																		} // End of branch "row23"

																		// end for
																	}

																} // C_01

																/**
																 * [tExtractJSONFields_8 process_data_end ] start
																 */

																currentComponent = "tExtractJSONFields_8";

																/**
																 * [tExtractJSONFields_8 process_data_end ] stop
																 */

															} // End of branch "row22"

															/**
															 * [tRESTClient_6 process_data_end ] start
															 */

															currentComponent = "tRESTClient_6";

															/**
															 * [tRESTClient_6 process_data_end ] stop
															 */

															/**
															 * [tJavaRow_3 process_data_end ] start
															 */

															currentComponent = "tJavaRow_3";

															/**
															 * [tJavaRow_3 process_data_end ] stop
															 */

														} // End of branch "row20"

														// end for
													}

												} // C_01

												/**
												 * [tExtractJSONFields_7 process_data_end ] start
												 */

												currentComponent = "tExtractJSONFields_7";

												/**
												 * [tExtractJSONFields_7 process_data_end ] stop
												 */

											} // End of branch "row16"

											/**
											 * [tRESTClient_4 process_data_end ] start
											 */

											currentComponent = "tRESTClient_4";

											/**
											 * [tRESTClient_4 process_data_end ] stop
											 */

										} // End of branch "row19"

										/**
										 * [tFilterRow_3 process_data_end ] start
										 */

										currentComponent = "tFilterRow_3";

										/**
										 * [tFilterRow_3 process_data_end ] stop
										 */

									} // End of branch "file_change"

// Start of branch "response"
									if (response != null) {

										/**
										 * [tRESTResponse_1 main ] start
										 */

										currentComponent = "tRESTResponse_1";

										java.io.OutputStream outputStream_tRESTResponse_1 = (java.io.OutputStream) globalMap
												.get("restResponseStream");
										boolean responseAlreadySent_tRESTResponse_1 = globalMap
												.containsKey("restResponse");

										if (null == outputStream_tRESTResponse_1
												&& responseAlreadySent_tRESTResponse_1) {
											throw new RuntimeException("Rest response already sent.");
										} else if (!globalMap.containsKey("restRequest")) {
											throw new RuntimeException("Not received rest request yet.");
										} else {
											Integer restProviderStatusCode_tRESTResponse_1 = 200;

											Object restProviderResponse_tRESTResponse_1 = null;
											if (null != response.body) {
												restProviderResponse_tRESTResponse_1 = response.body.getDocument();
											}

											java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_1 = new java.util.TreeMap<String, String>(
													String.CASE_INSENSITIVE_ORDER);

											java.util.Map<String, Object> restRequest_tRESTResponse_1 = (java.util.Map<String, Object>) globalMap
													.get("restRequest");
											org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_1 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_1
													.get("MESSAGE_CONTEXT");

											if (null == outputStream_tRESTResponse_1) {
												java.util.Map<String, Object> restResponse_tRESTResponse_1 = new java.util.HashMap<String, Object>();
												restResponse_tRESTResponse_1.put("BODY",
														restProviderResponse_tRESTResponse_1);
												restResponse_tRESTResponse_1.put("STATUS",
														restProviderStatusCode_tRESTResponse_1);
												restResponse_tRESTResponse_1.put("HEADERS",
														restProviderResponseHeaders_tRESTResponse_1);
												restResponse_tRESTResponse_1.put("drop.json.root.element",
														Boolean.valueOf(false));
												globalMap.put("restResponse", restResponse_tRESTResponse_1);

											} else {

												javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_1 = null;
												if (!responseAlreadySent_tRESTResponse_1) {
													org.apache.cxf.message.Message currentMessage = null;
													if (org.apache.cxf.jaxrs.utils.JAXRSUtils
															.getCurrentMessage() != null) {
														currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils
																.getCurrentMessage();
													} else {
														currentMessage = ((org.apache.cxf.message.Message) restRequest_tRESTResponse_1
																.get("CURRENT_MESSAGE"));
													}

													if (currentMessage != null
															&& currentMessage.getExchange() != null) {
														currentMessage.getExchange().put(
																StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
													}

													messageContext_tRESTResponse_1.put(
															org.apache.cxf.message.Message.RESPONSE_CODE,
															restProviderStatusCode_tRESTResponse_1);
													javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_1 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
													for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_1
															.entrySet()) {
														headersMultivaluedMap_tRESTResponse_1.putSingle(
																multivaluedHeader.getKey(),
																multivaluedHeader.getValue());
													}
													messageContext_tRESTResponse_1.put(
															org.apache.cxf.message.Message.PROTOCOL_HEADERS,
															headersMultivaluedMap_tRESTResponse_1);

													String responseContentType_tRESTResponse_1 = null;

													if (currentMessage != null
															&& currentMessage.getExchange() != null) {
														responseContentType_tRESTResponse_1 = (String) currentMessage
																.getExchange()
																.get(org.apache.cxf.message.Message.CONTENT_TYPE);
													}

													if (null == responseContentType_tRESTResponse_1) {
														// this should not be needed, just in case. set it to the first
														// value in the sorted list returned from HttpHeaders
														responseMediaType_tRESTResponse_1 = messageContext_tRESTResponse_1
																.getHttpHeaders().getAcceptableMediaTypes().get(0);
													} else {
														responseMediaType_tRESTResponse_1 = org.apache.cxf.jaxrs.utils.JAXRSUtils
																.toMediaType(responseContentType_tRESTResponse_1);
													}
													globalMap.put("restResponseMediaType",
															responseMediaType_tRESTResponse_1);

													String responseMediaSubType_tRESTResponse_1 = responseMediaType_tRESTResponse_1
															.getSubtype();
													if (responseMediaSubType_tRESTResponse_1.equals("xml")
															|| responseMediaSubType_tRESTResponse_1.endsWith("+xml")) {
														outputStream_tRESTResponse_1.write("<wrapper>".getBytes());
														globalMap.put("restResponseWrappingClosure", "</wrapper>");
													}
													if (responseMediaSubType_tRESTResponse_1.equals("json")
															|| responseMediaSubType_tRESTResponse_1.endsWith("+json")) {
														outputStream_tRESTResponse_1.write("[".getBytes());
														globalMap.put("restResponseWrappingClosure", "]");
													}

													globalMap.put("restResponse", true);
												} else {
													responseMediaType_tRESTResponse_1 = (javax.ws.rs.core.MediaType) globalMap
															.get("restResponseMediaType");
												}

												if (null != restProviderResponse_tRESTResponse_1) {
													String responseMediaSubType_tRESTResponse_1 = responseMediaType_tRESTResponse_1
															.getSubtype();
													if (responseMediaSubType_tRESTResponse_1.equals("json")
															|| responseMediaSubType_tRESTResponse_1.endsWith("+json")) {
														if (globalMap.containsKey("restResponseJsonStarted")) {
															outputStream_tRESTResponse_1.write(",".getBytes());
														} else {
															globalMap.put("restResponseJsonStarted", true);
														}
													}

													Class<? extends Object> responseBodyClass_tRESTResponse_1 = restProviderResponse_tRESTResponse_1
															.getClass();
													javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_1 = messageContext_tRESTResponse_1
															.getProviders();
													javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_1 = messageBodyProviders_tRESTResponse_1
															.getMessageBodyWriter(responseBodyClass_tRESTResponse_1,
																	responseBodyClass_tRESTResponse_1, null,
																	responseMediaType_tRESTResponse_1);

													if (messageBodyWriter_tRESTResponse_1 instanceof StreamingDOM4JProvider) {
														((StreamingDOM4JProvider) messageBodyWriter_tRESTResponse_1)
																.setGlobalMap(globalMap);
													}

													messageBodyWriter_tRESTResponse_1.writeTo(
															restProviderResponse_tRESTResponse_1,
															responseBodyClass_tRESTResponse_1,
															responseBodyClass_tRESTResponse_1,
															new java.lang.annotation.Annotation[] {},
															responseMediaType_tRESTResponse_1, null,
															outputStream_tRESTResponse_1);
												}
												// initial variant
												// outputStream_tRESTResponse_1.write(String.valueOf(restProviderResponse_tRESTResponse_1).getBytes());
												outputStream_tRESTResponse_1.flush();
											}
										}

										tos_count_tRESTResponse_1++;

										/**
										 * [tRESTResponse_1 main ] stop
										 */

										/**
										 * [tRESTResponse_1 process_data_begin ] start
										 */

										currentComponent = "tRESTResponse_1";

										/**
										 * [tRESTResponse_1 process_data_begin ] stop
										 */

										/**
										 * [tRESTResponse_1 process_data_end ] start
										 */

										currentComponent = "tRESTResponse_1";

										/**
										 * [tRESTResponse_1 process_data_end ] stop
										 */

									} // End of branch "response"

									/**
									 * [tMap_1 process_data_end ] start
									 */

									currentComponent = "tMap_1";

									/**
									 * [tMap_1 process_data_end ] stop
									 */

								} // End of branch "row15"

								// end for
							}

						} // C_01

						/**
						 * [tExtractJSONFields_6 process_data_end ] start
						 */

						currentComponent = "tExtractJSONFields_6";

						/**
						 * [tExtractJSONFields_6 process_data_end ] stop
						 */

						/**
						 * [tLogRow_6 process_data_end ] start
						 */

						currentComponent = "tLogRow_6";

						/**
						 * [tLogRow_6 process_data_end ] stop
						 */

					} // End of branch "drive_webhook_subcribe"

// Start of branch "load_select_option"
					if (load_select_option != null) {

						/**
						 * [tExtractJSONFields_9 main ] start
						 */

						currentComponent = "tExtractJSONFields_9";

						if (load_select_option.body != null) {// C_01
							jsonStr_tExtractJSONFields_9 = load_select_option.body.toString();

							row29 = null;

							String loopPath_tExtractJSONFields_9 = "$";
							java.util.List<Object> resultset_tExtractJSONFields_9 = new java.util.ArrayList<Object>();

							boolean isStructError_tExtractJSONFields_9 = true;
							com.jayway.jsonpath.ReadContext document_tExtractJSONFields_9 = null;
							try {
								document_tExtractJSONFields_9 = com.jayway.jsonpath.JsonPath
										.parse(jsonStr_tExtractJSONFields_9);
								com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(loopPath_tExtractJSONFields_9);
								Object result_tExtractJSONFields_9 = document_tExtractJSONFields_9
										.read(compiledLoopPath_tExtractJSONFields_9, net.minidev.json.JSONObject.class);
								if (result_tExtractJSONFields_9 instanceof net.minidev.json.JSONArray) {
									resultset_tExtractJSONFields_9 = (net.minidev.json.JSONArray) result_tExtractJSONFields_9;
								} else {
									resultset_tExtractJSONFields_9.add(result_tExtractJSONFields_9);
								}

								isStructError_tExtractJSONFields_9 = false;
							} catch (java.lang.Exception ex_tExtractJSONFields_9) {
								System.err.println(ex_tExtractJSONFields_9.getMessage());
							}

							String jsonPath_tExtractJSONFields_9 = null;
							com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_9 = null;

							Object value_tExtractJSONFields_9 = null;

							Object root_tExtractJSONFields_9 = null;
							for (int i_tExtractJSONFields_9 = 0; isStructError_tExtractJSONFields_9
									|| (i_tExtractJSONFields_9 < resultset_tExtractJSONFields_9
											.size()); i_tExtractJSONFields_9++) {
								if (!isStructError_tExtractJSONFields_9) {
									Object row_tExtractJSONFields_9 = resultset_tExtractJSONFields_9
											.get(i_tExtractJSONFields_9);
									row29 = null;
									row29 = new row29Struct();
									nb_line_tExtractJSONFields_9++;
									try {
										jsonPath_tExtractJSONFields_9 = "@.action_id";
										compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
												.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

										try {

											value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
													.read(row_tExtractJSONFields_9);

											row29.action_id = value_tExtractJSONFields_9 == null ?

													null

													: value_tExtractJSONFields_9.toString();
										} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
											row29.action_id =

													null

											;
										}
										jsonPath_tExtractJSONFields_9 = "@.block_id";
										compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
												.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

										try {

											value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
													.read(row_tExtractJSONFields_9);

											row29.block_id = value_tExtractJSONFields_9 == null ?

													null

													: value_tExtractJSONFields_9.toString();
										} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
											row29.block_id =

													null

											;
										}
									} catch (java.lang.Exception ex_tExtractJSONFields_9) {
										System.err.println(ex_tExtractJSONFields_9.getMessage());
										row29 = null;
									}

								}

								isStructError_tExtractJSONFields_9 = false;

//}

								tos_count_tExtractJSONFields_9++;

								/**
								 * [tExtractJSONFields_9 main ] stop
								 */

								/**
								 * [tExtractJSONFields_9 process_data_begin ] start
								 */

								currentComponent = "tExtractJSONFields_9";

								/**
								 * [tExtractJSONFields_9 process_data_begin ] stop
								 */
// Start of branch "row29"
								if (row29 != null) {

									/**
									 * [tMap_6 main ] start
									 */

									currentComponent = "tMap_6";

									boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_6 = false;
									boolean mainRowRejected_tMap_6 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
										// ###############################
										// # Output tables

										load_file_trashed = null;
										load_file_not_trash = null;

// # Output table : 'load_file_trashed'
										load_file_trashed_tmp.action_id = row29.action_id;
										load_file_trashed_tmp.block_id = row29.block_id;
										load_file_trashed = load_file_trashed_tmp;

// # Output table : 'load_file_not_trash'
										load_file_not_trash_tmp.action_id = row29.action_id;
										load_file_not_trash_tmp.block_id = row29.block_id;
										load_file_not_trash = load_file_not_trash_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_6 = false;

									tos_count_tMap_6++;

									/**
									 * [tMap_6 main ] stop
									 */

									/**
									 * [tMap_6 process_data_begin ] start
									 */

									currentComponent = "tMap_6";

									/**
									 * [tMap_6 process_data_begin ] stop
									 */
// Start of branch "load_file_trashed"
									if (load_file_trashed != null) {

										/**
										 * [tFilterRow_7 main ] start
										 */

										currentComponent = "tFilterRow_7";

										row32 = null;
										Operator_tFilterRow_7 ope_tFilterRow_7 = new Operator_tFilterRow_7("&&");
										ope_tFilterRow_7.matches(
												(load_file_trashed.action_id == null ? false
														: load_file_trashed.action_id
																.compareTo("drive_untrash_select_file") == 0),
												"action_id.compareTo(\"drive_untrash_select_file\") == 0 failed");

										if (ope_tFilterRow_7.getMatchFlag()) {
											if (row32 == null) {
												row32 = new row32Struct();
											}
											row32.action_id = load_file_trashed.action_id;
											row32.block_id = load_file_trashed.block_id;
											nb_line_ok_tFilterRow_7++;
										} else {
											nb_line_reject_tFilterRow_7++;
										}

										nb_line_tFilterRow_7++;

										tos_count_tFilterRow_7++;

										/**
										 * [tFilterRow_7 main ] stop
										 */

										/**
										 * [tFilterRow_7 process_data_begin ] start
										 */

										currentComponent = "tFilterRow_7";

										/**
										 * [tFilterRow_7 process_data_begin ] stop
										 */
// Start of branch "row32"
										if (row32 != null) {

											/**
											 * [tRESTClient_11 main ] start
											 */

											currentComponent = "tRESTClient_11";

											row33 = null;

// expected response body
											Object responseDoc_tRESTClient_11 = null;

											try {
												// request body
												org.dom4j.Document requestDoc_tRESTClient_11 = null;
												String requestString_tRESTClient_11 = null;

												Object requestBody_tRESTClient_11 = requestDoc_tRESTClient_11 != null
														? requestDoc_tRESTClient_11
														: requestString_tRESTClient_11;

												// resposne class name
												Class<?> responseClass_tRESTClient_11 = String.class;

												// create web client instance
												org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_11 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

												boolean inOSGi = routines.system.BundleUtils.inOSGi();

												final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_11 = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

												String url = "https://www.googleapis.com/drive/v2/files?q=trashed%3Dtrue";
												// {baseUri}tRESTClient
												factoryBean_tRESTClient_11.setServiceName(
														new javax.xml.namespace.QName(url, "tRESTClient"));
												factoryBean_tRESTClient_11.setAddress(url);

												factoryBean_tRESTClient_11.setFeatures(features_tRESTClient_11);

												java.util.List<Object> providers_tRESTClient_11 = new java.util.ArrayList<Object>();
												providers_tRESTClient_11
														.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
															// workaround for
															// https://jira.talendforge.org/browse/TESB-7276
															public org.dom4j.Document readFrom(
																	Class<org.dom4j.Document> cls,
																	java.lang.reflect.Type type,
																	java.lang.annotation.Annotation[] anns,
																	javax.ws.rs.core.MediaType mt,
																	javax.ws.rs.core.MultivaluedMap<String, String> headers,
																	java.io.InputStream is) throws IOException,
																	javax.ws.rs.WebApplicationException {
																String contentLength = headers
																		.getFirst("Content-Length");
																if (!org.apache.cxf.common.util.StringUtils
																		.isEmpty(contentLength)
																		&& Integer.valueOf(contentLength) <= 0) {
																	try {
																		return org.dom4j.DocumentHelper
																				.parseText("<root/>");
																	} catch (org.dom4j.DocumentException e_tRESTClient_11) {
																		e_tRESTClient_11.printStackTrace();
																	}
																	return null;
																}
																return super.readFrom(cls, type, anns, mt, headers, is);
															}
														});
												org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_11 = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
												jsonProvider_tRESTClient_11.setIgnoreNamespaces(true);
												jsonProvider_tRESTClient_11.setAttributesToElements(true);

												jsonProvider_tRESTClient_11.setSupportUnwrapped(true);
												jsonProvider_tRESTClient_11.setWrapperName("root");

												jsonProvider_tRESTClient_11.setDropRootElement(false);
												jsonProvider_tRESTClient_11.setConvertTypesToStrings(false);
												providers_tRESTClient_11.add(jsonProvider_tRESTClient_11);
												factoryBean_tRESTClient_11.setProviders(providers_tRESTClient_11);
												factoryBean_tRESTClient_11
														.setTransportId("http://cxf.apache.org/transports/http");

												boolean use_auth_tRESTClient_11 = false;
												if (use_auth_tRESTClient_11 && "SAML".equals("BASIC")) {
													if (!inOSGi) {
														throw new IllegalArgumentException(
																"SAML based security scenarios are not supported in Studio (standalone)");
													}
													// set SAML Token authentication

													final String decryptedPassword_tRESTClient_11 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													org.apache.cxf.ws.security.trust.STSClient stsClient = org.talend.esb.security.saml.STSClientUtils
															.createSTSClient(factoryBean_tRESTClient_11.getBus(),
																	"username", decryptedPassword_tRESTClient_11);

													org.talend.esb.security.saml.SAMLRESTUtils
															.configureClient(factoryBean_tRESTClient_11, stsClient);
												}

												org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_11 = factoryBean_tRESTClient_11
														.createWebClient();

												// set request path
												webClient_tRESTClient_11.path("");

												// set connection properties
												org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_11 = org.apache.cxf.jaxrs.client.WebClient
														.getConfig(webClient_tRESTClient_11);
												org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_11 = clientConfig_tRESTClient_11
														.getHttpConduit();

												if (clientConfig_tRESTClient_11.getEndpoint() != null
														&& clientConfig_tRESTClient_11.getEndpoint()
																.getEndpointInfo() != null) {
													clientConfig_tRESTClient_11.getEndpoint().getEndpointInfo()
															.setProperty("enable.webclient.operation.reporting", true);
												}

												if (use_auth_tRESTClient_11 && "BASIC".equals("BASIC")) {
													// set BASIC auth

													final String decryptedPassword_tRESTClient_11 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_11 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
													authPolicy_tRESTClient_11.setAuthorizationType("Basic");
													authPolicy_tRESTClient_11.setUserName("username");
													authPolicy_tRESTClient_11
															.setPassword(decryptedPassword_tRESTClient_11);
													conduit_tRESTClient_11.setAuthorization(authPolicy_tRESTClient_11);
												} else if (use_auth_tRESTClient_11 && "HTTP Digest".equals("BASIC")) {
													// set Digest auth

													final String decryptedPassword_tRESTClient_11 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_11 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
													authPolicy_tRESTClient_11.setAuthorizationType("Digest");
													authPolicy_tRESTClient_11.setUserName("username");
													authPolicy_tRESTClient_11
															.setPassword(decryptedPassword_tRESTClient_11);
													conduit_tRESTClient_11.setAuthorization(authPolicy_tRESTClient_11);
												}

												if (!inOSGi) {
													conduit_tRESTClient_11.getClient()
															.setReceiveTimeout((long) (60 * 1000L));
													conduit_tRESTClient_11.getClient()
															.setConnectionTimeout((long) (30 * 1000L));
													boolean use_proxy_tRESTClient_11 = false;
													if (use_proxy_tRESTClient_11) {

														final String decryptedPassword_tRESTClient_11 = routines.system.PasswordEncryptUtil
																.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");

														conduit_tRESTClient_11.getClient()
																.setProxyServer("61.163.92.4");
														conduit_tRESTClient_11.getClient()
																.setProxyServerPort(Integer.valueOf(8080));
														conduit_tRESTClient_11.getProxyAuthorization().setUserName("");
														conduit_tRESTClient_11.getProxyAuthorization()
																.setPassword(decryptedPassword_tRESTClient_11);
													}
												}

												// set Accept-Type
												webClient_tRESTClient_11.accept("*/*");

												// set optional query and header properties if any

												webClient_tRESTClient_11.header("Authorization",
														"Bearer " + this.globalMap.get("drive_access_token"));

												if (use_auth_tRESTClient_11 && "OAUTH2_BEARER".equals("BASIC")) {
													// set oAuth2 bearer token
													webClient_tRESTClient_11.header("Authorization", "Bearer " + "");
												}

												if (use_auth_tRESTClient_11 && "OIDC_PASSWORD_GRANT".equals("BASIC")) {

													final String decryptedPassword_tRESTClient_11 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													String username_tRESTClient_11 = "username";
													String password_tRESTClient_11 = decryptedPassword_tRESTClient_11;

													String bearerHeader_tRESTClient_11 = null;

													try {
														if (!inOSGi) {
															org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_11 = new org.springframework.context.support.ClassPathXmlApplicationContext(
																	"META-INF/tesb/oidc-context.xml");
															org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_11 = context_tRESTClient_11
																	.getBean(
																			org.talend.esb.security.oidc.OidcConfiguration.class);
															bearerHeader_tRESTClient_11 = org.talend.esb.security.oidc.OidcClientUtils
																	.oidcClientBearer(username_tRESTClient_11,
																			password_tRESTClient_11,
																			oidcConfiguration_tRESTClient_11);
														} else {
															bearerHeader_tRESTClient_11 = org.talend.esb.security.oidc.OidcClientUtils
																	.oidcClientBearer(username_tRESTClient_11,
																			password_tRESTClient_11);
														}
													} catch (Exception ex) {
														throw new javax.ws.rs.WebApplicationException(
																"Failed to get OIDC access token: ", ex);
													}

													webClient_tRESTClient_11.header("Authorization",
															bearerHeader_tRESTClient_11);
												}

												// if FORM request then capture query parameters into Form, otherwise
												// set them as queries

												try {
													// start send request

													responseDoc_tRESTClient_11 = webClient_tRESTClient_11
															.get(responseClass_tRESTClient_11);

													int webClientResponseStatus_tRESTClient_11 = webClient_tRESTClient_11
															.getResponse().getStatus();
													if (webClientResponseStatus_tRESTClient_11 >= 300) {
														throw new javax.ws.rs.WebApplicationException(
																webClient_tRESTClient_11.getResponse());
													}

													if (row33 == null) {
														row33 = new row33Struct();
													}

													row33.statusCode = webClientResponseStatus_tRESTClient_11;

													{
														Object responseObj_tRESTClient_11 = responseDoc_tRESTClient_11;

														if (responseObj_tRESTClient_11 != null) {
															if (responseClass_tRESTClient_11 == String.class) {
																row33.string = (String) responseObj_tRESTClient_11;
															} else {
																routines.system.Document responseTalendDoc_tRESTClient_11 = null;
																if (null != responseObj_tRESTClient_11) {
																	responseTalendDoc_tRESTClient_11 = new routines.system.Document();
																	responseTalendDoc_tRESTClient_11.setDocument(
																			(org.dom4j.Document) responseObj_tRESTClient_11);
																}
																row33.body = responseTalendDoc_tRESTClient_11;
															}
														}
													}

													globalMap.put("tRESTClient_11_HEADERS",
															webClient_tRESTClient_11.getResponse().getHeaders());

												} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_11) {

													throw ex_tRESTClient_11;

												}

											} catch (Exception e_tRESTClient_11) {

												throw new TalendException(e_tRESTClient_11, currentComponent,
														globalMap);

											}

											tos_count_tRESTClient_11++;

											/**
											 * [tRESTClient_11 main ] stop
											 */

											/**
											 * [tRESTClient_11 process_data_begin ] start
											 */

											currentComponent = "tRESTClient_11";

											/**
											 * [tRESTClient_11 process_data_begin ] stop
											 */
// Start of branch "row33"
											if (row33 != null) {

												/**
												 * [tRESTResponse_3 main ] start
												 */

												currentComponent = "tRESTResponse_3";

												java.io.OutputStream outputStream_tRESTResponse_3 = (java.io.OutputStream) globalMap
														.get("restResponseStream");
												boolean responseAlreadySent_tRESTResponse_3 = globalMap
														.containsKey("restResponse");

												if (null == outputStream_tRESTResponse_3
														&& responseAlreadySent_tRESTResponse_3) {
													throw new RuntimeException("Rest response already sent.");
												} else if (!globalMap.containsKey("restRequest")) {
													throw new RuntimeException("Not received rest request yet.");
												} else {
													Integer restProviderStatusCode_tRESTResponse_3 = 200;

													Object restProviderResponse_tRESTResponse_3 = null;
													restProviderResponse_tRESTResponse_3 = row33.string;
													if (null != row33.body) {
														restProviderResponse_tRESTResponse_3 = row33.body.getDocument();
													}

													java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_3 = new java.util.TreeMap<String, String>(
															String.CASE_INSENSITIVE_ORDER);

													java.util.Map<String, Object> restRequest_tRESTResponse_3 = (java.util.Map<String, Object>) globalMap
															.get("restRequest");
													org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_3 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_3
															.get("MESSAGE_CONTEXT");

													if (null == outputStream_tRESTResponse_3) {
														java.util.Map<String, Object> restResponse_tRESTResponse_3 = new java.util.HashMap<String, Object>();
														restResponse_tRESTResponse_3.put("BODY",
																restProviderResponse_tRESTResponse_3);
														restResponse_tRESTResponse_3.put("STATUS",
																restProviderStatusCode_tRESTResponse_3);
														restResponse_tRESTResponse_3.put("HEADERS",
																restProviderResponseHeaders_tRESTResponse_3);
														restResponse_tRESTResponse_3.put("drop.json.root.element",
																Boolean.valueOf(false));
														globalMap.put("restResponse", restResponse_tRESTResponse_3);

													} else {

														javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_3 = null;
														if (!responseAlreadySent_tRESTResponse_3) {
															org.apache.cxf.message.Message currentMessage = null;
															if (org.apache.cxf.jaxrs.utils.JAXRSUtils
																	.getCurrentMessage() != null) {
																currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils
																		.getCurrentMessage();
															} else {
																currentMessage = ((org.apache.cxf.message.Message) restRequest_tRESTResponse_3
																		.get("CURRENT_MESSAGE"));
															}

															if (currentMessage != null
																	&& currentMessage.getExchange() != null) {
																currentMessage.getExchange().put(
																		StreamingDOM4JProvider.SUPRESS_XML_DECLARATION,
																		true);
															}

															messageContext_tRESTResponse_3.put(
																	org.apache.cxf.message.Message.RESPONSE_CODE,
																	restProviderStatusCode_tRESTResponse_3);
															javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_3 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
															for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_3
																	.entrySet()) {
																headersMultivaluedMap_tRESTResponse_3.putSingle(
																		multivaluedHeader.getKey(),
																		multivaluedHeader.getValue());
															}
															messageContext_tRESTResponse_3.put(
																	org.apache.cxf.message.Message.PROTOCOL_HEADERS,
																	headersMultivaluedMap_tRESTResponse_3);

															String responseContentType_tRESTResponse_3 = null;

															if (currentMessage != null
																	&& currentMessage.getExchange() != null) {
																responseContentType_tRESTResponse_3 = (String) currentMessage
																		.getExchange()
																		.get(org.apache.cxf.message.Message.CONTENT_TYPE);
															}

															if (null == responseContentType_tRESTResponse_3) {
																// this should not be needed, just in case. set it to
																// the first value in the sorted list returned from
																// HttpHeaders
																responseMediaType_tRESTResponse_3 = messageContext_tRESTResponse_3
																		.getHttpHeaders().getAcceptableMediaTypes()
																		.get(0);
															} else {
																responseMediaType_tRESTResponse_3 = org.apache.cxf.jaxrs.utils.JAXRSUtils
																		.toMediaType(
																				responseContentType_tRESTResponse_3);
															}
															globalMap.put("restResponseMediaType",
																	responseMediaType_tRESTResponse_3);

															String responseMediaSubType_tRESTResponse_3 = responseMediaType_tRESTResponse_3
																	.getSubtype();
															if (responseMediaSubType_tRESTResponse_3.equals("xml")
																	|| responseMediaSubType_tRESTResponse_3
																			.endsWith("+xml")) {
																outputStream_tRESTResponse_3
																		.write("<wrapper>".getBytes());
																globalMap.put("restResponseWrappingClosure",
																		"</wrapper>");
															}
															if (responseMediaSubType_tRESTResponse_3.equals("json")
																	|| responseMediaSubType_tRESTResponse_3
																			.endsWith("+json")) {
																outputStream_tRESTResponse_3.write("[".getBytes());
																globalMap.put("restResponseWrappingClosure", "]");
															}

															globalMap.put("restResponse", true);
														} else {
															responseMediaType_tRESTResponse_3 = (javax.ws.rs.core.MediaType) globalMap
																	.get("restResponseMediaType");
														}

														if (null != restProviderResponse_tRESTResponse_3) {
															String responseMediaSubType_tRESTResponse_3 = responseMediaType_tRESTResponse_3
																	.getSubtype();
															if (responseMediaSubType_tRESTResponse_3.equals("json")
																	|| responseMediaSubType_tRESTResponse_3
																			.endsWith("+json")) {
																if (globalMap.containsKey("restResponseJsonStarted")) {
																	outputStream_tRESTResponse_3.write(",".getBytes());
																} else {
																	globalMap.put("restResponseJsonStarted", true);
																}
															}

															Class<? extends Object> responseBodyClass_tRESTResponse_3 = restProviderResponse_tRESTResponse_3
																	.getClass();
															javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_3 = messageContext_tRESTResponse_3
																	.getProviders();
															javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_3 = messageBodyProviders_tRESTResponse_3
																	.getMessageBodyWriter(
																			responseBodyClass_tRESTResponse_3,
																			responseBodyClass_tRESTResponse_3, null,
																			responseMediaType_tRESTResponse_3);

															if (messageBodyWriter_tRESTResponse_3 instanceof StreamingDOM4JProvider) {
																((StreamingDOM4JProvider) messageBodyWriter_tRESTResponse_3)
																		.setGlobalMap(globalMap);
															}

															messageBodyWriter_tRESTResponse_3.writeTo(
																	restProviderResponse_tRESTResponse_3,
																	responseBodyClass_tRESTResponse_3,
																	responseBodyClass_tRESTResponse_3,
																	new java.lang.annotation.Annotation[] {},
																	responseMediaType_tRESTResponse_3, null,
																	outputStream_tRESTResponse_3);
														}
														// initial variant
														// outputStream_tRESTResponse_3.write(String.valueOf(restProviderResponse_tRESTResponse_3).getBytes());
														outputStream_tRESTResponse_3.flush();
													}
												}

												tos_count_tRESTResponse_3++;

												/**
												 * [tRESTResponse_3 main ] stop
												 */

												/**
												 * [tRESTResponse_3 process_data_begin ] start
												 */

												currentComponent = "tRESTResponse_3";

												/**
												 * [tRESTResponse_3 process_data_begin ] stop
												 */

												/**
												 * [tRESTResponse_3 process_data_end ] start
												 */

												currentComponent = "tRESTResponse_3";

												/**
												 * [tRESTResponse_3 process_data_end ] stop
												 */

											} // End of branch "row33"

											/**
											 * [tRESTClient_11 process_data_end ] start
											 */

											currentComponent = "tRESTClient_11";

											/**
											 * [tRESTClient_11 process_data_end ] stop
											 */

										} // End of branch "row32"

										/**
										 * [tFilterRow_7 process_data_end ] start
										 */

										currentComponent = "tFilterRow_7";

										/**
										 * [tFilterRow_7 process_data_end ] stop
										 */

									} // End of branch "load_file_trashed"

// Start of branch "load_file_not_trash"
									if (load_file_not_trash != null) {

										/**
										 * [tFilterRow_6 main ] start
										 */

										currentComponent = "tFilterRow_6";

										row30 = null;
										Operator_tFilterRow_6 ope_tFilterRow_6 = new Operator_tFilterRow_6("&&");
										ope_tFilterRow_6.matches(
												(load_file_not_trash.action_id == null ? false
														: load_file_not_trash.action_id
																.compareTo("drive_trash_select_file") == 0),
												"action_id.compareTo(\"drive_trash_select_file\") == 0 failed");

										if (ope_tFilterRow_6.getMatchFlag()) {
											if (row30 == null) {
												row30 = new row30Struct();
											}
											row30.action_id = load_file_not_trash.action_id;
											row30.block_id = load_file_not_trash.block_id;
											nb_line_ok_tFilterRow_6++;
										} else {
											nb_line_reject_tFilterRow_6++;
										}

										nb_line_tFilterRow_6++;

										tos_count_tFilterRow_6++;

										/**
										 * [tFilterRow_6 main ] stop
										 */

										/**
										 * [tFilterRow_6 process_data_begin ] start
										 */

										currentComponent = "tFilterRow_6";

										/**
										 * [tFilterRow_6 process_data_begin ] stop
										 */
// Start of branch "row30"
										if (row30 != null) {

											/**
											 * [tRESTClient_10 main ] start
											 */

											currentComponent = "tRESTClient_10";

											row31 = null;

// expected response body
											Object responseDoc_tRESTClient_10 = null;

											try {
												// request body
												org.dom4j.Document requestDoc_tRESTClient_10 = null;
												String requestString_tRESTClient_10 = null;

												Object requestBody_tRESTClient_10 = requestDoc_tRESTClient_10 != null
														? requestDoc_tRESTClient_10
														: requestString_tRESTClient_10;

												// resposne class name
												Class<?> responseClass_tRESTClient_10 = String.class;

												// create web client instance
												org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_10 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

												boolean inOSGi = routines.system.BundleUtils.inOSGi();

												final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_10 = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

												String url = "https://www.googleapis.com/drive/v2/files?q=trashed%3Dfalse";
												// {baseUri}tRESTClient
												factoryBean_tRESTClient_10.setServiceName(
														new javax.xml.namespace.QName(url, "tRESTClient"));
												factoryBean_tRESTClient_10.setAddress(url);

												factoryBean_tRESTClient_10.setFeatures(features_tRESTClient_10);

												java.util.List<Object> providers_tRESTClient_10 = new java.util.ArrayList<Object>();
												providers_tRESTClient_10
														.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
															// workaround for
															// https://jira.talendforge.org/browse/TESB-7276
															public org.dom4j.Document readFrom(
																	Class<org.dom4j.Document> cls,
																	java.lang.reflect.Type type,
																	java.lang.annotation.Annotation[] anns,
																	javax.ws.rs.core.MediaType mt,
																	javax.ws.rs.core.MultivaluedMap<String, String> headers,
																	java.io.InputStream is) throws IOException,
																	javax.ws.rs.WebApplicationException {
																String contentLength = headers
																		.getFirst("Content-Length");
																if (!org.apache.cxf.common.util.StringUtils
																		.isEmpty(contentLength)
																		&& Integer.valueOf(contentLength) <= 0) {
																	try {
																		return org.dom4j.DocumentHelper
																				.parseText("<root/>");
																	} catch (org.dom4j.DocumentException e_tRESTClient_10) {
																		e_tRESTClient_10.printStackTrace();
																	}
																	return null;
																}
																return super.readFrom(cls, type, anns, mt, headers, is);
															}
														});
												org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_10 = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
												jsonProvider_tRESTClient_10.setIgnoreNamespaces(true);
												jsonProvider_tRESTClient_10.setAttributesToElements(true);

												jsonProvider_tRESTClient_10.setSupportUnwrapped(true);
												jsonProvider_tRESTClient_10.setWrapperName("root");

												jsonProvider_tRESTClient_10.setDropRootElement(false);
												jsonProvider_tRESTClient_10.setConvertTypesToStrings(false);
												providers_tRESTClient_10.add(jsonProvider_tRESTClient_10);
												factoryBean_tRESTClient_10.setProviders(providers_tRESTClient_10);
												factoryBean_tRESTClient_10
														.setTransportId("http://cxf.apache.org/transports/http");

												boolean use_auth_tRESTClient_10 = false;
												if (use_auth_tRESTClient_10 && "SAML".equals("BASIC")) {
													if (!inOSGi) {
														throw new IllegalArgumentException(
																"SAML based security scenarios are not supported in Studio (standalone)");
													}
													// set SAML Token authentication

													final String decryptedPassword_tRESTClient_10 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													org.apache.cxf.ws.security.trust.STSClient stsClient = org.talend.esb.security.saml.STSClientUtils
															.createSTSClient(factoryBean_tRESTClient_10.getBus(),
																	"username", decryptedPassword_tRESTClient_10);

													org.talend.esb.security.saml.SAMLRESTUtils
															.configureClient(factoryBean_tRESTClient_10, stsClient);
												}

												org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_10 = factoryBean_tRESTClient_10
														.createWebClient();

												// set request path
												webClient_tRESTClient_10.path("");

												// set connection properties
												org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_10 = org.apache.cxf.jaxrs.client.WebClient
														.getConfig(webClient_tRESTClient_10);
												org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_10 = clientConfig_tRESTClient_10
														.getHttpConduit();

												if (clientConfig_tRESTClient_10.getEndpoint() != null
														&& clientConfig_tRESTClient_10.getEndpoint()
																.getEndpointInfo() != null) {
													clientConfig_tRESTClient_10.getEndpoint().getEndpointInfo()
															.setProperty("enable.webclient.operation.reporting", true);
												}

												if (use_auth_tRESTClient_10 && "BASIC".equals("BASIC")) {
													// set BASIC auth

													final String decryptedPassword_tRESTClient_10 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_10 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
													authPolicy_tRESTClient_10.setAuthorizationType("Basic");
													authPolicy_tRESTClient_10.setUserName("username");
													authPolicy_tRESTClient_10
															.setPassword(decryptedPassword_tRESTClient_10);
													conduit_tRESTClient_10.setAuthorization(authPolicy_tRESTClient_10);
												} else if (use_auth_tRESTClient_10 && "HTTP Digest".equals("BASIC")) {
													// set Digest auth

													final String decryptedPassword_tRESTClient_10 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_10 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
													authPolicy_tRESTClient_10.setAuthorizationType("Digest");
													authPolicy_tRESTClient_10.setUserName("username");
													authPolicy_tRESTClient_10
															.setPassword(decryptedPassword_tRESTClient_10);
													conduit_tRESTClient_10.setAuthorization(authPolicy_tRESTClient_10);
												}

												if (!inOSGi) {
													conduit_tRESTClient_10.getClient()
															.setReceiveTimeout((long) (60 * 1000L));
													conduit_tRESTClient_10.getClient()
															.setConnectionTimeout((long) (30 * 1000L));
													boolean use_proxy_tRESTClient_10 = false;
													if (use_proxy_tRESTClient_10) {

														final String decryptedPassword_tRESTClient_10 = routines.system.PasswordEncryptUtil
																.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");

														conduit_tRESTClient_10.getClient()
																.setProxyServer("61.163.92.4");
														conduit_tRESTClient_10.getClient()
																.setProxyServerPort(Integer.valueOf(8080));
														conduit_tRESTClient_10.getProxyAuthorization().setUserName("");
														conduit_tRESTClient_10.getProxyAuthorization()
																.setPassword(decryptedPassword_tRESTClient_10);
													}
												}

												// set Accept-Type
												webClient_tRESTClient_10.accept("*/*");

												// set optional query and header properties if any

												webClient_tRESTClient_10.header("Authorization",
														"Bearer " + this.globalMap.get("drive_access_token"));

												if (use_auth_tRESTClient_10 && "OAUTH2_BEARER".equals("BASIC")) {
													// set oAuth2 bearer token
													webClient_tRESTClient_10.header("Authorization", "Bearer " + "");
												}

												if (use_auth_tRESTClient_10 && "OIDC_PASSWORD_GRANT".equals("BASIC")) {

													final String decryptedPassword_tRESTClient_10 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													String username_tRESTClient_10 = "username";
													String password_tRESTClient_10 = decryptedPassword_tRESTClient_10;

													String bearerHeader_tRESTClient_10 = null;

													try {
														if (!inOSGi) {
															org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_10 = new org.springframework.context.support.ClassPathXmlApplicationContext(
																	"META-INF/tesb/oidc-context.xml");
															org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_10 = context_tRESTClient_10
																	.getBean(
																			org.talend.esb.security.oidc.OidcConfiguration.class);
															bearerHeader_tRESTClient_10 = org.talend.esb.security.oidc.OidcClientUtils
																	.oidcClientBearer(username_tRESTClient_10,
																			password_tRESTClient_10,
																			oidcConfiguration_tRESTClient_10);
														} else {
															bearerHeader_tRESTClient_10 = org.talend.esb.security.oidc.OidcClientUtils
																	.oidcClientBearer(username_tRESTClient_10,
																			password_tRESTClient_10);
														}
													} catch (Exception ex) {
														throw new javax.ws.rs.WebApplicationException(
																"Failed to get OIDC access token: ", ex);
													}

													webClient_tRESTClient_10.header("Authorization",
															bearerHeader_tRESTClient_10);
												}

												// if FORM request then capture query parameters into Form, otherwise
												// set them as queries

												try {
													// start send request

													responseDoc_tRESTClient_10 = webClient_tRESTClient_10
															.get(responseClass_tRESTClient_10);

													int webClientResponseStatus_tRESTClient_10 = webClient_tRESTClient_10
															.getResponse().getStatus();
													if (webClientResponseStatus_tRESTClient_10 >= 300) {
														throw new javax.ws.rs.WebApplicationException(
																webClient_tRESTClient_10.getResponse());
													}

													if (row31 == null) {
														row31 = new row31Struct();
													}

													row31.statusCode = webClientResponseStatus_tRESTClient_10;

													{
														Object responseObj_tRESTClient_10 = responseDoc_tRESTClient_10;

														if (responseObj_tRESTClient_10 != null) {
															if (responseClass_tRESTClient_10 == String.class) {
																row31.string = (String) responseObj_tRESTClient_10;
															} else {
																routines.system.Document responseTalendDoc_tRESTClient_10 = null;
																if (null != responseObj_tRESTClient_10) {
																	responseTalendDoc_tRESTClient_10 = new routines.system.Document();
																	responseTalendDoc_tRESTClient_10.setDocument(
																			(org.dom4j.Document) responseObj_tRESTClient_10);
																}
																row31.body = responseTalendDoc_tRESTClient_10;
															}
														}
													}

													globalMap.put("tRESTClient_10_HEADERS",
															webClient_tRESTClient_10.getResponse().getHeaders());

												} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_10) {

													throw ex_tRESTClient_10;

												}

											} catch (Exception e_tRESTClient_10) {

												throw new TalendException(e_tRESTClient_10, currentComponent,
														globalMap);

											}

											tos_count_tRESTClient_10++;

											/**
											 * [tRESTClient_10 main ] stop
											 */

											/**
											 * [tRESTClient_10 process_data_begin ] start
											 */

											currentComponent = "tRESTClient_10";

											/**
											 * [tRESTClient_10 process_data_begin ] stop
											 */
// Start of branch "row31"
											if (row31 != null) {

												/**
												 * [tRESTResponse_2 main ] start
												 */

												currentComponent = "tRESTResponse_2";

												java.io.OutputStream outputStream_tRESTResponse_2 = (java.io.OutputStream) globalMap
														.get("restResponseStream");
												boolean responseAlreadySent_tRESTResponse_2 = globalMap
														.containsKey("restResponse");

												if (null == outputStream_tRESTResponse_2
														&& responseAlreadySent_tRESTResponse_2) {
													throw new RuntimeException("Rest response already sent.");
												} else if (!globalMap.containsKey("restRequest")) {
													throw new RuntimeException("Not received rest request yet.");
												} else {
													Integer restProviderStatusCode_tRESTResponse_2 = 200;

													Object restProviderResponse_tRESTResponse_2 = null;
													restProviderResponse_tRESTResponse_2 = row31.string;
													if (null != row31.body) {
														restProviderResponse_tRESTResponse_2 = row31.body.getDocument();
													}

													java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_2 = new java.util.TreeMap<String, String>(
															String.CASE_INSENSITIVE_ORDER);

													java.util.Map<String, Object> restRequest_tRESTResponse_2 = (java.util.Map<String, Object>) globalMap
															.get("restRequest");
													org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_2 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_2
															.get("MESSAGE_CONTEXT");

													if (null == outputStream_tRESTResponse_2) {
														java.util.Map<String, Object> restResponse_tRESTResponse_2 = new java.util.HashMap<String, Object>();
														restResponse_tRESTResponse_2.put("BODY",
																restProviderResponse_tRESTResponse_2);
														restResponse_tRESTResponse_2.put("STATUS",
																restProviderStatusCode_tRESTResponse_2);
														restResponse_tRESTResponse_2.put("HEADERS",
																restProviderResponseHeaders_tRESTResponse_2);
														restResponse_tRESTResponse_2.put("drop.json.root.element",
																Boolean.valueOf(false));
														globalMap.put("restResponse", restResponse_tRESTResponse_2);

													} else {

														javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_2 = null;
														if (!responseAlreadySent_tRESTResponse_2) {
															org.apache.cxf.message.Message currentMessage = null;
															if (org.apache.cxf.jaxrs.utils.JAXRSUtils
																	.getCurrentMessage() != null) {
																currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils
																		.getCurrentMessage();
															} else {
																currentMessage = ((org.apache.cxf.message.Message) restRequest_tRESTResponse_2
																		.get("CURRENT_MESSAGE"));
															}

															if (currentMessage != null
																	&& currentMessage.getExchange() != null) {
																currentMessage.getExchange().put(
																		StreamingDOM4JProvider.SUPRESS_XML_DECLARATION,
																		true);
															}

															messageContext_tRESTResponse_2.put(
																	org.apache.cxf.message.Message.RESPONSE_CODE,
																	restProviderStatusCode_tRESTResponse_2);
															javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_2 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
															for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_2
																	.entrySet()) {
																headersMultivaluedMap_tRESTResponse_2.putSingle(
																		multivaluedHeader.getKey(),
																		multivaluedHeader.getValue());
															}
															messageContext_tRESTResponse_2.put(
																	org.apache.cxf.message.Message.PROTOCOL_HEADERS,
																	headersMultivaluedMap_tRESTResponse_2);

															String responseContentType_tRESTResponse_2 = null;

															if (currentMessage != null
																	&& currentMessage.getExchange() != null) {
																responseContentType_tRESTResponse_2 = (String) currentMessage
																		.getExchange()
																		.get(org.apache.cxf.message.Message.CONTENT_TYPE);
															}

															if (null == responseContentType_tRESTResponse_2) {
																// this should not be needed, just in case. set it to
																// the first value in the sorted list returned from
																// HttpHeaders
																responseMediaType_tRESTResponse_2 = messageContext_tRESTResponse_2
																		.getHttpHeaders().getAcceptableMediaTypes()
																		.get(0);
															} else {
																responseMediaType_tRESTResponse_2 = org.apache.cxf.jaxrs.utils.JAXRSUtils
																		.toMediaType(
																				responseContentType_tRESTResponse_2);
															}
															globalMap.put("restResponseMediaType",
																	responseMediaType_tRESTResponse_2);

															String responseMediaSubType_tRESTResponse_2 = responseMediaType_tRESTResponse_2
																	.getSubtype();
															if (responseMediaSubType_tRESTResponse_2.equals("xml")
																	|| responseMediaSubType_tRESTResponse_2
																			.endsWith("+xml")) {
																outputStream_tRESTResponse_2
																		.write("<wrapper>".getBytes());
																globalMap.put("restResponseWrappingClosure",
																		"</wrapper>");
															}
															if (responseMediaSubType_tRESTResponse_2.equals("json")
																	|| responseMediaSubType_tRESTResponse_2
																			.endsWith("+json")) {
																outputStream_tRESTResponse_2.write("[".getBytes());
																globalMap.put("restResponseWrappingClosure", "]");
															}

															globalMap.put("restResponse", true);
														} else {
															responseMediaType_tRESTResponse_2 = (javax.ws.rs.core.MediaType) globalMap
																	.get("restResponseMediaType");
														}

														if (null != restProviderResponse_tRESTResponse_2) {
															String responseMediaSubType_tRESTResponse_2 = responseMediaType_tRESTResponse_2
																	.getSubtype();
															if (responseMediaSubType_tRESTResponse_2.equals("json")
																	|| responseMediaSubType_tRESTResponse_2
																			.endsWith("+json")) {
																if (globalMap.containsKey("restResponseJsonStarted")) {
																	outputStream_tRESTResponse_2.write(",".getBytes());
																} else {
																	globalMap.put("restResponseJsonStarted", true);
																}
															}

															Class<? extends Object> responseBodyClass_tRESTResponse_2 = restProviderResponse_tRESTResponse_2
																	.getClass();
															javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_2 = messageContext_tRESTResponse_2
																	.getProviders();
															javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_2 = messageBodyProviders_tRESTResponse_2
																	.getMessageBodyWriter(
																			responseBodyClass_tRESTResponse_2,
																			responseBodyClass_tRESTResponse_2, null,
																			responseMediaType_tRESTResponse_2);

															if (messageBodyWriter_tRESTResponse_2 instanceof StreamingDOM4JProvider) {
																((StreamingDOM4JProvider) messageBodyWriter_tRESTResponse_2)
																		.setGlobalMap(globalMap);
															}

															messageBodyWriter_tRESTResponse_2.writeTo(
																	restProviderResponse_tRESTResponse_2,
																	responseBodyClass_tRESTResponse_2,
																	responseBodyClass_tRESTResponse_2,
																	new java.lang.annotation.Annotation[] {},
																	responseMediaType_tRESTResponse_2, null,
																	outputStream_tRESTResponse_2);
														}
														// initial variant
														// outputStream_tRESTResponse_2.write(String.valueOf(restProviderResponse_tRESTResponse_2).getBytes());
														outputStream_tRESTResponse_2.flush();
													}
												}

												tos_count_tRESTResponse_2++;

												/**
												 * [tRESTResponse_2 main ] stop
												 */

												/**
												 * [tRESTResponse_2 process_data_begin ] start
												 */

												currentComponent = "tRESTResponse_2";

												/**
												 * [tRESTResponse_2 process_data_begin ] stop
												 */

												/**
												 * [tRESTResponse_2 process_data_end ] start
												 */

												currentComponent = "tRESTResponse_2";

												/**
												 * [tRESTResponse_2 process_data_end ] stop
												 */

											} // End of branch "row31"

											/**
											 * [tRESTClient_10 process_data_end ] start
											 */

											currentComponent = "tRESTClient_10";

											/**
											 * [tRESTClient_10 process_data_end ] stop
											 */

										} // End of branch "row30"

										/**
										 * [tFilterRow_6 process_data_end ] start
										 */

										currentComponent = "tFilterRow_6";

										/**
										 * [tFilterRow_6 process_data_end ] stop
										 */

									} // End of branch "load_file_not_trash"

									/**
									 * [tMap_6 process_data_end ] start
									 */

									currentComponent = "tMap_6";

									/**
									 * [tMap_6 process_data_end ] stop
									 */

								} // End of branch "row29"

								// end for
							}

						} // C_01

						/**
						 * [tExtractJSONFields_9 process_data_end ] start
						 */

						currentComponent = "tExtractJSONFields_9";

						/**
						 * [tExtractJSONFields_9 process_data_end ] stop
						 */

					} // End of branch "load_select_option"

// Start of branch "interactivity_component"
					if (interactivity_component != null) {

						/**
						 * [tExtractJSONFields_10 main ] start
						 */

						currentComponent = "tExtractJSONFields_10";

						if (interactivity_component.body != null) {// C_01
							jsonStr_tExtractJSONFields_10 = interactivity_component.body.toString();

							row36 = null;

							String loopPath_tExtractJSONFields_10 = "$";
							java.util.List<Object> resultset_tExtractJSONFields_10 = new java.util.ArrayList<Object>();

							boolean isStructError_tExtractJSONFields_10 = true;
							com.jayway.jsonpath.ReadContext document_tExtractJSONFields_10 = null;
							try {
								document_tExtractJSONFields_10 = com.jayway.jsonpath.JsonPath
										.parse(jsonStr_tExtractJSONFields_10);
								com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_10 = jsonPathCache_tExtractJSONFields_10
										.getCompiledJsonPath(loopPath_tExtractJSONFields_10);
								Object result_tExtractJSONFields_10 = document_tExtractJSONFields_10.read(
										compiledLoopPath_tExtractJSONFields_10, net.minidev.json.JSONObject.class);
								if (result_tExtractJSONFields_10 instanceof net.minidev.json.JSONArray) {
									resultset_tExtractJSONFields_10 = (net.minidev.json.JSONArray) result_tExtractJSONFields_10;
								} else {
									resultset_tExtractJSONFields_10.add(result_tExtractJSONFields_10);
								}

								isStructError_tExtractJSONFields_10 = false;
							} catch (java.lang.Exception ex_tExtractJSONFields_10) {
								System.err.println(ex_tExtractJSONFields_10.getMessage());
							}

							String jsonPath_tExtractJSONFields_10 = null;
							com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_10 = null;

							Object value_tExtractJSONFields_10 = null;

							Object root_tExtractJSONFields_10 = null;
							for (int i_tExtractJSONFields_10 = 0; isStructError_tExtractJSONFields_10
									|| (i_tExtractJSONFields_10 < resultset_tExtractJSONFields_10
											.size()); i_tExtractJSONFields_10++) {
								if (!isStructError_tExtractJSONFields_10) {
									Object row_tExtractJSONFields_10 = resultset_tExtractJSONFields_10
											.get(i_tExtractJSONFields_10);
									row36 = null;
									row36 = new row36Struct();
									nb_line_tExtractJSONFields_10++;
									try {
										jsonPath_tExtractJSONFields_10 = "@.view.state.values.drive_trash_select_file.drive_trash_select_file.selected_option.value";
										compiledJsonPath_tExtractJSONFields_10 = jsonPathCache_tExtractJSONFields_10
												.getCompiledJsonPath(jsonPath_tExtractJSONFields_10);

										try {

											value_tExtractJSONFields_10 = compiledJsonPath_tExtractJSONFields_10
													.read(row_tExtractJSONFields_10);

											row36.file_trash = value_tExtractJSONFields_10 == null ?

													null

													: value_tExtractJSONFields_10.toString();
										} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_10) {
											row36.file_trash =

													null

											;
										}
										jsonPath_tExtractJSONFields_10 = "@.view.state.values.drive_untrash_select_file.drive_untrash_select_file.selected_option.value";
										compiledJsonPath_tExtractJSONFields_10 = jsonPathCache_tExtractJSONFields_10
												.getCompiledJsonPath(jsonPath_tExtractJSONFields_10);

										try {

											value_tExtractJSONFields_10 = compiledJsonPath_tExtractJSONFields_10
													.read(row_tExtractJSONFields_10);

											row36.file_untrash = value_tExtractJSONFields_10 == null ?

													null

													: value_tExtractJSONFields_10.toString();
										} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_10) {
											row36.file_untrash =

													null

											;
										}
										jsonPath_tExtractJSONFields_10 = "@.view.id";
										compiledJsonPath_tExtractJSONFields_10 = jsonPathCache_tExtractJSONFields_10
												.getCompiledJsonPath(jsonPath_tExtractJSONFields_10);

										try {

											value_tExtractJSONFields_10 = compiledJsonPath_tExtractJSONFields_10
													.read(row_tExtractJSONFields_10);

											row36.view_id = value_tExtractJSONFields_10 == null ?

													null

													: value_tExtractJSONFields_10.toString();
										} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_10) {
											row36.view_id =

													null

											;
										}
										jsonPath_tExtractJSONFields_10 = "@.type";
										compiledJsonPath_tExtractJSONFields_10 = jsonPathCache_tExtractJSONFields_10
												.getCompiledJsonPath(jsonPath_tExtractJSONFields_10);

										try {

											value_tExtractJSONFields_10 = compiledJsonPath_tExtractJSONFields_10
													.read(row_tExtractJSONFields_10);

											row36.type = value_tExtractJSONFields_10 == null ?

													null

													: value_tExtractJSONFields_10.toString();
										} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_10) {
											row36.type =

													null

											;
										}
										jsonPath_tExtractJSONFields_10 = "@.view.submit.text";
										compiledJsonPath_tExtractJSONFields_10 = jsonPathCache_tExtractJSONFields_10
												.getCompiledJsonPath(jsonPath_tExtractJSONFields_10);

										try {

											value_tExtractJSONFields_10 = compiledJsonPath_tExtractJSONFields_10
													.read(row_tExtractJSONFields_10);

											row36.submit_type = value_tExtractJSONFields_10 == null ?

													null

													: value_tExtractJSONFields_10.toString();
										} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_10) {
											row36.submit_type =

													null

											;
										}
										jsonPath_tExtractJSONFields_10 = "@.view.title.text";
										compiledJsonPath_tExtractJSONFields_10 = jsonPathCache_tExtractJSONFields_10
												.getCompiledJsonPath(jsonPath_tExtractJSONFields_10);

										try {

											value_tExtractJSONFields_10 = compiledJsonPath_tExtractJSONFields_10
													.read(row_tExtractJSONFields_10);

											row36.title = value_tExtractJSONFields_10 == null ?

													null

													: value_tExtractJSONFields_10.toString();
										} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_10) {
											row36.title =

													null

											;
										}
									} catch (java.lang.Exception ex_tExtractJSONFields_10) {
										System.err.println(ex_tExtractJSONFields_10.getMessage());
										row36 = null;
									}

								}

								isStructError_tExtractJSONFields_10 = false;

//}

								tos_count_tExtractJSONFields_10++;

								/**
								 * [tExtractJSONFields_10 main ] stop
								 */

								/**
								 * [tExtractJSONFields_10 process_data_begin ] start
								 */

								currentComponent = "tExtractJSONFields_10";

								/**
								 * [tExtractJSONFields_10 process_data_begin ] stop
								 */
// Start of branch "row36"
								if (row36 != null) {

									/**
									 * [tMap_9 main ] start
									 */

									currentComponent = "tMap_9";

									boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_9 = false;
									boolean mainRowRejected_tMap_9 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
										// ###############################
										// # Output tables

										type_submit = null;
										submit_res = null;

// # Output table : 'type_submit'
										type_submit_tmp.submit_type = row36.submit_type;
										type_submit_tmp.type = row36.type;
										type_submit_tmp.file_trash = row36.file_trash;
										type_submit_tmp.file_untrash = row36.file_untrash;
										type_submit_tmp.title = row36.title;
										type_submit = type_submit_tmp;

// # Output table : 'submit_res'
										submit_res_tmp.newColumn = null;
										submit_res = submit_res_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_9 = false;

									tos_count_tMap_9++;

									/**
									 * [tMap_9 main ] stop
									 */

									/**
									 * [tMap_9 process_data_begin ] start
									 */

									currentComponent = "tMap_9";

									/**
									 * [tMap_9 process_data_begin ] stop
									 */
// Start of branch "type_submit"
									if (type_submit != null) {

										/**
										 * [tFilterRow_9 main ] start
										 */

										currentComponent = "tFilterRow_9";

										row37 = null;
										Operator_tFilterRow_9 ope_tFilterRow_9 = new Operator_tFilterRow_9("&&");
										ope_tFilterRow_9.matches(
												(type_submit.submit_type == null ? false
														: type_submit.submit_type.compareTo("Submit") == 0),
												"submit_type.compareTo(\"Submit\") == 0 failed");
										ope_tFilterRow_9.matches(
												(type_submit.type == null ? false
														: type_submit.type.compareTo("view_submission") == 0),
												"type.compareTo(\"view_submission\") == 0 failed");

										if (ope_tFilterRow_9.getMatchFlag()) {
											if (row37 == null) {
												row37 = new row37Struct();
											}
											row37.submit_type = type_submit.submit_type;
											row37.type = type_submit.type;
											row37.file_trash = type_submit.file_trash;
											row37.file_untrash = type_submit.file_untrash;
											row37.title = type_submit.title;
											nb_line_ok_tFilterRow_9++;
										} else {
											nb_line_reject_tFilterRow_9++;
										}

										nb_line_tFilterRow_9++;

										tos_count_tFilterRow_9++;

										/**
										 * [tFilterRow_9 main ] stop
										 */

										/**
										 * [tFilterRow_9 process_data_begin ] start
										 */

										currentComponent = "tFilterRow_9";

										/**
										 * [tFilterRow_9 process_data_begin ] stop
										 */
// Start of branch "row37"
										if (row37 != null) {

											/**
											 * [tJavaRow_7 main ] start
											 */

											currentComponent = "tJavaRow_7";

											// code sample:
//
// multiply by 2 the row identifier
// row38.id = row37.id * 2;
//
// lowercase the name
// row38.name = row37.name.toLowerCase();
											String title = row37.title;
											if (title.equals("Trash File") == true) {
												row38.url = "https://www.googleapis.com/drive/v2/files/"
														+ row37.file_trash + "/trash";
											} else {
												row38.url = "https://www.googleapis.com/drive/v2/files/"
														+ row37.file_untrash + "/untrash";
											}

											nb_line_tJavaRow_7++;

											tos_count_tJavaRow_7++;

											/**
											 * [tJavaRow_7 main ] stop
											 */

											/**
											 * [tJavaRow_7 process_data_begin ] start
											 */

											currentComponent = "tJavaRow_7";

											/**
											 * [tJavaRow_7 process_data_begin ] stop
											 */

											/**
											 * [tRESTClient_13 main ] start
											 */

											currentComponent = "tRESTClient_13";

// expected response body
											javax.ws.rs.core.Response responseDoc_tRESTClient_13 = null;

											try {
												// request body
												org.dom4j.Document requestDoc_tRESTClient_13 = null;
												String requestString_tRESTClient_13 = null;

												Object requestBody_tRESTClient_13 = requestDoc_tRESTClient_13 != null
														? requestDoc_tRESTClient_13
														: requestString_tRESTClient_13;

												// resposne class name
												Class<?> responseClass_tRESTClient_13 = String.class;

												// create web client instance
												org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_13 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

												boolean inOSGi = routines.system.BundleUtils.inOSGi();

												final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_13 = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

												String url = row38.url;
												// {baseUri}tRESTClient
												factoryBean_tRESTClient_13.setServiceName(
														new javax.xml.namespace.QName(url, "tRESTClient"));
												factoryBean_tRESTClient_13.setAddress(url);

												factoryBean_tRESTClient_13.setFeatures(features_tRESTClient_13);

												java.util.List<Object> providers_tRESTClient_13 = new java.util.ArrayList<Object>();
												providers_tRESTClient_13
														.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
															// workaround for
															// https://jira.talendforge.org/browse/TESB-7276
															public org.dom4j.Document readFrom(
																	Class<org.dom4j.Document> cls,
																	java.lang.reflect.Type type,
																	java.lang.annotation.Annotation[] anns,
																	javax.ws.rs.core.MediaType mt,
																	javax.ws.rs.core.MultivaluedMap<String, String> headers,
																	java.io.InputStream is) throws IOException,
																	javax.ws.rs.WebApplicationException {
																String contentLength = headers
																		.getFirst("Content-Length");
																if (!org.apache.cxf.common.util.StringUtils
																		.isEmpty(contentLength)
																		&& Integer.valueOf(contentLength) <= 0) {
																	try {
																		return org.dom4j.DocumentHelper
																				.parseText("<root/>");
																	} catch (org.dom4j.DocumentException e_tRESTClient_13) {
																		e_tRESTClient_13.printStackTrace();
																	}
																	return null;
																}
																return super.readFrom(cls, type, anns, mt, headers, is);
															}
														});
												org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_13 = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
												jsonProvider_tRESTClient_13.setIgnoreNamespaces(true);
												jsonProvider_tRESTClient_13.setAttributesToElements(true);

												jsonProvider_tRESTClient_13.setSupportUnwrapped(true);
												jsonProvider_tRESTClient_13.setWrapperName("root");

												jsonProvider_tRESTClient_13.setDropRootElement(false);
												jsonProvider_tRESTClient_13.setConvertTypesToStrings(false);
												providers_tRESTClient_13.add(jsonProvider_tRESTClient_13);
												factoryBean_tRESTClient_13.setProviders(providers_tRESTClient_13);
												factoryBean_tRESTClient_13
														.setTransportId("http://cxf.apache.org/transports/http");

												boolean use_auth_tRESTClient_13 = false;
												if (use_auth_tRESTClient_13 && "SAML".equals("BASIC")) {
													if (!inOSGi) {
														throw new IllegalArgumentException(
																"SAML based security scenarios are not supported in Studio (standalone)");
													}
													// set SAML Token authentication

													final String decryptedPassword_tRESTClient_13 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													org.apache.cxf.ws.security.trust.STSClient stsClient = org.talend.esb.security.saml.STSClientUtils
															.createSTSClient(factoryBean_tRESTClient_13.getBus(),
																	"username", decryptedPassword_tRESTClient_13);

													org.talend.esb.security.saml.SAMLRESTUtils
															.configureClient(factoryBean_tRESTClient_13, stsClient);
												}

												org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_13 = factoryBean_tRESTClient_13
														.createWebClient();

												// set request path
												webClient_tRESTClient_13.path("");

												// set connection properties
												org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_13 = org.apache.cxf.jaxrs.client.WebClient
														.getConfig(webClient_tRESTClient_13);
												org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_13 = clientConfig_tRESTClient_13
														.getHttpConduit();

												if (clientConfig_tRESTClient_13.getEndpoint() != null
														&& clientConfig_tRESTClient_13.getEndpoint()
																.getEndpointInfo() != null) {
													clientConfig_tRESTClient_13.getEndpoint().getEndpointInfo()
															.setProperty("enable.webclient.operation.reporting", true);
												}

												if (use_auth_tRESTClient_13 && "BASIC".equals("BASIC")) {
													// set BASIC auth

													final String decryptedPassword_tRESTClient_13 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_13 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
													authPolicy_tRESTClient_13.setAuthorizationType("Basic");
													authPolicy_tRESTClient_13.setUserName("username");
													authPolicy_tRESTClient_13
															.setPassword(decryptedPassword_tRESTClient_13);
													conduit_tRESTClient_13.setAuthorization(authPolicy_tRESTClient_13);
												} else if (use_auth_tRESTClient_13 && "HTTP Digest".equals("BASIC")) {
													// set Digest auth

													final String decryptedPassword_tRESTClient_13 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_13 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
													authPolicy_tRESTClient_13.setAuthorizationType("Digest");
													authPolicy_tRESTClient_13.setUserName("username");
													authPolicy_tRESTClient_13
															.setPassword(decryptedPassword_tRESTClient_13);
													conduit_tRESTClient_13.setAuthorization(authPolicy_tRESTClient_13);
												}

												if (!inOSGi) {
													conduit_tRESTClient_13.getClient()
															.setReceiveTimeout((long) (60 * 1000L));
													conduit_tRESTClient_13.getClient()
															.setConnectionTimeout((long) (30 * 1000L));
													boolean use_proxy_tRESTClient_13 = false;
													if (use_proxy_tRESTClient_13) {

														final String decryptedPassword_tRESTClient_13 = routines.system.PasswordEncryptUtil
																.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");

														conduit_tRESTClient_13.getClient()
																.setProxyServer("61.163.92.4");
														conduit_tRESTClient_13.getClient()
																.setProxyServerPort(Integer.valueOf(8080));
														conduit_tRESTClient_13.getProxyAuthorization().setUserName("");
														conduit_tRESTClient_13.getProxyAuthorization()
																.setPassword(decryptedPassword_tRESTClient_13);
													}
												}

												// set Content-Type
												webClient_tRESTClient_13.type("application/x-www-form-urlencoded");

												// set Accept-Type
												webClient_tRESTClient_13.accept("*/*");

												// set optional query and header properties if any

												webClient_tRESTClient_13.header("Authorization",
														"Bearer " + this.globalMap.get("drive_access_token"));

												if (use_auth_tRESTClient_13 && "OAUTH2_BEARER".equals("BASIC")) {
													// set oAuth2 bearer token
													webClient_tRESTClient_13.header("Authorization", "Bearer " + "");
												}

												if (use_auth_tRESTClient_13 && "OIDC_PASSWORD_GRANT".equals("BASIC")) {

													final String decryptedPassword_tRESTClient_13 = routines.system.PasswordEncryptUtil
															.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

													String username_tRESTClient_13 = "username";
													String password_tRESTClient_13 = decryptedPassword_tRESTClient_13;

													String bearerHeader_tRESTClient_13 = null;

													try {
														if (!inOSGi) {
															org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_13 = new org.springframework.context.support.ClassPathXmlApplicationContext(
																	"META-INF/tesb/oidc-context.xml");
															org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_13 = context_tRESTClient_13
																	.getBean(
																			org.talend.esb.security.oidc.OidcConfiguration.class);
															bearerHeader_tRESTClient_13 = org.talend.esb.security.oidc.OidcClientUtils
																	.oidcClientBearer(username_tRESTClient_13,
																			password_tRESTClient_13,
																			oidcConfiguration_tRESTClient_13);
														} else {
															bearerHeader_tRESTClient_13 = org.talend.esb.security.oidc.OidcClientUtils
																	.oidcClientBearer(username_tRESTClient_13,
																			password_tRESTClient_13);
														}
													} catch (Exception ex) {
														throw new javax.ws.rs.WebApplicationException(
																"Failed to get OIDC access token: ", ex);
													}

													webClient_tRESTClient_13.header("Authorization",
															bearerHeader_tRESTClient_13);
												}

												// if FORM request then capture query parameters into Form, otherwise
												// set them as queries

												javax.ws.rs.core.Form form_tRESTClient_13 = new javax.ws.rs.core.Form();

												requestBody_tRESTClient_13 = form_tRESTClient_13;

												try {
													// start send request

													responseDoc_tRESTClient_13 = webClient_tRESTClient_13
															.post(requestBody_tRESTClient_13);

													int webClientResponseStatus_tRESTClient_13 = webClient_tRESTClient_13
															.getResponse().getStatus();
													if (webClientResponseStatus_tRESTClient_13 >= 300) {
														throw new javax.ws.rs.WebApplicationException(
																webClient_tRESTClient_13.getResponse());
													}

												} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_13) {

													throw ex_tRESTClient_13;

												}

											} catch (Exception e_tRESTClient_13) {

												throw new TalendException(e_tRESTClient_13, currentComponent,
														globalMap);

											}

											tos_count_tRESTClient_13++;

											/**
											 * [tRESTClient_13 main ] stop
											 */

											/**
											 * [tRESTClient_13 process_data_begin ] start
											 */

											currentComponent = "tRESTClient_13";

											/**
											 * [tRESTClient_13 process_data_begin ] stop
											 */

											/**
											 * [tRESTClient_13 process_data_end ] start
											 */

											currentComponent = "tRESTClient_13";

											/**
											 * [tRESTClient_13 process_data_end ] stop
											 */

											/**
											 * [tJavaRow_7 process_data_end ] start
											 */

											currentComponent = "tJavaRow_7";

											/**
											 * [tJavaRow_7 process_data_end ] stop
											 */

										} // End of branch "row37"

										/**
										 * [tFilterRow_9 process_data_end ] start
										 */

										currentComponent = "tFilterRow_9";

										/**
										 * [tFilterRow_9 process_data_end ] stop
										 */

									} // End of branch "type_submit"

// Start of branch "submit_res"
									if (submit_res != null) {

										/**
										 * [tRESTResponse_4 main ] start
										 */

										currentComponent = "tRESTResponse_4";

										java.io.OutputStream outputStream_tRESTResponse_4 = (java.io.OutputStream) globalMap
												.get("restResponseStream");
										boolean responseAlreadySent_tRESTResponse_4 = globalMap
												.containsKey("restResponse");

										if (null == outputStream_tRESTResponse_4
												&& responseAlreadySent_tRESTResponse_4) {
											throw new RuntimeException("Rest response already sent.");
										} else if (!globalMap.containsKey("restRequest")) {
											throw new RuntimeException("Not received rest request yet.");
										} else {
											Integer restProviderStatusCode_tRESTResponse_4 = 200;

											Object restProviderResponse_tRESTResponse_4 = null;

											java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_4 = new java.util.TreeMap<String, String>(
													String.CASE_INSENSITIVE_ORDER);

											java.util.Map<String, Object> restRequest_tRESTResponse_4 = (java.util.Map<String, Object>) globalMap
													.get("restRequest");
											org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_4 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_4
													.get("MESSAGE_CONTEXT");

											if (null == outputStream_tRESTResponse_4) {
												java.util.Map<String, Object> restResponse_tRESTResponse_4 = new java.util.HashMap<String, Object>();
												restResponse_tRESTResponse_4.put("BODY",
														restProviderResponse_tRESTResponse_4);
												restResponse_tRESTResponse_4.put("STATUS",
														restProviderStatusCode_tRESTResponse_4);
												restResponse_tRESTResponse_4.put("HEADERS",
														restProviderResponseHeaders_tRESTResponse_4);
												restResponse_tRESTResponse_4.put("drop.json.root.element",
														Boolean.valueOf(false));
												globalMap.put("restResponse", restResponse_tRESTResponse_4);

											} else {

												javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_4 = null;
												if (!responseAlreadySent_tRESTResponse_4) {
													org.apache.cxf.message.Message currentMessage = null;
													if (org.apache.cxf.jaxrs.utils.JAXRSUtils
															.getCurrentMessage() != null) {
														currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils
																.getCurrentMessage();
													} else {
														currentMessage = ((org.apache.cxf.message.Message) restRequest_tRESTResponse_4
																.get("CURRENT_MESSAGE"));
													}

													if (currentMessage != null
															&& currentMessage.getExchange() != null) {
														currentMessage.getExchange().put(
																StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
													}

													messageContext_tRESTResponse_4.put(
															org.apache.cxf.message.Message.RESPONSE_CODE,
															restProviderStatusCode_tRESTResponse_4);
													javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_4 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
													for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_4
															.entrySet()) {
														headersMultivaluedMap_tRESTResponse_4.putSingle(
																multivaluedHeader.getKey(),
																multivaluedHeader.getValue());
													}
													messageContext_tRESTResponse_4.put(
															org.apache.cxf.message.Message.PROTOCOL_HEADERS,
															headersMultivaluedMap_tRESTResponse_4);

													String responseContentType_tRESTResponse_4 = null;

													if (currentMessage != null
															&& currentMessage.getExchange() != null) {
														responseContentType_tRESTResponse_4 = (String) currentMessage
																.getExchange()
																.get(org.apache.cxf.message.Message.CONTENT_TYPE);
													}

													if (null == responseContentType_tRESTResponse_4) {
														// this should not be needed, just in case. set it to the first
														// value in the sorted list returned from HttpHeaders
														responseMediaType_tRESTResponse_4 = messageContext_tRESTResponse_4
																.getHttpHeaders().getAcceptableMediaTypes().get(0);
													} else {
														responseMediaType_tRESTResponse_4 = org.apache.cxf.jaxrs.utils.JAXRSUtils
																.toMediaType(responseContentType_tRESTResponse_4);
													}
													globalMap.put("restResponseMediaType",
															responseMediaType_tRESTResponse_4);

													String responseMediaSubType_tRESTResponse_4 = responseMediaType_tRESTResponse_4
															.getSubtype();
													if (responseMediaSubType_tRESTResponse_4.equals("xml")
															|| responseMediaSubType_tRESTResponse_4.endsWith("+xml")) {
														outputStream_tRESTResponse_4.write("<wrapper>".getBytes());
														globalMap.put("restResponseWrappingClosure", "</wrapper>");
													}
													if (responseMediaSubType_tRESTResponse_4.equals("json")
															|| responseMediaSubType_tRESTResponse_4.endsWith("+json")) {
														outputStream_tRESTResponse_4.write("[".getBytes());
														globalMap.put("restResponseWrappingClosure", "]");
													}

													globalMap.put("restResponse", true);
												} else {
													responseMediaType_tRESTResponse_4 = (javax.ws.rs.core.MediaType) globalMap
															.get("restResponseMediaType");
												}

												if (null != restProviderResponse_tRESTResponse_4) {
													String responseMediaSubType_tRESTResponse_4 = responseMediaType_tRESTResponse_4
															.getSubtype();
													if (responseMediaSubType_tRESTResponse_4.equals("json")
															|| responseMediaSubType_tRESTResponse_4.endsWith("+json")) {
														if (globalMap.containsKey("restResponseJsonStarted")) {
															outputStream_tRESTResponse_4.write(",".getBytes());
														} else {
															globalMap.put("restResponseJsonStarted", true);
														}
													}

													Class<? extends Object> responseBodyClass_tRESTResponse_4 = restProviderResponse_tRESTResponse_4
															.getClass();
													javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_4 = messageContext_tRESTResponse_4
															.getProviders();
													javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_4 = messageBodyProviders_tRESTResponse_4
															.getMessageBodyWriter(responseBodyClass_tRESTResponse_4,
																	responseBodyClass_tRESTResponse_4, null,
																	responseMediaType_tRESTResponse_4);

													if (messageBodyWriter_tRESTResponse_4 instanceof StreamingDOM4JProvider) {
														((StreamingDOM4JProvider) messageBodyWriter_tRESTResponse_4)
																.setGlobalMap(globalMap);
													}

													messageBodyWriter_tRESTResponse_4.writeTo(
															restProviderResponse_tRESTResponse_4,
															responseBodyClass_tRESTResponse_4,
															responseBodyClass_tRESTResponse_4,
															new java.lang.annotation.Annotation[] {},
															responseMediaType_tRESTResponse_4, null,
															outputStream_tRESTResponse_4);
												}
												// initial variant
												// outputStream_tRESTResponse_4.write(String.valueOf(restProviderResponse_tRESTResponse_4).getBytes());
												outputStream_tRESTResponse_4.flush();
											}
										}

										tos_count_tRESTResponse_4++;

										/**
										 * [tRESTResponse_4 main ] stop
										 */

										/**
										 * [tRESTResponse_4 process_data_begin ] start
										 */

										currentComponent = "tRESTResponse_4";

										/**
										 * [tRESTResponse_4 process_data_begin ] stop
										 */

										/**
										 * [tRESTResponse_4 process_data_end ] start
										 */

										currentComponent = "tRESTResponse_4";

										/**
										 * [tRESTResponse_4 process_data_end ] stop
										 */

									} // End of branch "submit_res"

									/**
									 * [tMap_9 process_data_end ] start
									 */

									currentComponent = "tMap_9";

									/**
									 * [tMap_9 process_data_end ] stop
									 */

								} // End of branch "row36"

								// end for
							}

						} // C_01

						/**
						 * [tExtractJSONFields_10 process_data_end ] start
						 */

						currentComponent = "tExtractJSONFields_10";

						/**
						 * [tExtractJSONFields_10 process_data_end ] stop
						 */

					} // End of branch "interactivity_component"

					/**
					 * [tRESTRequest_1_In process_data_end ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					/**
					 * [tRESTRequest_1_In process_data_end ] stop
					 */

					/**
					 * [tRESTRequest_1_In end ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					ok_Hash.put("tRESTRequest_1_In", true);
					end_Hash.put("tRESTRequest_1_In", System.currentTimeMillis());

					/**
					 * [tRESTRequest_1_In end ] stop
					 */

					/**
					 * [tExtractJSONFields_2 end ] start
					 */

					currentComponent = "tExtractJSONFields_2";

					globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_2);

					ok_Hash.put("tExtractJSONFields_2", true);
					end_Hash.put("tExtractJSONFields_2", System.currentTimeMillis());

					/**
					 * [tExtractJSONFields_2 end ] stop
					 */

					/**
					 * [tMap_3 end ] start
					 */

					currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

					ok_Hash.put("tMap_3", true);
					end_Hash.put("tMap_3", System.currentTimeMillis());

					/**
					 * [tMap_3 end ] stop
					 */

					/**
					 * [tFilterRow_1 end ] start
					 */

					currentComponent = "tFilterRow_1";

					globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
					globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
					globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

					ok_Hash.put("tFilterRow_1", true);
					end_Hash.put("tFilterRow_1", System.currentTimeMillis());

					/**
					 * [tFilterRow_1 end ] stop
					 */

					/**
					 * [tLogRow_4 end ] start
					 */

					currentComponent = "tLogRow_4";

//////
//////
					globalMap.put("tLogRow_4_NB_LINE", nb_line_tLogRow_4);

///////////////////////    			

					ok_Hash.put("tLogRow_4", true);
					end_Hash.put("tLogRow_4", System.currentTimeMillis());

					/**
					 * [tLogRow_4 end ] stop
					 */

					/**
					 * [tFilterRow_5 end ] start
					 */

					currentComponent = "tFilterRow_5";

					globalMap.put("tFilterRow_5_NB_LINE", nb_line_tFilterRow_5);
					globalMap.put("tFilterRow_5_NB_LINE_OK", nb_line_ok_tFilterRow_5);
					globalMap.put("tFilterRow_5_NB_LINE_REJECT", nb_line_reject_tFilterRow_5);

					ok_Hash.put("tFilterRow_5", true);
					end_Hash.put("tFilterRow_5", System.currentTimeMillis());

					/**
					 * [tFilterRow_5 end ] stop
					 */

					/**
					 * [tMap_5 end ] start
					 */

					currentComponent = "tMap_5";

// ###############################
// # Lookup hashes releasing
// ###############################      

					ok_Hash.put("tMap_5", true);
					end_Hash.put("tMap_5", System.currentTimeMillis());

					/**
					 * [tMap_5 end ] stop
					 */

					/**
					 * [tRESTClient_9 end ] start
					 */

					currentComponent = "tRESTClient_9";

					if (globalMap.get("tRESTClient_9_NB_LINE") == null) {
						globalMap.put("tRESTClient_9_NB_LINE", 1);
					}

// [tRESTCliend_end]

					ok_Hash.put("tRESTClient_9", true);
					end_Hash.put("tRESTClient_9", System.currentTimeMillis());

					/**
					 * [tRESTClient_9 end ] stop
					 */

					/**
					 * [tFilterRow_8 end ] start
					 */

					currentComponent = "tFilterRow_8";

					globalMap.put("tFilterRow_8_NB_LINE", nb_line_tFilterRow_8);
					globalMap.put("tFilterRow_8_NB_LINE_OK", nb_line_ok_tFilterRow_8);
					globalMap.put("tFilterRow_8_NB_LINE_REJECT", nb_line_reject_tFilterRow_8);

					ok_Hash.put("tFilterRow_8", true);
					end_Hash.put("tFilterRow_8", System.currentTimeMillis());

					/**
					 * [tFilterRow_8 end ] stop
					 */

					/**
					 * [tMap_7 end ] start
					 */

					currentComponent = "tMap_7";

// ###############################
// # Lookup hashes releasing
// ###############################      

					ok_Hash.put("tMap_7", true);
					end_Hash.put("tMap_7", System.currentTimeMillis());

					/**
					 * [tMap_7 end ] stop
					 */

					/**
					 * [tRESTClient_12 end ] start
					 */

					currentComponent = "tRESTClient_12";

					if (globalMap.get("tRESTClient_12_NB_LINE") == null) {
						globalMap.put("tRESTClient_12_NB_LINE", 1);
					}

// [tRESTCliend_end]

					ok_Hash.put("tRESTClient_12", true);
					end_Hash.put("tRESTClient_12", System.currentTimeMillis());

					/**
					 * [tRESTClient_12 end ] stop
					 */

					/**
					 * [tLogRow_6 end ] start
					 */

					currentComponent = "tLogRow_6";

//////
//////
					globalMap.put("tLogRow_6_NB_LINE", nb_line_tLogRow_6);

///////////////////////    			

					ok_Hash.put("tLogRow_6", true);
					end_Hash.put("tLogRow_6", System.currentTimeMillis());

					/**
					 * [tLogRow_6 end ] stop
					 */

					/**
					 * [tExtractJSONFields_6 end ] start
					 */

					currentComponent = "tExtractJSONFields_6";

					globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_6);

					ok_Hash.put("tExtractJSONFields_6", true);
					end_Hash.put("tExtractJSONFields_6", System.currentTimeMillis());

					/**
					 * [tExtractJSONFields_6 end ] stop
					 */

					/**
					 * [tMap_1 end ] start
					 */

					currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

					ok_Hash.put("tMap_1", true);
					end_Hash.put("tMap_1", System.currentTimeMillis());

					/**
					 * [tMap_1 end ] stop
					 */

					/**
					 * [tFilterRow_4 end ] start
					 */

					currentComponent = "tFilterRow_4";

					globalMap.put("tFilterRow_4_NB_LINE", nb_line_tFilterRow_4);
					globalMap.put("tFilterRow_4_NB_LINE_OK", nb_line_ok_tFilterRow_4);
					globalMap.put("tFilterRow_4_NB_LINE_REJECT", nb_line_reject_tFilterRow_4);

					ok_Hash.put("tFilterRow_4", true);
					end_Hash.put("tFilterRow_4", System.currentTimeMillis());

					/**
					 * [tFilterRow_4 end ] stop
					 */

					/**
					 * [tJavaRow_2 end ] start
					 */

					currentComponent = "tJavaRow_2";

					globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

					ok_Hash.put("tJavaRow_2", true);
					end_Hash.put("tJavaRow_2", System.currentTimeMillis());

					/**
					 * [tJavaRow_2 end ] stop
					 */

					/**
					 * [tRESTClient_5 end ] start
					 */

					currentComponent = "tRESTClient_5";

					if (globalMap.get("tRESTClient_5_NB_LINE") == null) {
						globalMap.put("tRESTClient_5_NB_LINE", 1);
					}

// [tRESTCliend_end]

					ok_Hash.put("tRESTClient_5", true);
					end_Hash.put("tRESTClient_5", System.currentTimeMillis());

					/**
					 * [tRESTClient_5 end ] stop
					 */

					/**
					 * [tFilterRow_3 end ] start
					 */

					currentComponent = "tFilterRow_3";

					globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
					globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
					globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);

					ok_Hash.put("tFilterRow_3", true);
					end_Hash.put("tFilterRow_3", System.currentTimeMillis());

					/**
					 * [tFilterRow_3 end ] stop
					 */

					/**
					 * [tRESTClient_4 end ] start
					 */

					currentComponent = "tRESTClient_4";

					if (globalMap.get("tRESTClient_4_NB_LINE") == null) {
						globalMap.put("tRESTClient_4_NB_LINE", 1);
					}

// [tRESTCliend_end]

					ok_Hash.put("tRESTClient_4", true);
					end_Hash.put("tRESTClient_4", System.currentTimeMillis());

					/**
					 * [tRESTClient_4 end ] stop
					 */

					/**
					 * [tExtractJSONFields_7 end ] start
					 */

					currentComponent = "tExtractJSONFields_7";

					globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_7);

					ok_Hash.put("tExtractJSONFields_7", true);
					end_Hash.put("tExtractJSONFields_7", System.currentTimeMillis());

					/**
					 * [tExtractJSONFields_7 end ] stop
					 */

					/**
					 * [tJavaRow_3 end ] start
					 */

					currentComponent = "tJavaRow_3";

					globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

					ok_Hash.put("tJavaRow_3", true);
					end_Hash.put("tJavaRow_3", System.currentTimeMillis());

					/**
					 * [tJavaRow_3 end ] stop
					 */

					/**
					 * [tRESTClient_6 end ] start
					 */

					currentComponent = "tRESTClient_6";

					if (globalMap.get("tRESTClient_6_NB_LINE") == null) {
						globalMap.put("tRESTClient_6_NB_LINE", 1);
					}

// [tRESTCliend_end]

					ok_Hash.put("tRESTClient_6", true);
					end_Hash.put("tRESTClient_6", System.currentTimeMillis());

					/**
					 * [tRESTClient_6 end ] stop
					 */

					/**
					 * [tExtractJSONFields_8 end ] start
					 */

					currentComponent = "tExtractJSONFields_8";

					globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_8);

					ok_Hash.put("tExtractJSONFields_8", true);
					end_Hash.put("tExtractJSONFields_8", System.currentTimeMillis());

					/**
					 * [tExtractJSONFields_8 end ] stop
					 */

					/**
					 * [tJavaRow_6 end ] start
					 */

					currentComponent = "tJavaRow_6";

					globalMap.put("tJavaRow_6_NB_LINE", nb_line_tJavaRow_6);

					ok_Hash.put("tJavaRow_6", true);
					end_Hash.put("tJavaRow_6", System.currentTimeMillis());

					/**
					 * [tJavaRow_6 end ] stop
					 */

					/**
					 * [tRESTClient_7 end ] start
					 */

					currentComponent = "tRESTClient_7";

					if (globalMap.get("tRESTClient_7_NB_LINE") == null) {
						globalMap.put("tRESTClient_7_NB_LINE", 1);
					}

// [tRESTCliend_end]

					ok_Hash.put("tRESTClient_7", true);
					end_Hash.put("tRESTClient_7", System.currentTimeMillis());

					/**
					 * [tRESTClient_7 end ] stop
					 */

					/**
					 * [tRESTResponse_1 end ] start
					 */

					currentComponent = "tRESTResponse_1";

					ok_Hash.put("tRESTResponse_1", true);
					end_Hash.put("tRESTResponse_1", System.currentTimeMillis());

					/**
					 * [tRESTResponse_1 end ] stop
					 */

					/**
					 * [tExtractJSONFields_9 end ] start
					 */

					currentComponent = "tExtractJSONFields_9";

					globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_9);

					ok_Hash.put("tExtractJSONFields_9", true);
					end_Hash.put("tExtractJSONFields_9", System.currentTimeMillis());

					/**
					 * [tExtractJSONFields_9 end ] stop
					 */

					/**
					 * [tMap_6 end ] start
					 */

					currentComponent = "tMap_6";

// ###############################
// # Lookup hashes releasing
// ###############################      

					ok_Hash.put("tMap_6", true);
					end_Hash.put("tMap_6", System.currentTimeMillis());

					/**
					 * [tMap_6 end ] stop
					 */

					/**
					 * [tFilterRow_7 end ] start
					 */

					currentComponent = "tFilterRow_7";

					globalMap.put("tFilterRow_7_NB_LINE", nb_line_tFilterRow_7);
					globalMap.put("tFilterRow_7_NB_LINE_OK", nb_line_ok_tFilterRow_7);
					globalMap.put("tFilterRow_7_NB_LINE_REJECT", nb_line_reject_tFilterRow_7);

					ok_Hash.put("tFilterRow_7", true);
					end_Hash.put("tFilterRow_7", System.currentTimeMillis());

					/**
					 * [tFilterRow_7 end ] stop
					 */

					/**
					 * [tRESTClient_11 end ] start
					 */

					currentComponent = "tRESTClient_11";

					if (globalMap.get("tRESTClient_11_NB_LINE") == null) {
						globalMap.put("tRESTClient_11_NB_LINE", 1);
					}

// [tRESTCliend_end]

					ok_Hash.put("tRESTClient_11", true);
					end_Hash.put("tRESTClient_11", System.currentTimeMillis());

					/**
					 * [tRESTClient_11 end ] stop
					 */

					/**
					 * [tRESTResponse_3 end ] start
					 */

					currentComponent = "tRESTResponse_3";

					ok_Hash.put("tRESTResponse_3", true);
					end_Hash.put("tRESTResponse_3", System.currentTimeMillis());

					/**
					 * [tRESTResponse_3 end ] stop
					 */

					/**
					 * [tFilterRow_6 end ] start
					 */

					currentComponent = "tFilterRow_6";

					globalMap.put("tFilterRow_6_NB_LINE", nb_line_tFilterRow_6);
					globalMap.put("tFilterRow_6_NB_LINE_OK", nb_line_ok_tFilterRow_6);
					globalMap.put("tFilterRow_6_NB_LINE_REJECT", nb_line_reject_tFilterRow_6);

					ok_Hash.put("tFilterRow_6", true);
					end_Hash.put("tFilterRow_6", System.currentTimeMillis());

					/**
					 * [tFilterRow_6 end ] stop
					 */

					/**
					 * [tRESTClient_10 end ] start
					 */

					currentComponent = "tRESTClient_10";

					if (globalMap.get("tRESTClient_10_NB_LINE") == null) {
						globalMap.put("tRESTClient_10_NB_LINE", 1);
					}

// [tRESTCliend_end]

					ok_Hash.put("tRESTClient_10", true);
					end_Hash.put("tRESTClient_10", System.currentTimeMillis());

					/**
					 * [tRESTClient_10 end ] stop
					 */

					/**
					 * [tRESTResponse_2 end ] start
					 */

					currentComponent = "tRESTResponse_2";

					ok_Hash.put("tRESTResponse_2", true);
					end_Hash.put("tRESTResponse_2", System.currentTimeMillis());

					/**
					 * [tRESTResponse_2 end ] stop
					 */

					/**
					 * [tExtractJSONFields_10 end ] start
					 */

					currentComponent = "tExtractJSONFields_10";

					globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_10);

					ok_Hash.put("tExtractJSONFields_10", true);
					end_Hash.put("tExtractJSONFields_10", System.currentTimeMillis());

					/**
					 * [tExtractJSONFields_10 end ] stop
					 */

					/**
					 * [tMap_9 end ] start
					 */

					currentComponent = "tMap_9";

// ###############################
// # Lookup hashes releasing
// ###############################      

					ok_Hash.put("tMap_9", true);
					end_Hash.put("tMap_9", System.currentTimeMillis());

					/**
					 * [tMap_9 end ] stop
					 */

					/**
					 * [tFilterRow_9 end ] start
					 */

					currentComponent = "tFilterRow_9";

					globalMap.put("tFilterRow_9_NB_LINE", nb_line_tFilterRow_9);
					globalMap.put("tFilterRow_9_NB_LINE_OK", nb_line_ok_tFilterRow_9);
					globalMap.put("tFilterRow_9_NB_LINE_REJECT", nb_line_reject_tFilterRow_9);

					ok_Hash.put("tFilterRow_9", true);
					end_Hash.put("tFilterRow_9", System.currentTimeMillis());

					/**
					 * [tFilterRow_9 end ] stop
					 */

					/**
					 * [tJavaRow_7 end ] start
					 */

					currentComponent = "tJavaRow_7";

					globalMap.put("tJavaRow_7_NB_LINE", nb_line_tJavaRow_7);

					ok_Hash.put("tJavaRow_7", true);
					end_Hash.put("tJavaRow_7", System.currentTimeMillis());

					/**
					 * [tJavaRow_7 end ] stop
					 */

					/**
					 * [tRESTClient_13 end ] start
					 */

					currentComponent = "tRESTClient_13";

					if (globalMap.get("tRESTClient_13_NB_LINE") == null) {
						globalMap.put("tRESTClient_13_NB_LINE", 1);
					}

// [tRESTCliend_end]

					ok_Hash.put("tRESTClient_13", true);
					end_Hash.put("tRESTClient_13", System.currentTimeMillis());

					/**
					 * [tRESTClient_13 end ] stop
					 */

					/**
					 * [tRESTResponse_4 end ] start
					 */

					currentComponent = "tRESTResponse_4";

					ok_Hash.put("tRESTResponse_4", true);
					end_Hash.put("tRESTResponse_4", System.currentTimeMillis());

					/**
					 * [tRESTResponse_4 end ] stop
					 */

					/**
					 * [tRESTRequest_1_Loop process_data_end ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_Loop";

					/**
					 * [tRESTRequest_1_Loop process_data_end ] stop
					 */

					/**
					 * [tRESTRequest_1_Loop end ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_Loop";

				} catch (Throwable e_tRESTRequest_1) {
					if (e_tRESTRequest_1 instanceof Exception) {
						new TalendException((Exception) e_tRESTRequest_1, currentComponent, globalMap)
								.printStackTrace();
					} else {
						new TalendException(new RuntimeException(e_tRESTRequest_1), currentComponent, globalMap)
								.printStackTrace();
					}
					if (!globalMap.containsKey("restResponse")) {
						java.util.Map<String, Object> restFault_tRESTRequest_1 = new java.util.HashMap<String, Object>();
						restFault_tRESTRequest_1.put("STATUS", 500);
						restFault_tRESTRequest_1.put("BODY", e_tRESTRequest_1.getMessage());
						globalMap.put("restResponse", restFault_tRESTRequest_1);
					}
					return;
				}
				nb_line_tRESTRequest_1++;
				globalMap.put("tRESTRequest_1_NB_LINE", nb_line_tRESTRequest_1);

				ok_Hash.put("tRESTRequest_1_Loop", true);
				end_Hash.put("tRESTRequest_1_Loop", System.currentTimeMillis());

				/**
				 * [tRESTRequest_1_Loop end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_7"
			globalMap.remove("tHash_Lookup_view_untrash");

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_trash_file");

			try {

				/**
				 * [tRESTRequest_1_Loop finally ] start
				 */

				currentVirtualComponent = "tRESTRequest_1";

				currentComponent = "tRESTRequest_1_Loop";

				/**
				 * [tRESTRequest_1_Loop finally ] stop
				 */

				/**
				 * [tRESTRequest_1_In finally ] start
				 */

				currentVirtualComponent = "tRESTRequest_1";

				currentComponent = "tRESTRequest_1_In";

				/**
				 * [tRESTRequest_1_In finally ] stop
				 */

				/**
				 * [tExtractJSONFields_2 finally ] start
				 */

				currentComponent = "tExtractJSONFields_2";

				/**
				 * [tExtractJSONFields_2 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tLogRow_4 finally ] start
				 */

				currentComponent = "tLogRow_4";

				/**
				 * [tLogRow_4 finally ] stop
				 */

				/**
				 * [tFilterRow_5 finally ] start
				 */

				currentComponent = "tFilterRow_5";

				/**
				 * [tFilterRow_5 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tRESTClient_9 finally ] start
				 */

				currentComponent = "tRESTClient_9";

				/**
				 * [tRESTClient_9 finally ] stop
				 */

				/**
				 * [tFilterRow_8 finally ] start
				 */

				currentComponent = "tFilterRow_8";

				/**
				 * [tFilterRow_8 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tRESTClient_12 finally ] start
				 */

				currentComponent = "tRESTClient_12";

				/**
				 * [tRESTClient_12 finally ] stop
				 */

				/**
				 * [tLogRow_6 finally ] start
				 */

				currentComponent = "tLogRow_6";

				/**
				 * [tLogRow_6 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_6 finally ] start
				 */

				currentComponent = "tExtractJSONFields_6";

				/**
				 * [tExtractJSONFields_6 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFilterRow_4 finally ] start
				 */

				currentComponent = "tFilterRow_4";

				/**
				 * [tFilterRow_4 finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

				/**
				 * [tRESTClient_5 finally ] start
				 */

				currentComponent = "tRESTClient_5";

				/**
				 * [tRESTClient_5 finally ] stop
				 */

				/**
				 * [tFilterRow_3 finally ] start
				 */

				currentComponent = "tFilterRow_3";

				/**
				 * [tFilterRow_3 finally ] stop
				 */

				/**
				 * [tRESTClient_4 finally ] start
				 */

				currentComponent = "tRESTClient_4";

				/**
				 * [tRESTClient_4 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_7 finally ] start
				 */

				currentComponent = "tExtractJSONFields_7";

				/**
				 * [tExtractJSONFields_7 finally ] stop
				 */

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

				/**
				 * [tRESTClient_6 finally ] start
				 */

				currentComponent = "tRESTClient_6";

				/**
				 * [tRESTClient_6 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_8 finally ] start
				 */

				currentComponent = "tExtractJSONFields_8";

				/**
				 * [tExtractJSONFields_8 finally ] stop
				 */

				/**
				 * [tJavaRow_6 finally ] start
				 */

				currentComponent = "tJavaRow_6";

				/**
				 * [tJavaRow_6 finally ] stop
				 */

				/**
				 * [tRESTClient_7 finally ] start
				 */

				currentComponent = "tRESTClient_7";

				/**
				 * [tRESTClient_7 finally ] stop
				 */

				/**
				 * [tRESTResponse_1 finally ] start
				 */

				currentComponent = "tRESTResponse_1";

				/**
				 * [tRESTResponse_1 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_9 finally ] start
				 */

				currentComponent = "tExtractJSONFields_9";

				/**
				 * [tExtractJSONFields_9 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tFilterRow_7 finally ] start
				 */

				currentComponent = "tFilterRow_7";

				/**
				 * [tFilterRow_7 finally ] stop
				 */

				/**
				 * [tRESTClient_11 finally ] start
				 */

				currentComponent = "tRESTClient_11";

				/**
				 * [tRESTClient_11 finally ] stop
				 */

				/**
				 * [tRESTResponse_3 finally ] start
				 */

				currentComponent = "tRESTResponse_3";

				/**
				 * [tRESTResponse_3 finally ] stop
				 */

				/**
				 * [tFilterRow_6 finally ] start
				 */

				currentComponent = "tFilterRow_6";

				/**
				 * [tFilterRow_6 finally ] stop
				 */

				/**
				 * [tRESTClient_10 finally ] start
				 */

				currentComponent = "tRESTClient_10";

				/**
				 * [tRESTClient_10 finally ] stop
				 */

				/**
				 * [tRESTResponse_2 finally ] start
				 */

				currentComponent = "tRESTResponse_2";

				/**
				 * [tRESTResponse_2 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_10 finally ] start
				 */

				currentComponent = "tExtractJSONFields_10";

				/**
				 * [tExtractJSONFields_10 finally ] stop
				 */

				/**
				 * [tMap_9 finally ] start
				 */

				currentComponent = "tMap_9";

				/**
				 * [tMap_9 finally ] stop
				 */

				/**
				 * [tFilterRow_9 finally ] start
				 */

				currentComponent = "tFilterRow_9";

				/**
				 * [tFilterRow_9 finally ] stop
				 */

				/**
				 * [tJavaRow_7 finally ] start
				 */

				currentComponent = "tJavaRow_7";

				/**
				 * [tJavaRow_7 finally ] stop
				 */

				/**
				 * [tRESTClient_13 finally ] start
				 */

				currentComponent = "tRESTClient_13";

				/**
				 * [tRESTClient_13 finally ] stop
				 */

				/**
				 * [tRESTResponse_4 finally ] start
				 */

				currentComponent = "tRESTResponse_4";

				/**
				 * [tRESTResponse_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRESTRequest_1_Loop_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final drive_slack drive_slackClass = new drive_slack();

		int exitCode = drive_slackClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = drive_slack.class.getClassLoader()
					.getResourceAsStream("demo/drive_slack_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = drive_slack.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}
		try {
			errorCode = null;
			tRESTRequest_1_LoopProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRESTRequest_1_Loop) {
			globalMap.put("tRESTRequest_1_Loop_SUBPROCESS_STATE", -1);

			e_tRESTRequest_1_Loop.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : drive_slack");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {// for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}

		if (!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 630872 characters generated by Talend Open Studio for ESB on the December 31,
 * 2019 3:33:35 PM ICT
 ************************************************************************************************/